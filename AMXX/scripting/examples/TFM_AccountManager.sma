/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta_util>
#include <hamsandwich>
#include <cstrike>
#include <csx>
#include <engine>
#include <celltrie>


#include <CHARACTER_MOD>
#include <cswpn_ultilities>
#include <player_api>
#include <cstrike_pdatas>

#include <RankManagement/TFM_RankSystem.inc>
#include <RankManagement/TFM_LevelSystem.inc>
#include <cvar_util>
#include <GamePlay_Included/IntegerConstant.inc>
#include <GamePlay_Included/Tools.inc>


#include <mmcl>

//	ITEM
//	WEAPONS , SOME STUFFS
#include <TFM_WPN>
#include <Item_Included/ArmorSystem>

	
/***************************************************************/

#define TASK_REGISTER_CZ_FUNC 1000
#define TASK_PUNISH_HACK 3000
#define TASK_RESPAWN_PLAYER 5000
#define TASK_GIVE_EQUIPMENTS 6000
#define TASK_AUTO_LOGIN 7000
#define TASK_DISABLE_COMMAND_BOT 9000

#define AUTO_TEAM_JOIN_DELAY 0.1
#define INVENTORY_ACCESS_DELAY	0.5


/***************************************************************/

#define PRIMARY_PREFIX	"PRIM_ID_"
#define SECONDARY_PREFIX "SEC_ID_"
#define MELEE_PREFIX	"MELEE_ID_"
#define GRENADE_PREFIX	"GRENADE_ID_"

#define PRIMARY_TYPE_PREFIX	"PRIM_TYPE_ID_"
#define SECONDARY_TYPE_PREFIX	"SEC_TYPE_ID_"
#define MELEE_TYPE_PREFIX	"MELEE_TYPE_ID_"
#define GRENADE_TYPE_PREFIX	"GRENADE_TYPE_ID_"

/***************************************************************/

#define MAX_INVENTORY_SLOT 1
#define MAXBOT 33

/***************************************************************/

new map_type = 1


new bool:gPodBot
/***************************************************************/

enum
{
	EQUIP_FULL = 1,
	EQUIP_KNIFE,
	EQUIP_PISTOL,
	EQUIP_SNIPER
}

enum
{
	BOT_NULL,
	ZBOT,
	PODBOT
}

enum
{
	SLOT_INVENTORY_ID = MAX_INVENTORY_SLOT * 4,
	SLOT_CHARACTER_ID,
	SLOT_ARMOR_ID,
	SLOT_DEFUSER_ID,
	SLOT_TEAM_ID,
	SLOT_ZOMBIE_CLASS_ID,
	SLOT_NIGHTVISION_ID,
	SLOT_RANK_ID
	
}
/***************************************************************/

// Forwards
new ifw_UserLoggedIn
new ifw_Result



new iLauncherUsing = 0
new iBlCount, iGrCount



//	MENUID
new iLoginMenuId, iBagSelectionMenuId

//	BIT FIELD

new bit_UserLoggedIn // Check if player has logged in
new bit_CanChangeInventorySlot // Check if player can change his/her inventory
new bit_HasC4 // Check if player has C4 before being stripped weapons


new bit_HasDefuser // Check if player has Defuser
new bit_HasNightVision	// Check if player has NVG 
//new bCantStrip



//	BIT TOOLS

#define SetPlayerBit(%1,%2)      (%1 |= (1<<(%2&31)))
#define ClearPlayerBit(%1,%2)    (%1 &= ~(1 <<(%2&31)))
#define CheckPlayerBit(%1,%2)    (%1 & (1<<(%2&31)))


#define BL_ClassMenuId 26
#define GR_ClassMenuId 27




#define EQUIP_ZONE_RADIUS	500.0

new iTASK_ON = 0
new iPBOT_COUNT = 0



#define QUALITY_TO_UPGRADE 80.0

new Trie:iPersonalInfo[MAXBOT]

new Trie:iRegisteredAccount
new Trie:iAccountPassWord
new Trie:iAccountNickName
new Trie:iAccountInUse
new Trie:iBotInformation


#define PREFIX_NAME_BL	"NAME_BL_"
#define PREFIX_NAME_GR	"NAME_GR_"

#define INFO_ACCOUNT	"INFO_ACCOUNT"
#define INFO_NICKNAME	"INFO_NICKNAME"
#define INFO_SPRAY	"INFO_SPRAY"
#define INFO_ACCOUNT_FILE	"INFO_ACCOUNT_FILE"


/*				PLAYER INFO [FLOAT]				*/
#define NEXT_INVENTORY_TIME	"NEXT_INVENT"

#define FLOAT_INFO_ORIGIN_X	"FL_ORIGIN_X"
#define FLOAT_INFO_ORIGIN_Y	"FL_ORIGIN_Y"
#define FLOAT_INFO_ORIGIN_Z	"FL_ORIGIN_Z"

/*				PLAYER INFO [INT]				*/
#define INT_INFO_TEAM	"INT_TEAM"
#define INT_INFO_CLASS	"INT_CLASS"
#define INT_INFO_CHARACTER_ID	"INT_CHARACTER_ID"
#define INT_INVENTORY_ID	"INT_INVENT_ID"

#define INT_INFO_ARMOR_TYPE	"INT_ARMOR_TYPE"
#define INT_INFO_ARMOR_ID	"INT_ARMOR_ID"
#define INT_INFO_ARMOR_AMOUNT	"INT_ARMOR_AMOUNT"


#define ACCOUNT_FILE_MANAGER "TFM_Account.cfg"

new AUTO_LOGIN	= 1


#define NVAULT_DIRECTORY "addons/amxmodx/data/vault"


stock MD5_CHECKED_FILE[][] = {
	


}


stock MD5_CODE[][] = {
	

}

enum
{
	ARMORTYPE_NORMAL = 1,
	ARMORTYPE_MDL,
	ARMORTYPE_SERIAL
}

#define ARMORID_KEVLAR	1
#define ARMORID_VESTHELM 2

public plugin_natives()
{
	register_native("is_user_online", "nt_is_user_online", 1)
	
	
	register_native("get_user_account", "nt_get_user_account", 1)
	register_native("get_user_nickname", "nt_get_user_nickname", 1)
	register_native("get_map_equip_type", "nt_get_map_equip_type", 1)
	register_native("get_user_current_slot", "nt_get_user_current_slot", 1)
	register_native("get_max_inventory_slot", "nt_get_max_inventory_slot", 1)

	register_native("is_autologin_enabled", "nt_is_autologin_enabled", 1)
	register_native("is_launcher_running", "nt_is_launcher_using", 1)
	
	register_native("is_user_in_equip_zone", "nt_is_user_in_equip_zone", 1)
	
	register_native("can_user_use_inventory", "nt_can_user_use_inventory", 1)
	register_native("read_account_file", "nt_read_account_file", 1)
	
	
	register_native("set_inventory_primary", "nt_set_inventory_primary", 1)
	register_native("set_inventory_secondary", "nt_set_inventory_secondary", 1)
	register_native("set_inventory_melee", "nt_set_inventory_melee", 1)
	register_native("set_inventory_grenade", "nt_set_inventory_grenade", 1)
}
	
public nt_is_user_online(id)
{
	
	if (CheckPlayerBit(bit_UserLoggedIn, id))
		return 1
		
	return 0
}
	
public nt_get_user_account(id, szAccount[], iLen)
{
	if (!nt_is_user_online(id))
		return 0
	
	param_convert(2)
	
	TrieGetString(iPersonalInfo[id], INFO_ACCOUNT, szAccount, iLen)
	return 1
}

public nt_get_user_nickname(id, szNickName[], iLen)
{
	if (!nt_is_user_online(id))
		return 0
	
	if (!iPersonalInfo[id])
		return 0
		
	param_convert(2)
	TrieGetString(iPersonalInfo[id], INFO_NICKNAME, szNickName, iLen)
	return 1
}

public nt_get_map_equip_type()
	return map_type
	
public nt_get_user_current_slot(id)
{
	if (!iPersonalInfo[id])
		return 0
		
	
	new iInventoryId
	TrieGetCell(iPersonalInfo[id], INT_INVENTORY_ID, iInventoryId)
	return iInventoryId
}

public nt_get_max_inventory_slot()
	return MAX_INVENTORY_SLOT
	
public nt_is_autologin_enabled()
	return AUTO_LOGIN	
	
public nt_is_launcher_using()
	return iLauncherUsing

public nt_is_user_in_equip_zone(id)
{
	new Float:fOrigin[3]
	pev(id, pev_origin, fOrigin)
	
	new Float:fLastOrigin[3]
	
	fLastOrigin[0] = get_float_from_key(iPersonalInfo[id], FLOAT_INFO_ORIGIN_X)
	fLastOrigin[1] = get_float_from_key(iPersonalInfo[id], FLOAT_INFO_ORIGIN_Y)
	fLastOrigin[2] = get_float_from_key(iPersonalInfo[id], FLOAT_INFO_ORIGIN_Z)
	
	return (vector_distance(fLastOrigin, fOrigin) <= EQUIP_ZONE_RADIUS)
}

public nt_can_user_use_inventory(id)
{
	if (cs_get_user_vip(id))
		return 0
		
	return CheckPlayerBit(bit_CanChangeInventorySlot, id)
}

public nt_read_account_file(id, iLine, szOutput[], iLen)
{
	if (nt_is_user_online(id))
		return 0
		
	param_convert(3)
	
	new szAccount[32]
	TrieGetString(iPersonalInfo[id], INFO_ACCOUNT, szAccount, sizeof szAccount - 1)
	
	new szInventoryFile[256]
	formatex(szInventoryFile, sizeof szInventoryFile - 1, "%s/binfo_%s.tfm", NVAULT_DIRECTORY, szAccount)
	
	new iTextLen
	read_file(szInventoryFile, iLine, szOutput, iLen, iTextLen)
	return 1
	
}

public nt_set_inventory_primary(id, iInventoryId, iPrimaryWpnType, iPrimaryWpnId)
{
	if (!nt_is_user_online(id))
		return 0
		
	if (iInventoryId < 0 || iInventoryId > MAX_INVENTORY_SLOT - 1)
		return 0
		
	new szKey[32]
	new szKey_1[32]
	formatex(szKey, sizeof szKey - 1, "%s_%d", PRIMARY_PREFIX, iInventoryId)
	formatex(szKey_1, sizeof szKey_1 - 1, "%s_%d", PRIMARY_TYPE_PREFIX, iInventoryId)
	
	switch (iPrimaryWpnType)
	{
		case 2:
		{
			set_int_to_key(iPersonalInfo[id], szKey, iPrimaryWpnId)
			set_int_to_key(iPersonalInfo[id], szKey_1,  2)
		}
		default:
		{
			set_int_to_key(iPersonalInfo[id], szKey, iPrimaryWpnId)
			set_int_to_key(iPersonalInfo[id], szKey_1,  1)
		}
	}
	
	return 1
}

public nt_set_inventory_secondary(id, iInventoryId, iSecondaryWpnType, iSecondaryWpnId)
{
	if (!nt_is_user_online(id))
		return 0
		
	if (iInventoryId < 0 || iInventoryId > MAX_INVENTORY_SLOT - 1)
		return 0
		
	new szKey[32]
	new szKey_1[32]
	formatex(szKey, sizeof szKey - 1, "%s_%d", SECONDARY_PREFIX, iInventoryId)
	formatex(szKey_1, sizeof szKey_1 - 1, "%s_%d", SECONDARY_TYPE_PREFIX, iInventoryId)
	
	switch (iSecondaryWpnType)
	{
		case 2:
		{
			set_int_to_key(iPersonalInfo[id], szKey, iSecondaryWpnId)
			set_int_to_key(iPersonalInfo[id], szKey_1,  2)
		}
		default:
		{
			set_int_to_key(iPersonalInfo[id], szKey, iSecondaryWpnId)
			set_int_to_key(iPersonalInfo[id], szKey_1,  1)
		}
	}
	
	return 1
}

public nt_set_inventory_melee(id, iInventoryId, iMeleeType, iMeleeId)
{
	if (!nt_is_user_online(id))
		return 0
		
	if (iInventoryId < 0 || iInventoryId > MAX_INVENTORY_SLOT - 1)
		return 0
		
	new szKey[32]
	new szKey_1[32]
	formatex(szKey, sizeof szKey - 1, "%s_%d", MELEE_PREFIX, iInventoryId)
	formatex(szKey_1, sizeof szKey_1 - 1, "%s_%d", MELEE_TYPE_PREFIX, iInventoryId)
	
	switch (iMeleeType)
	{
		case 2:
		{
			set_int_to_key(iPersonalInfo[id], szKey, iMeleeId)
			set_int_to_key(iPersonalInfo[id], szKey_1,  2)
		}
		default:
		{
			set_int_to_key(iPersonalInfo[id], szKey, iMeleeId)
			set_int_to_key(iPersonalInfo[id], szKey_1,  1)
		}
	}
	
	return 1
}

public nt_set_inventory_grenade(id, iInventoryId, iGrenadeType, iGrenadeId)
{
	if (!nt_is_user_online(id))
		return 0
		
	if (iInventoryId < 0 || iInventoryId > MAX_INVENTORY_SLOT - 1)
		return 0
		
	new szKey[32]
	new szKey_1[32]
	formatex(szKey, sizeof szKey - 1, "%s_%d", GRENADE_PREFIX, iInventoryId)
	formatex(szKey_1, sizeof szKey_1 - 1, "%s_%d", GRENADE_TYPE_PREFIX, iInventoryId)
	
	switch (iGrenadeType)
	{
		case 2:
		{
			set_int_to_key(iPersonalInfo[id], szKey, iGrenadeId)
			set_int_to_key(iPersonalInfo[id], szKey_1,  2)
		}
		default:
		{
			set_int_to_key(iPersonalInfo[id], szKey, iGrenadeId)
			set_int_to_key(iPersonalInfo[id], szKey_1,  1)
		}
	}
	
	return 1
}

public plugin_precache()
{
		
	register_dictionary("TFM_AccountManager.txt")
	iLauncherUsing = 1
}
	
public plugin_init() 
{
	#define PLUGIN	"[TFM] Account Manager"
	#define VERSION	"-No Info-"
	#define AUTHOR	"Nguyen Duy Linh"

	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	create_menu()
	
	ifw_UserLoggedIn = CreateMultiForward("TM_PlayerLoggedIn", ET_IGNORE, FP_CELL, FP_STRING)	
	
	for (new iProfile = 0; iProfile < MAXBOT; iProfile++)
		if (!iPersonalInfo[iProfile])
			iPersonalInfo[iProfile] = TrieCreate()
	
	load_csred_account()
	
	
	register_clcmd("ChooseBag", "_CmdChooseBag")
	//register_concmd("ShowMyBag", "clcmd_DisplayInventory")
	
	register_clcmd("drop", "clcmd_DropWeapon")
	
	
	register_clcmd("jointeam", "clcmd_changeteam")
	register_clcmd("chooseclass", "clcmd_changeclass")
	register_clcmd("joinclass", "clcmd_changeclass")
	
	register_logevent("round_begin" , 2 , "1=Round_Start")
	
	
	register_message(get_user_msgid("ShowMenu"), "message_show_menu")
	register_message(get_user_msgid("VGUIMenu"), "message_vgui_menu")
	
	
	
	register_forward(FM_CmdStart, "fw_CmdStart")
	
	register_forward(FM_ClientUserInfoChanged, "fw_ClientUserInfoChanged")
	//register_forward(FM_PlayerPreThink, "fw_PlayerThink")
	
	
	iLauncherUsing = 0
	
	
	LoadInfoFromLauncher()
	
}

public plugin_cfg()
{
	LockWeaponCvar()
	CheckMapEquip()
}

public client_connect(id)
{
	ClearPlayerBit(bit_CanChangeInventorySlot, id);
	ClearPlayerBit(bit_UserLoggedIn, id)
	
}


public LockWeaponCvar()
{
	
	new iCvarPointer
	
	#define KNIFE_MODE  "01111111111111111111111111"
	#define PISTOL_MODE "00000001111111111111111111"
	#define SNIPER_MODE "01111111111111111111000011"
	#define FULL_MODE "00000000000000000000000001"

	if (map_type == EQUIP_KNIFE)
	{
		new iWeaponMode, iFightYard
		if (is_deathmatch_on(iWeaponMode, iFightYard) == CS_DM_FY)
		{
			iCvarPointer = get_cvar_pointer("bot_allow_grenades")
			CvarLockValue(iCvarPointer, "1")
			CvarEnableLock(iCvarPointer)
			
			iCvarPointer = get_cvar_pointer("bot_allow_machine_guns")
			CvarLockValue(iCvarPointer, "1")
			CvarEnableLock(iCvarPointer)
			
			iCvarPointer = get_cvar_pointer("bot_allow_pistols")
			CvarLockValue(iCvarPointer, "1")
			CvarEnableLock(iCvarPointer)
			
			iCvarPointer = get_cvar_pointer("bot_allow_rifles")
			CvarLockValue(iCvarPointer, "1")
			CvarEnableLock(iCvarPointer)
			
			iCvarPointer = get_cvar_pointer("bot_allow_shield")
			CvarLockValue(iCvarPointer, "1")
			CvarEnableLock(iCvarPointer)
			
			iCvarPointer = get_cvar_pointer("pb_jasonmode")
			CvarLockValue(iCvarPointer, "0")
			CvarEnableLock(iCvarPointer)
			
			iCvarPointer = get_cvar_pointer("pb_restrweapons")
			CvarLockValue(iCvarPointer, FULL_MODE)
			CvarEnableLock(iCvarPointer)
			
			
			return
		}
		iCvarPointer = get_cvar_pointer("bot_allow_grenades")
		CvarLockValue(iCvarPointer, "0")
		CvarEnableLock(iCvarPointer)
			
		iCvarPointer = get_cvar_pointer("bot_allow_machine_guns")
		CvarLockValue(iCvarPointer, "0")
		CvarEnableLock(iCvarPointer)
			
		iCvarPointer = get_cvar_pointer("bot_allow_pistols")
		CvarLockValue(iCvarPointer, "0")
		CvarEnableLock(iCvarPointer)
			
		iCvarPointer = get_cvar_pointer("bot_allow_rifles")
		CvarLockValue(iCvarPointer, "0")
		CvarEnableLock(iCvarPointer)
			
		iCvarPointer = get_cvar_pointer("bot_allow_shield")
		CvarLockValue(iCvarPointer, "0")
		CvarEnableLock(iCvarPointer)
			
		iCvarPointer = get_cvar_pointer("pb_jasonmode")
		CvarLockValue(iCvarPointer, "1")
		CvarEnableLock(iCvarPointer)
		
		iCvarPointer = get_cvar_pointer("pb_restrweapons")
		CvarLockValue(iCvarPointer, KNIFE_MODE)
		CvarEnableLock(iCvarPointer)
			
			
	}
	else if (map_type == EQUIP_PISTOL)
	{
		iCvarPointer = get_cvar_pointer("bot_allow_grenades")
		CvarLockValue(iCvarPointer, "0")
		CvarEnableLock(iCvarPointer)
			
		iCvarPointer = get_cvar_pointer("bot_allow_machine_guns")
		CvarLockValue(iCvarPointer, "0")
		CvarEnableLock(iCvarPointer)
			
		iCvarPointer = get_cvar_pointer("bot_allow_pistols")
		CvarLockValue(iCvarPointer, "1")
		CvarEnableLock(iCvarPointer)
			
		iCvarPointer = get_cvar_pointer("bot_allow_rifles")
		CvarLockValue(iCvarPointer, "0")
		CvarEnableLock(iCvarPointer)
			
		iCvarPointer = get_cvar_pointer("bot_allow_shield")
		CvarLockValue(iCvarPointer, "0")
		CvarEnableLock(iCvarPointer)
			
		iCvarPointer = get_cvar_pointer("pb_jasonmode")
		CvarLockValue(iCvarPointer, "0")
		CvarEnableLock(iCvarPointer)
		
		iCvarPointer = get_cvar_pointer("pb_restrweapons")
		CvarLockValue(iCvarPointer, PISTOL_MODE)
		CvarEnableLock(iCvarPointer)
		
	}
	else if (map_type == EQUIP_FULL)
	{
		iCvarPointer = get_cvar_pointer("bot_allow_grenades")
		CvarLockValue(iCvarPointer, "1")
		CvarEnableLock(iCvarPointer)
			
		iCvarPointer = get_cvar_pointer("bot_allow_machine_guns")
		CvarLockValue(iCvarPointer, "1")
		CvarEnableLock(iCvarPointer)
			
		iCvarPointer = get_cvar_pointer("bot_allow_pistols")
		CvarLockValue(iCvarPointer, "1")
		CvarEnableLock(iCvarPointer)
			
		iCvarPointer = get_cvar_pointer("bot_allow_rifles")
		CvarLockValue(iCvarPointer, "1")
		CvarEnableLock(iCvarPointer)
			
		iCvarPointer = get_cvar_pointer("bot_allow_shield")
		CvarLockValue(iCvarPointer, "1")
		CvarEnableLock(iCvarPointer)
			
		iCvarPointer = get_cvar_pointer("pb_jasonmode")
		CvarLockValue(iCvarPointer, "0")
		CvarEnableLock(iCvarPointer)
		
		iCvarPointer = get_cvar_pointer("pb_restrweapons")
		CvarLockValue(iCvarPointer, FULL_MODE)
		CvarEnableLock(iCvarPointer)
		
	}
	else if (map_type == EQUIP_SNIPER)
	{
		iCvarPointer = get_cvar_pointer("bot_allow_shield")
		CvarLockValue(iCvarPointer, "0")
		CvarEnableLock(iCvarPointer)
		
		iCvarPointer = get_cvar_pointer("pb_restrweapons")
		CvarLockValue(iCvarPointer, SNIPER_MODE)
		CvarEnableLock(iCvarPointer)
	}
	
}

public fw_PlayerThink(id)
{
	/*
	if (is_user_bot(id))
		return
		
	if (!is_user_alive(id))
		return
			
	new CsTeams:iTeam = cs_get_user_team(id)
	
	if (is_user_zombie(id))
		return
		
	if (get_user_character(id) > -1)
		return
	
	
	new iInternalModel = fm_get_user_internal_model(id)
		
	new iPlayerClassId = get_int_from_key(iPersonalInfo[id], INT_INFO_CLASS)
	
	if (iTeam == CS_TEAM_T)
	{
		if (iInternalModel != BL_MODEL[iPlayerClassId])
			fm_set_user_internal_model(id, BL_MODEL[iPlayerClassId])
	}
	else if (iTeam == CS_TEAM_CT)
	{
		if (iInternalModel != GR_MODEL[iPlayerClassId])
			fm_set_user_internal_model(id, GR_MODEL[iPlayerClassId])
	}
			
	*/
}

public csred_EventPlaying(id, iWeaponId, iEventId, iWeaponEnt)
{
	if (!is_user_connected(id))
		return
		
	if (!is_user_alive(id))
		return
		
	if (is_user_bot(id))
		return
		
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90 || iWeaponId == 2)
		return
		
	if (nt_can_user_use_inventory(id))
		ClearPlayerBit(bit_CanChangeInventorySlot , id)
}

public client_putinserver(id)
{
	ClearPlayerBit(bit_UserLoggedIn, id);
	
	
	if (!iPersonalInfo[id])
		iPersonalInfo[id] = TrieCreate()
		
	if (is_user_bot(id))
	{
		set_task(0.1, "RegisterCzFunc_TASK", id + TASK_REGISTER_CZ_FUNC)
		
		new szBotName[32]
		get_user_name(id, szBotName, sizeof szBotName - 1)
		client_print(0, print_chat, "%L", 0, "MSG_JOINT_BATTLE", szBotName)
		
		
		if (gPodBot)
			server_cmd("waypoint off")
		
		
			
			
		if (gPodBot)
		{
			iPBOT_COUNT++
			
			if (iPBOT_COUNT > iBlCount + iGrCount - 1)
			{
				if (!iTASK_ON)
				{
					set_task(1.0, "TASK_DISABLE_HACKPODBOT", TASK_DISABLE_COMMAND_BOT)
					iTASK_ON = 1
				}
			}
		}
		
	}
	else 
	{
		if (nt_is_autologin_enabled())
			return
			
		if (is_user_admin(id))
		{
			new szAccountFile[256]
			formatex(szAccountFile, sizeof szAccountFile - 1, "%s/inf_admin.tfm", NVAULT_DIRECTORY)
			
			if (file_exists(szAccountFile))
			{
				
				if (iLauncherUsing)
				{
					
					enum
					{
						LINE_ACCOUNT,
						LINE_NICKNAME
					}
					
					new szInfo[128], szAccountName[128], iTextLen
					
					read_file(szAccountFile, LINE_ACCOUNT, szAccountName, sizeof szAccountName - 1, iTextLen)
					replace(szAccountName, sizeof szAccountName - 1, "[account]", "")
					TrieSetString(iPersonalInfo[id], INFO_ACCOUNT, szAccountName)
					
					
					
					
					read_file(szAccountFile, LINE_NICKNAME, szInfo, sizeof szInfo - 1, iTextLen)
					replace_all(szInfo, sizeof szInfo - 1, "[nick-name]", "")
					TrieSetString(iPersonalInfo[id], INFO_NICKNAME, szInfo)
					
					ReadMyBag(id, szAccountName)
				}
			}
		}
		
		
	}
}

public RegisterCzFunc_TASK(TASKID)
{
	new id = TASKID - TASK_REGISTER_CZ_FUNC
	if (is_user_bot(id)) 
		set_int_to_key(iPersonalInfo[id], INT_INFO_CLASS, random_num(1, 5))
			
	set_task(2.0, "BotRespawned_TASK", id - TASK_REGISTER_CZ_FUNC)
}

public TASK_DISABLE_HACKPODBOT(TASKID)
{
	
	Register_CL_SV_CON_CMD("pb", "fw_DisablePodbotCMD")
	Register_CL_SV_CON_CMD("waypoint", "fw_DisablePodbotCMD")
}

public fw_DisablePodbotCMD()
	return PLUGIN_HANDLED
	
public client_disconnect(id)
{
		
	if (!is_user_bot(id))
	{
		if (!is_user_admin(id) )
		{
			new szAccount[128]
			TrieGetString(iPersonalInfo[id], INFO_ACCOUNT, szAccount, sizeof szAccount - 1)
			if (nt_is_user_online(id))
				TrieDeleteKey(iRegisteredAccount, szAccount)
		}
		
		if (nt_is_user_online(id))
		{
			new szNickName[32]
			TrieGetString(iPersonalInfo[id], INFO_NICKNAME, szNickName, sizeof szNickName - 1)
			client_print(0, print_chat, "%L", 0, "MSG_EXIT_BATTLE", szNickName)
		}	
	}
	else
	{
		new BotName[128]
		get_user_name(id, BotName, 127)
		client_print(0, print_chat, "%L", 0, "MSG_EXIT_BATTLE", BotName)
	}
		
	ClearPlayerBit(bit_UserLoggedIn, id)
	//format(cMyAccount[id], 255, "")
	TrieSetString(iPersonalInfo[id], INFO_ACCOUNT, "")
	remove_task(id + TASK_AUTO_LOGIN)
	remove_task(id + TASK_RESPAWN_PLAYER)
}

public clcmd_changeteam(id, level, cid)
{	
	if (nt_is_user_online(id))
		return PLUGIN_HANDLED
	return PLUGIN_CONTINUE
}

public clcmd_changeclass(id)
{	
	new CsTeams:iTeam = cs_get_user_team(id)
	
	if (iTeam != CS_TEAM_CT && iTeam != CS_TEAM_T)
		return PLUGIN_HANDLED
		
	new szArg[3]
	read_argv(1, szArg, sizeof szArg - 1)
	if (!equal(szArg, "1"))
		return PLUGIN_HANDLED
		
	return PLUGIN_CONTINUE
	
}
public clcmdauto_login(id)
{
	if (!is_user_connected(id))
		return 
		
	if (nt_is_user_online(id))
		return 
	
	new cAccount[128], cPassword[32], cNickName[32]
	
	new iRandomAccount, iRandomPassword, iRandomNickName
	iRandomAccount = random_num(112, 10000)
	iRandomPassword = random_num(10, 30)
	iRandomNickName = random_num(100, 50000)
	formatex(cAccount, sizeof cAccount - 1, "%d", iRandomAccount)
	formatex(cPassword, sizeof cPassword - 1, "%d", iRandomPassword)
	formatex(cNickName, sizeof cNickName - 1, "%d", iRandomNickName)
	
	new iResult = RegisterAccount(id, cAccount, cPassword, cNickName)
	
	if(!iResult)
	{
		//clcmdauto_login(id)
		set_task(0.1, "clcmdauto_login", id)
		return
		
	}
	
	TFM_set_user_gp(id, get_cvar_num("mp_startmoney"))
	TFM_set_user_coin(id, 0)
	
	iResult = SigningIn(id, cAccount, cPassword)
	
	
	client_print(id, print_console, "%L", id, "MSG_ACCOUNT_PASSWORD", cAccount, cPassword)

}

public csred_PlayerKilledPost(iVictim, iKiller)
{
	if (!is_user_connected(iVictim))
		return
		
	ClearPlayerBit(bit_CanChangeInventorySlot, iVictim)
	remove_task(iVictim + 19894)
}

public round_begin()
{
	if (iLauncherUsing && iBotInformation)
	{
		set_cvar_num("mp_maxplayers", 32)
		
		new szKey[128]
		new szInfo[32]
		
		if (!gPodBot)
		{
			new i 
				
			for (i = 0; i < iBlCount; i++)
			{	
				formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_NAME_BL, i)
				TrieGetString(iBotInformation, szKey, szInfo, sizeof szInfo - 1)
					
				server_cmd("bot_add_t %s", szInfo)
			}
				
			for ( i = 0; i < iGrCount; i++)
			{
				formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_NAME_GR, i)
				TrieGetString(iBotInformation, szKey, szInfo, sizeof szInfo - 1)
					
				server_cmd("bot_add_ct %s", szInfo)
			}
		}
		else
		{
			new iBOT_DIFFICULT = get_cvar_num("pb_maxbotskill")
				
			if (iBOT_DIFFICULT > 100)
				iBOT_DIFFICULT = 100
				
			new iRandom1 = random_num(1, 3)
			new iRandom2 = random_num(1, 4)
				
			new i 
			for (i = 0; i < iBlCount; i++)
			{
					
				formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_NAME_BL, i)
				TrieGetString(iBotInformation, szKey, szInfo, sizeof szInfo - 1)
					
				server_cmd("pb add 100 %d 1 %d %s", iRandom1, iRandom2, szInfo)
			}
				
			for (i = 0; i < iGrCount; i++)
			{
				formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_NAME_GR, i)
				TrieGetString(iBotInformation, szKey, szInfo, sizeof szInfo - 1)
					
				server_cmd("pb add 100 %d 2 %d %s", iRandom1, iRandom2, szInfo)
			}
		}
		
		TrieDestroy(iBotInformation)
	}
}
	
public csred_WpnAttachToPlayerPost(id, iEnt, iWeaponId)
{	
	new szWeaponName[32]
	get_weaponname(iWeaponId, szWeaponName, sizeof szWeaponName - 1)
	
	new iBlockWeapon = 0
	
	if (is_gungame_on())
		return
		
	if (is_primary_wpn(iWeaponId))
	{
		new iPrimaryWpnId = get_user_pw(id)
			
		switch (map_type)
		{
			case EQUIP_KNIFE:
			{
				new iWeaponMode, iFightYard
				if (is_deathmatch_on(iWeaponMode, iFightYard) == CS_DM_FY)
				{
					iBlockWeapon = 0
				}
				else	
					iBlockWeapon = 1
			}
			case EQUIP_PISTOL :
			{
				if (iPrimaryWpnId < 0)
					iBlockWeapon = 1
				else	
				{
					if (get_pw_type(iPrimaryWpnId) != TYPE_PISTOL)
						iBlockWeapon = 1
				}
			}
			case EQUIP_SNIPER :
			{
				if (iPrimaryWpnId < 0)
					iBlockWeapon = 1
				else	
				{
					if (get_pw_type(iPrimaryWpnId) != TYPE_SNIPER)
						iBlockWeapon = 1
				}
			}
		}
		
	}
	else if (is_secondary_wpn(iWeaponId))
	{
		new iSecondaryWpnId = get_user_sec_wpn(id)
		switch (map_type)
		{
			case EQUIP_KNIFE:
			{
				new iWeaponMode, iFightYard
				if (is_deathmatch_on(iWeaponMode, iFightYard) == CS_DM_FY)
				{ 
					iBlockWeapon = 0
				}
				else	
					iBlockWeapon = 1
			}
			case EQUIP_PISTOL :
			{
				if (iSecondaryWpnId < 0)
					iBlockWeapon = 0
				else	
				{
					if (get_sec_wpn_type(iSecondaryWpnId) != TYPE_PISTOL)
						iBlockWeapon = 1
				}
			}
			case EQUIP_SNIPER :
			{
				if (iSecondaryWpnId < 0)
					iBlockWeapon = 1
				else	
				{
					if (get_sec_wpn_type(iSecondaryWpnId) != TYPE_SNIPER)
						iBlockWeapon = 1
				}
			}
		}
	}
	if (!user_has_weapon(id, CSW_KNIFE))
	{
		if (is_user_bot(id))
			fm_give_item(id, "weapon_knife")
	}
	
	if (iBlockWeapon)
	{
		UT_StripPlayerWeapon(id, szWeaponName)
		
	}
}

public message_show_menu(msgid, dest, id) {
	if (!should_autojoin(id))
		return PLUGIN_CONTINUE
		
	new team_select[] = "#Team_Select"
	new menu_text_code[sizeof team_select]
	get_msg_arg_string(4, menu_text_code, sizeof menu_text_code - 1)
	if (!equal(menu_text_code, "#CT_Select") && !equal(menu_text_code, "#Terrorist_Select"))
		return PLUGIN_CONTINUE
	
	new iPlayerClassId = get_int_from_key(iPersonalInfo[id], INT_INFO_CLASS)
	
	if (iPlayerClassId  < 1 || iPlayerClassId  > 5)
	{
		clcmdauto_login(id)
		return PLUGIN_HANDLED
	}
		
	new szClass[32]
	formatex(szClass, sizeof szClass - 1, "%d", iPlayerClassId)
	engclient_cmd(id, "joinclass", szClass)
	return PLUGIN_HANDLED
}

public message_vgui_menu(msgid, dest, id) 
{
	if (is_user_bot(id))
		return PLUGIN_CONTINUE
	
	if (get_msg_arg_int(1) == 2)
	{
		if (!should_autojoin(id))
			return PLUGIN_CONTINUE
		
		if (!nt_is_user_online(id))
			return PLUGIN_CONTINUE
			
		set_force_team_join_task(id, msgid)
		
		return PLUGIN_HANDLED
	}
	else if (get_msg_arg_int(1) == 25 || get_msg_arg_int(1) == 26 || get_msg_arg_int(1) == 27)
	{	
		if (should_autojoin(id))
		{
			clcmdauto_login(id)
			client_cmd(id, "joinclass 1")
		}
		return PLUGIN_HANDLED
	}
	return PLUGIN_CONTINUE
}

public fw_LoginOption(id, iLogMenuId, iItemId)
{
	new szInfo[10], szMenuItemName[64], iACCESS_FLAG , iCALL_BACK
	
	menu_item_getinfo(iLogMenuId, iItemId, iACCESS_FLAG, szInfo, 9, szMenuItemName, 63, iCALL_BACK)
	
	new iOption = str_to_num(szInfo)
	
	if (iOption == 1)
	{
		client_print(id, print_center, "%L", id, "MSG_COMMAND_STRUCTURE")
	}
	else
		clcmdauto_login(id)
		
}
public AutoLogMeIn(TASKID)
{
	new id = TASKID - TASK_AUTO_LOGIN
	
	clcmdauto_login(id)
}


stock should_autojoin(id) 
{
	if (is_user_bot(id))
		return 0
		
	if (!is_user_admin(id) && nt_is_autologin_enabled())
		return 1
	
	if (is_user_admin(id))
	{
		if (nt_is_launcher_using())
			return 1
		else 
		{
			if (nt_is_autologin_enabled())
				return 1
		}
	}
	else
	{
		if (nt_is_autologin_enabled())
			return 1
	}
	
	
	return 0
		
}

stock set_force_team_join_task(id, menu_msgid) {
	new param_menu_msgid[2]
	param_menu_msgid[0] = menu_msgid
	set_task(AUTO_TEAM_JOIN_DELAY, "task_force_team_join", id, param_menu_msgid, sizeof param_menu_msgid)
}

public task_force_team_join(menu_msgid[], id) {
	
	if (get_user_team(id))
		return
		
	new szTeam[3], szClass[3]
	formatex(szTeam, sizeof szTeam - 1, "%d", get_int_from_key(iPersonalInfo[id], INT_INFO_TEAM))
	formatex(szClass, sizeof szClass - 1, "%d", get_int_from_key(iPersonalInfo[id], INT_INFO_CLASS))
	
	
	if (get_user_character(id) > -1)
		force_team_join(id, menu_msgid[0], szTeam, "3")
	if (get_user_character(id) < 0)
		force_team_join(id, menu_msgid[0], szTeam , szClass)
}	


stock force_team_join(id, menu_msgid, /* const */ team[] = "5", /* const */ class[] = "0") {
	static jointeam[] = "jointeam"
	if (class[0] == '0') {
		engclient_cmd(id, jointeam, team)
		return
	}
	
	static msg_block, joinclass[] = "joinclass"
	msg_block = get_msg_block(menu_msgid)
	set_msg_block(menu_msgid, BLOCK_SET)
	
	new CsTeams:iTeamId = cs_get_user_team(id)
	if (!(iTeamId == CS_TEAM_T || iTeamId == CS_TEAM_CT))
		engclient_cmd(id, jointeam, team)
	engclient_cmd(id, joinclass, class)
	set_msg_block(menu_msgid, msg_block)
	set_task(3.0, "PlayerRespawn_TASK", id + TASK_RESPAWN_PLAYER)
}

public PlayerRespawn_TASK(TASKID)
{
	new id = TASKID - TASK_RESPAWN_PLAYER
	
	
	if (!is_user_connected(id))
		return
		
	if (is_user_alive(id))
		return 
		
	if (!respawn_in_round_enabled())
		return
		
	ExecuteHamB(Ham_CS_RoundRespawn, id)
}


public BotRespawned_TASK(TASKID)
{
	new id = TASKID + TASK_REGISTER_CZ_FUNC
	
	if (!is_user_connected(id))
		return
		
	if (!is_user_bot(id))
		return 
	
	if (is_user_alive(id))
		return
	
	if (!respawn_in_round_enabled())
		return
	
	ExecuteHamB(Ham_CS_RoundRespawn, id)
}

stock respawn_in_round_enabled()
{
	new iRealGamePlay = get_current_gameplay()
	
	switch (iRealGamePlay)
	{
		case GAMEMODE_TDM:
			return 1
		case GAMEMODE_ESCAPE:
			return 1
		case GAMEMODE_FFA:
			return 1
		case GAMEMODE_GUNGAME:
			return 1
	}
	return 0
}
public _CmdChooseBag(id, level, cid)
{
	if (!is_user_connected(id))
		return
		
	if (!is_user_alive(id))
		return
		
	if (!nt_is_user_online(id))
		return
		
	if (is_user_zombie(id))
		return
		
	if (is_gungame_on())
		return
		
	
	new Float:fOrigin[3]
	pev(id, pev_origin, fOrigin)
	
	new Float:fLastOrigin[3]
	
	fLastOrigin[0] = get_float_from_key(iPersonalInfo[id], FLOAT_INFO_ORIGIN_X)
	fLastOrigin[1] = get_float_from_key(iPersonalInfo[id], FLOAT_INFO_ORIGIN_Y)
	fLastOrigin[2] = get_float_from_key(iPersonalInfo[id], FLOAT_INFO_ORIGIN_Z)
	
	if (vector_distance(fLastOrigin, fOrigin) > EQUIP_ZONE_RADIUS)
		return
		
	if (!nt_can_user_use_inventory(id))
		return
	
	new Float:fTime = get_gametime()
	if (fTime < get_float_from_key(iPersonalInfo[id], NEXT_INVENTORY_TIME))
		return
	
	new fArg[3]
	read_argv(1, fArg, 3)
	
	new iBag = str_to_num(fArg)
	
	if (iBag < 0 || iBag > MAX_INVENTORY_SLOT - 1)
		return
	
	ClearPlayerBit(bit_CanChangeInventorySlot, id)
	
	if (user_has_weapon(id, CSW_C4))
		SetPlayerBit(bit_HasC4, id)
	
	new iWeaponMode, iFightYard
	
	new iDM_MODE = is_deathmatch_on(iWeaponMode, iFightYard)
	if (iDM_MODE != CS_DM_FY)
		fm_strip_user_weapons(id)
	
	set_int_to_key(iPersonalInfo[id], INT_INVENTORY_ID, iBag)
	
	if (map_type == EQUIP_FULL)
	{
		give_grenade(id, iBag)
		give_melee(id, iBag)
		give_secondary_weapon(id, iBag)
		give_primary_weapon(id, iBag)
	}
	else if (map_type == EQUIP_KNIFE)
		give_melee(id, iBag)
	else if (map_type == EQUIP_PISTOL)
	{
		give_melee(id, iBag)
		give_secondary_weapon(id, iBag)
		
	}
	else if (map_type == EQUIP_SNIPER)
	{
		give_melee(id, iBag)
		give_primary_weapon(id, iBag)
	}
	give_bomb(id)
	give_defuser(id)
	give_nightvision(id)
	_equip_armor(id)
	
	set_float_to_key(iPersonalInfo[id], NEXT_INVENTORY_TIME , fTime + INVENTORY_ACCESS_DELAY)
	
	if (is_deathmatch_on(iWeaponMode, iFightYard) == CS_DM_AS)
	{
		new szKey[128]
		
		formatex(szKey, sizeof szKey - 1, "%s_%d", PRIMARY_PREFIX, iBag)
		new iPrimaryWpnId = get_int_from_key(iPersonalInfo[id], szKey)
		
		formatex(szKey, sizeof szKey - 1, "%s_%d", SECONDARY_PREFIX, iBag)
		new iSecondaryWpnId = get_int_from_key(iPersonalInfo[id], szKey)
		
		
		if (iPrimaryWpnId < 0 && iSecondaryWpnId < 0 && cs_get_user_vip(id))
			give_vip_weapon(id)
	}
	
	ClearPlayerBit(bit_HasC4, id)
}
		
public clcmd_DisplayInventory(id)
{
	if (!is_user_alive(id))
		return
	
	if (AUTO_LOGIN)
	{
		if (!iLauncherUsing)
		{
			//_cmdShowShop(id)
			return
		}
		else
		{
			if (!is_user_admin(id))
			{
				//_cmdShowShop(id)
				return
			}
		}
	}
	
	
	if (!nt_is_user_in_equip_zone(id))
		return
		
	if (!nt_can_user_use_inventory(id))
		return
	
	if (is_user_zombie(id) )
		return
			
	new Float:fTime = get_gametime()
	
	if (fTime < get_float_from_key(iPersonalInfo[id], NEXT_INVENTORY_TIME))
		return
		
	menu_display(id, iBagSelectionMenuId, 0)
}

public clcmd_DropWeapon(id)
{

	if (nt_can_user_use_inventory(id))
		ClearPlayerBit(bit_CanChangeInventorySlot, id)
	
	return PLUGIN_CONTINUE
}

public fw_InventoryOpen(id, menu, item)
{
	
	new info[32], name[32], acc, cb
	if (item == MENU_EXIT)
		return
	menu_item_getinfo(menu, item, acc, info, 31, name, 31, cb)
	new bagid = str_to_num(info)
	client_cmd(id, "ChooseBag %d", bagid)
}

public fw_ClientUserInfoChanged(id)
{
	if (is_user_bot(id))
		return
		
	if (!nt_is_user_online(id)) // Player has not logged in
		return
	
	if (!cs_get_user_vip(id))
	{
		new CsTeams:iTeam = cs_get_user_team(id)
		new iInternalModel = fm_get_user_internal_model(id)
			
		new iPlayerClassId = get_int_from_key(iPersonalInfo[id], INT_INFO_CLASS)
		
		
		if (iTeam == CS_TEAM_T)
		{
			new TER_MDL[] = {2/*CS_DONT_CHANGE*/,2/*TERROR*/, 3/*LEET*/, 4/*ARCTIC*/, 8/*GUERRILA*/, 10/*MILITARY*/}
			if (iInternalModel != TER_MDL[iPlayerClassId])
				fm_set_user_internal_model(id, TER_MDL[iPlayerClassId])
		}
		else if (iTeam == CS_TEAM_CT)
		{
			new CT_MDL[] = {1/*CS_DONT_CHANGE*/,1/*SEAL*/, 5/*GSG9*/, 7/*SAS*/, 6/*GIGN*/, 11/*SPETSNAZ*/}
			if (iInternalModel != CT_MDL[iPlayerClassId])
				fm_set_user_internal_model(id, CT_MDL[iPlayerClassId])
		}
	}
	
	if (nt_is_autologin_enabled())
	{
		if (!nt_is_launcher_using())
			return
		else
		{
			if (!is_user_admin(id))
				return
		}
	}
		
	
	// Block player's name being changed
	new szName[32]
	get_user_info(id, "name", szName, sizeof szName -1 )
	
	new szNickName[32]
	TrieGetString(iPersonalInfo[id], INFO_NICKNAME, szNickName, sizeof szNickName - 1)
	
	if (!equal(szName, szNickName))
		set_user_info(id, "name", szNickName)
		
}

public csred_PlayerSpawnPost(id)
{
	if (!is_user_connected(id))
		return
	
	if (is_user_bot(id))
		return
		
	if (user_has_weapon(id, CSW_C4))
		SetPlayerBit(bit_HasC4, id)
		
	if (!is_gungame_on())
		fm_strip_user_weapons(id)
	
	remove_task(id + TASK_GIVE_EQUIPMENTS)
	set_task(0.5, "GivePlayerInventory_TASK", id + TASK_GIVE_EQUIPMENTS)
	
}

public GivePlayerInventory_TASK(TASKID)
{
	new id = TASKID - TASK_GIVE_EQUIPMENTS
	
	if( !is_user_connected(id))
		return
	
	if (is_user_bot(id))
		return
	
	if (!is_user_alive(id))
		return
		
	if (cs_get_user_defuse(id))
		cs_set_user_defuse(id, 0)
		
	ClearPlayerBit(bit_CanChangeInventorySlot, id)
	
		
	new szAccount[32]
	TrieGetString(iPersonalInfo[id], INFO_ACCOUNT, szAccount, sizeof szAccount - 1)
	
	new szKeyFile[256]	
	formatex(szKeyFile, sizeof szKeyFile - 1, "%s/%s.cfg", NVAULT_DIRECTORY, szAccount)
		
	if (file_exists(szKeyFile))
	{
		client_cmd(id, "exec %s", szKeyFile)
		console_cmd(id, "exec %s", szKeyFile)
	}
		
	
	new CsTeams:iTeam = cs_get_user_team(id)
			
	if (iTeam != CS_TEAM_CT && iTeam != CS_TEAM_T)
	{
		return
	}
	
	if (!nt_is_user_online(id))
		return
		
	cs_set_user_nvg(id, 0)
	
	if (!is_gungame_on())
	{
		new iWeaponMode, iFightYard
		if (is_deathmatch_on(iWeaponMode, iFightYard) == CS_DM_FY)
		{
			UT_DropPrimaryWeapon(id)
			UT_DropSecondaryWeapon(id)
		
			fm_strip_user_weapons(id)
		}
		
		SetPlayerBit(bit_CanChangeInventorySlot, id)
	
		new Float:fLastOrigin[3]
		
		pev(id, pev_origin, fLastOrigin)
		
		set_float_to_key(iPersonalInfo[id], FLOAT_INFO_ORIGIN_X, fLastOrigin[0])
		set_float_to_key(iPersonalInfo[id], FLOAT_INFO_ORIGIN_Y, fLastOrigin[1])
		set_float_to_key(iPersonalInfo[id], FLOAT_INFO_ORIGIN_Z, fLastOrigin[2])
		
		set_float_to_key(iPersonalInfo[id], NEXT_INVENTORY_TIME, get_gametime() - 0.5)
		
		new szInventorySlot[3]
		formatex(szInventorySlot, sizeof szInventorySlot - 1, "%d", get_int_from_key(iPersonalInfo[id], INT_INVENTORY_ID))
		client_cmd(id, "ChooseBag %s", szInventorySlot)
	}
	else	ClearPlayerBit(bit_CanChangeInventorySlot, id)
	
	
		
	
}


stock give_primary_weapon(id, iBag)
{
	if (!is_user_alive(id))
		return
	
	if (map_type == EQUIP_KNIFE)
		return
		
	if (map_type == EQUIP_PISTOL)
		return
	
	if (!can_user_equip_prim())
		return
	
	if (iBag < 0 || iBag > MAX_INVENTORY_SLOT - 1)
		return
	
	if (!nt_is_user_online(id))
		return
	
	new szKey[128]
	formatex(szKey, sizeof szKey - 1, "%s_%d", PRIMARY_PREFIX, iBag)
	
	new iWeaponId
	new iPrimaryWpnId = iWeaponId = get_int_from_key(iPersonalInfo[id], szKey)
	
	formatex(szKey, sizeof szKey - 1, "%s_%d", PRIMARY_TYPE_PREFIX, iBag)
	new iPrimaryWpnType = get_int_from_key(iPersonalInfo[id], szKey)
	
	if (map_type != EQUIP_SNIPER)
	{
		switch (iPrimaryWpnType)
		{
			case 1:
			{
				if (!is_primary_wpn(iWeaponId))
					return
				
				new iWeaponMode, iFightYard
				if (is_deathmatch_on(iWeaponMode, iFightYard) == CS_DM_AS)
				{
					if (iWeaponId == CSW_AWP || iWeaponId == CSW_SCOUT || iWeaponId == CSW_G3SG1 || iWeaponId == CSW_SG550)
						return
				}
				new szWeaponName[32]
				get_weaponname(iWeaponId , szWeaponName, sizeof szWeaponName - 1)
				fm_give_item(id, szWeaponName)
				
				
				
				new iBpa = UT_Get_CS_DefaultBpa(iWeaponId)
				
				/*
				new iAddition = 0
				if (IsShotgun(iWeaponId))
				{
					if (iAmmoClip[id][1] > 0)
						iAddition += UT_Get_CS_DefaultClip(iWeaponId) * iAmmoClip[id][1]
				}
				else if (IsSmg(iWeaponId))
				{
					if (iAmmoClip[id][2] > 0)
						iAddition += UT_Get_CS_DefaultClip(iWeaponId) * iAmmoClip[id][2]
				}
				else if (IsRifle(iWeaponId))
				{
					if (IsSniper(iWeaponId))
					{
						if (iAmmoClip[id][5])
							iAddition += UT_Get_CS_DefaultClip(iWeaponId) * iAmmoClip[id][5]
					}
					else
					{
						if (iAmmoClip[id][3] > 0)
							iAddition += UT_Get_CS_DefaultClip(iWeaponId) * iAmmoClip[id][3]
					}
				}
				else if (IsMachinegun(iWeaponId))
				{
					if (iAmmoClip[id][4] > 0)
						iAddition += UT_Get_CS_DefaultClip(iWeaponId) * iAmmoClip[id][4]
				}
				iBpa += iAddition
				*/
					
				UT_SetUserBPA(id, iWeaponId, iBpa)
				engclient_cmd(id, szWeaponName)
			}
			case 2:
			{
				give_user_pw(id, iPrimaryWpnId)
				
				new iWeaponId = get_pw_real_id(iPrimaryWpnId)
				
				if (iWeaponId < 0)
					return
					
					/*
				new iAddition = 0
					
				new iPrimaryWpnClip = get_pw_ammo(iPrimaryWpnId)
						
				switch (get_pw_type(iPrimaryWpnId))
				{
					case TYPE_SMG:
					{
						if (iAmmoClip[id][2])
							iAddition += iPrimaryWpnClip * iAmmoClip[id][2]
					}
					case TYPE_RIFLE:
					{
						if (iAmmoClip[id][3])
							iAddition += iPrimaryWpnClip * iAmmoClip[id][3]
					}
					case TYPE_SNIPER:
					{
						if (iAmmoClip[id][5])
							iAddition += iPrimaryWpnClip * iAmmoClip[id][5]
					}
					case TYPE_MACHINEGUN:
					{
						if (iAmmoClip[id][4])
							iAddition += iPrimaryWpnClip * iAmmoClip[id][4]
					}
				}
					*/
					
				UT_SetUserBPA(id, iWeaponId, get_pw_bpammo(iPrimaryWpnId))
					
			}
		}
	}
	else
	{
		switch (iPrimaryWpnType)
		{
			case 1:
			{
				if (!is_primary_wpn(iWeaponId))
					return 
					
				new szWeaponName[32]
				get_weaponname(iWeaponId, szWeaponName, sizeof szWeaponName - 1)
				
				if (iWeaponId != CSW_AWP && iWeaponId != CSW_SCOUT && iWeaponId != CSW_G3SG1 && iWeaponId != CSW_SG550)
					return
						
				fm_give_item(id, szWeaponName)
			
				new iAddition = 0
				new iBpa = UT_Get_CS_DefaultClip(iWeaponId)
				
				
				//if (iAmmoClip[id][5] > 0)
				//	iAddition += UT_Get_CS_DefaultClip(iWeaponId) * iAmmoClip[id][5]
					
				iBpa += iAddition
				
				UT_SetUserBPA(id, iWeaponId, iBpa)
				engclient_cmd(id, szWeaponName)
				
			}
			case 2, 4:
			{
				iWeaponId = get_pw_real_id(iWeaponId)
				
				if (iWeaponId != CSW_AWP && iWeaponId != CSW_SCOUT && iWeaponId != CSW_G3SG1 && iWeaponId != CSW_SG550)
				{
					new iWpnType = get_pw_type(iPrimaryWpnId)
					
					if (iWpnType != TYPE_SNIPER)
						return
				}
				
				if (iPrimaryWpnId < 0)
					return
					
				give_user_pw(id, iPrimaryWpnId)
				
				
				
				
				
				
				
				/*
				new iWeaponClip = get_pw_ammo(iPrimaryWpnId)
				new iAddition = 0
				switch (get_pw_type(iPrimaryWpnId))
				{
					case TYPE_SMG:
					{
						if (iAmmoClip[id][2] > 0)
							iAddition += iWeaponClip * iAmmoClip[id][2]
					}
					case TYPE_RIFLE:
					{
						if (iAmmoClip[id][3] > 0)
							iAddition += iWeaponClip * iAmmoClip[id][3]
					}
					case TYPE_MACHINEGUN:
					{
						if (iAmmoClip[id][4] > 0)
							iAddition += iWeaponClip * iAmmoClip[id][4]
					}
					case TYPE_SNIPER:
					{
						if (iAmmoClip[id][5] > 0)
							iAddition += iWeaponClip * iAmmoClip[id][5]
					}
				}
				*/
				
				UT_SetUserBPA(id, iWeaponId, get_pw_bpammo(iPrimaryWpnId) )
				
			}
			
		}
	}
}

stock give_secondary_weapon(id, iBag)
{
	if (!is_user_alive(id))
		return
		
	if (map_type == EQUIP_KNIFE)
		return
		
	if (!can_user_equip_sec())
		return
		
	if (iBag < 0 || iBag > MAX_INVENTORY_SLOT - 1)
		return
		
	if (!nt_is_user_online(id))
		return
		
	new szKey[128]
	
	
	new iSecondaryWpnId, iSecondaryWpnType
	new iWeaponId
	
	formatex(szKey, sizeof szKey - 1, "%s_%d", SECONDARY_PREFIX, iBag)
	iSecondaryWpnId = iWeaponId = get_int_from_key(iPersonalInfo[id], szKey)
	
	formatex(szKey, sizeof szKey - 1, "%s_%d", SECONDARY_TYPE_PREFIX, iBag)
	iSecondaryWpnType = get_int_from_key(iPersonalInfo[id], szKey)
	
	if (iSecondaryWpnType == 1)
	{
		if (map_type == EQUIP_SNIPER)
			return
		
		new szWeaponName[32]
		get_weaponname(iWeaponId, szWeaponName, sizeof szWeaponName - 1)
		
		new iVip = cs_get_user_vip(id)
		if (iVip && iWeaponId == CSW_ELITE)
			cs_set_user_vip(id, 0 , 0, 0)
			
			
		fm_give_item(id, szWeaponName)
		
		new iAddition = 0
		
		
		
		//if (iAmmoClip[id][0] > 0)
		//	iAddition += UT_Get_CS_DefaultClip(iWeaponId) * iAmmoClip[id][0]
		
		UT_SetUserBPA(id, iWeaponId, UT_Get_CS_DefaultBpa(iWeaponId) + iAddition)
		engclient_cmd(id, szWeaponName)
		
		if (iVip && iWeaponId == CSW_ELITE)
		{
			iVip = 0
			cs_set_user_vip(id)
		}
	}
	else if (iSecondaryWpnType == 2 || iSecondaryWpnType == 3)
	{
		if (iSecondaryWpnId < 0)
			return
			
		new iTYPE = get_sec_wpn_type(iSecondaryWpnId)
			
		if (map_type == EQUIP_SNIPER)
		{
			if (iTYPE != TYPE_SNIPER)
				return
		}
		
		new iResult = give_player_sec_wpn(id, iSecondaryWpnId)
		
		if (iResult)
		{
			new iAddition = 0
				
				/*
			new iClip = get_sec_wpn_clip(iSecondaryWpnId)
			
			if (iAmmoClip[id][0] && iTYPE == TYPE_PISTOL)
				iAddition += iClip * iAmmoClip[id][0]
			if (iAmmoClip[id][1] && iTYPE == TYPE_SHOTGUN)
				iAddition += iClip * iAmmoClip[id][0]
			if (iAmmoClip[id][2] && iTYPE == TYPE_SMG)
				iAddition += iClip * iAmmoClip[id][2]
			if (iAmmoClip[id][3] && iTYPE == TYPE_RIFLE)
				iAddition += iClip * iAmmoClip[id][3]
			if (iAmmoClip[id][4] && iTYPE == TYPE_MACHINEGUN)
				iAddition += iClip * iAmmoClip[id][4]
			if (iAmmoClip[id][5] && iTYPE == TYPE_SNIPER)
				iAddition += iClip * iAmmoClip[id][5]
			*/
			
			iWeaponId = get_sec_wpn_real_id(iSecondaryWpnId)
			
			new iBpaAmmo = get_sec_wpn_bpa(iSecondaryWpnId)
			
			UT_SetUserBPA(id, iWeaponId,  iBpaAmmo + iAddition)
		}
	}
}


stock give_melee(id, iBag)
{
	if (!is_user_alive(id))
		return
	
	if (!can_user_equip_melee())
		return
		
	if (iBag < 0 || iBag > MAX_INVENTORY_SLOT - 1)
		return
	
	if (!nt_is_user_online(id))
		return
	
	new szKey[128]
	
	formatex(szKey, sizeof szKey - 1, "%s_%d", MELEE_TYPE_PREFIX, iBag)
	
	new iMeleeType = get_int_from_key(iPersonalInfo[id], szKey)
	
	if (iMeleeType == 2)
	{
		
		formatex(szKey, sizeof szKey - 1, "%s_%d", MELEE_PREFIX, iBag)
		new iMeleeId = get_int_from_key(iPersonalInfo[id] ,szKey)
		
		give_user_melee(id, iMeleeId)
	}
	else 
	{
		fm_give_item(id, "weapon_knife")
		engclient_cmd(id, "weapon_knife")		
	}
	
}

stock give_grenade(id, iBag)
{
	if (!is_user_alive(id))
		return
	
	if (!can_user_equip_grenade())
		return
		
	if (map_type != EQUIP_FULL)
		return
		
	if (iBag < 0 || iBag > MAX_INVENTORY_SLOT - 1)
		return
	
	if (!nt_is_user_online(id))
		return
		
	new szKey[128]
	
	formatex(szKey, sizeof szKey - 1, "%s_%d", GRENADE_PREFIX, iBag)
	new iGrenadeId = get_int_from_key(iPersonalInfo[id], szKey)
	
	formatex(szKey, sizeof szKey - 1, "%s_%d", GRENADE_TYPE_PREFIX, iBag)
	new iGrenadeType = get_int_from_key(iPersonalInfo[id], szKey)
	
	if (iGrenadeType == 1)
	{
		if (cs_get_user_vip(id))
			return 
					
		if (iGrenadeId != CSW_FLASHBANG && iGrenadeId != CSW_SMOKEGRENADE && iGrenadeId != CSW_HEGRENADE)
			return
			
		new szWeaponName[32]
		get_weaponname(iGrenadeId, szWeaponName, sizeof szWeaponName - 1)
		
		fm_give_item(id, szWeaponName)
		engclient_cmd(id, szWeaponName)
	}
	else if (iGrenadeType == 2)
		give_user_grenade(id, iGrenadeId)
}

stock give_nightvision(id)
{
	if (!is_user_alive(id))
		return
		
	if (is_user_zombie(id))
		return
		
	if (!nt_is_user_online(id))
		return 
		
	if (cs_get_user_nvg(id))
		return
		
	if (!CheckPlayerBit(bit_HasNightVision, id))
		return
	
	cs_set_user_nvg(id, 1)
			
}

stock give_defuser(id)
{
	if (!is_user_alive(id))
		return
		
	if (is_user_zombie(id))
		return
		
	if (!nt_is_user_online(id))
		return
		
	new CsTeams:iTeam = cs_get_user_team(id)
	if (iTeam != CS_TEAM_CT)
		return
	
	if (!can_user_equip_defuser())
		return
	
	if (!CheckPlayerBit(bit_HasDefuser, id))
		return
		
	cs_set_user_defuse(id, 1)
}

stock _equip_armor(id)
{
	if (!nt_is_user_online(id))
		return
		
	cs_set_user_armor(id, 0, CS_ARMOR_NONE)
	
	new iArmorType = get_int_from_key(iPersonalInfo[id], INT_INFO_ARMOR_TYPE)
	new iArmorId = get_int_from_key(iPersonalInfo[id], INT_INFO_ARMOR_ID)
	
	if (iArmorType < ARMORTYPE_NORMAL || iArmorType > ARMORTYPE_SERIAL)
		return
		
	if (!is_user_alive(id))
		return
	
	new iArmorTeam
	new iArmorAmount = get_int_from_key(iPersonalInfo[id], INT_INFO_ARMOR_AMOUNT)
	
	if (!is_zp_on())
	{	
		if (iArmorType != ARMORTYPE_NORMAL)
		{
			if (get_armor_team(iArmorId) != ARMOR_TEAM_SOLDIER)
				return
				
			give_user_armor(id, iArmorId)
		}
		else
			cs_set_user_armor(id, iArmorAmount, (iArmorId < 1)?CS_ARMOR_KEVLAR:CS_ARMOR_VESTHELM)
	}
	else
	{
		if (iArmorType == ARMORTYPE_NORMAL)
			iArmorTeam = ARMOR_TEAM_SOLDIER
		else	iArmorTeam = get_armor_team(iArmorId)
		
		
		if (is_user_zombie(id))
		{
			if (iArmorTeam != ARMOR_TEAM_BOTH && iArmorTeam != ARMOR_TEAM_ZOMBIE)
				return
		}
		else
		{
			if (iArmorTeam != ARMOR_TEAM_BOTH && iArmorTeam != ARMOR_TEAM_SOLDIER)
				return
		}
		
		if (iArmorType != ARMORTYPE_NORMAL)
			give_user_armor(id, iArmorId)
		else	cs_set_user_armor(id, iArmorAmount, (iArmorId < 1)?CS_ARMOR_KEVLAR:CS_ARMOR_VESTHELM)
	}
}

stock give_bomb(id)
{
	if (!is_user_alive(id) )
		return 0

	if (!nt_is_user_online(id))
		return 0
		
	if (!CheckPlayerBit(bit_HasC4, id))
		return 0
		
	if (user_has_weapon(id, CSW_C4))
		return 0
		

	fm_give_item(id, "weapon_c4")
	engclient_cmd(id, "weapon_c4")
	cs_set_user_plant(id, 1, 1)
	
	return 1
}

stock CheckMapEquip()
{
	new iWeaponMode, iFightYard
	new iGamePlay = is_deathmatch_on(iWeaponMode, iFightYard)
	
	if (iGamePlay)
	{
		switch (iGamePlay)
		{
			case CS_DM_FY:
				map_type = EQUIP_KNIFE
		
			case CS_DM_AS:
				map_type = EQUIP_FULL
			default :
			{
				if (iWeaponMode == CS_WM_KNIFE)
					map_type = EQUIP_KNIFE
				else if (iWeaponMode == CS_WM_SNIPER)
					map_type = EQUIP_SNIPER
				else if (iWeaponMode == CS_WM_PISTOL)
					map_type = EQUIP_PISTOL
				else if (iWeaponMode == CS_WM_NORMAL)
					map_type = EQUIP_FULL
					
				
			}
		}
	}
	if (is_ffa_on(iWeaponMode))
	{
		new iWeaponType = FFA_get_weapon_mode()
				
		if (iWeaponType == CS_WM_NORMAL)
			map_type = EQUIP_FULL
		else if (iWeaponType == CS_WM_PISTOL)
			map_type = EQUIP_PISTOL
		else if (iWeaponType == CS_WM_KNIFE)
			map_type = EQUIP_KNIFE
		else if (iWeaponType == CS_WM_SNIPER)
			map_type = EQUIP_SNIPER
		
	}
		
	if (is_zombie_on())
		map_type = EQUIP_FULL
		
	iGamePlay = is_tdm_on(iWeaponMode)
	
	if (iGamePlay)
	{
		switch (iGamePlay)
		{
			case TDM_MODE_NORMAL:
			{
				new iWeaponType = TDM_get_weapon_mode()
					
				if (iWeaponType == CS_WM_NORMAL)
					map_type = EQUIP_FULL
				else if (iWeaponType == CS_WM_PISTOL)
					map_type = EQUIP_PISTOL
				else if (iWeaponType == CS_WM_SNIPER)
					map_type = EQUIP_SNIPER
				else if (iWeaponType == CS_WM_KNIFE)
					map_type = EQUIP_KNIFE
			}
		}
	}
}

stock ReadMyBag(id, szAccount[], iFakeReading = 0)
{
	
	new PRIMARY_START = 0
	new SECONDARY_START = 1
	new MELEE_START = 2
	new GRENADE_START = 3
	
	new iReadingState = 1
	
	new szInventoryFile[256]
	formatex(szInventoryFile, sizeof szInventoryFile - 1, "%s/binfo_%s.tfm", NVAULT_DIRECTORY, szAccount)
	
	
	new szCfgFile[256]
	formatex(szCfgFile, sizeof szCfgFile - 1, "%s/%s.cfg", NVAULT_DIRECTORY, szAccount)	
	
					
	if (file_exists(szCfgFile))
	{
		server_exec()
		client_cmd(id, "exec %s", szCfgFile)
		console_cmd(id, "exec %s", szCfgFile)
		server_exec()
	}
	
	if (!file_exists(szInventoryFile))
	{
		if (!iFakeReading)
			return 0
		else	iReadingState = 0
	}
	
	if (iFakeReading)
		iReadingState = 0
	
	new szTextInfo[256], iTextLen
	new szKey[128], szKey_1[128]
	
	if (iReadingState)
	{
		for (new iPrimaryLine = 0; iPrimaryLine < MAX_INVENTORY_SLOT; iPrimaryLine++)
		{
		
			new iCurrentLine = iPrimaryLine * 4 + PRIMARY_START
			
			read_file(szInventoryFile, iCurrentLine, szTextInfo, sizeof szTextInfo - 1, iTextLen)
			
			formatex(szKey, sizeof szKey - 1, "%s_%d", PRIMARY_PREFIX, iPrimaryLine)
			formatex(szKey_1, sizeof szKey_1 - 1, "%s_%d", PRIMARY_TYPE_PREFIX, iPrimaryLine)
			
			if (equal(szTextInfo, "[primary]", 9))
			{
				replace(szTextInfo, sizeof szTextInfo - 1, "[primary]", "")
				set_int_to_key(iPersonalInfo[id], szKey, UT_WorldModelToWeaponId(szTextInfo))
				set_int_to_key(iPersonalInfo[id], szKey_1,  1)
				
			}
			else if (equal(szTextInfo, "[primary_mdl]", 13))
			{
				replace(szTextInfo, sizeof szTextInfo - 1, "[primary_mdl]", "")
				set_int_to_key(iPersonalInfo[id], szKey, find_pw_by_model(szTextInfo))
				set_int_to_key(iPersonalInfo[id], szKey_1, 2)
			}
			else if (equal(szTextInfo, "[primary_ser]", 13))
			{
				replace(szTextInfo, sizeof szTextInfo - 1, "[primary_ser]", "")
				set_int_to_key(iPersonalInfo[id], szKey, find_pw_by_serial(szTextInfo))
				set_int_to_key(iPersonalInfo[id], szKey_1,  2)
			}
		}
	
	
		for (new iSecondaryLine = 0; iSecondaryLine < MAX_INVENTORY_SLOT; iSecondaryLine++)
		{
			
			new iCurrentLine = iSecondaryLine * 4 + SECONDARY_START
			
			read_file(szInventoryFile, iCurrentLine, szTextInfo, sizeof szTextInfo - 1, iTextLen)
			
			formatex(szKey, sizeof szKey - 1, "%s_%d", SECONDARY_PREFIX, iSecondaryLine)
			formatex(szKey_1, sizeof szKey_1 - 1, "%s_%d", SECONDARY_TYPE_PREFIX, iSecondaryLine)
			
			if (equal(szTextInfo, "[secondary]", 11)) 
			{
				replace(szTextInfo, sizeof szTextInfo - 1, "[secondary]", "")
				set_int_to_key(iPersonalInfo[id],  szKey, UT_WorldModelToWeaponId(szTextInfo))
				set_int_to_key(iPersonalInfo[id],  szKey_1,  1)
				
			}
			else if (equal(szTextInfo, "[secondary_mdl]", 15))
			{
				replace(szTextInfo, sizeof szTextInfo - 1, "[secondary_mdl]", "")
				set_int_to_key(iPersonalInfo[id],  szKey, find_sec_wpn_by_model(szTextInfo))
				set_int_to_key(iPersonalInfo[id],  szKey_1, 2)
			}
			else if (equal(szTextInfo, "[secondary_ser]", 15))
			{
				replace(szTextInfo, sizeof szTextInfo - 1, "[secondary_ser]", "")
				set_int_to_key(iPersonalInfo[id],  szKey, find_sec_wpn_by_serial(szTextInfo))
				set_int_to_key(iPersonalInfo[id],  szKey_1, 2)
			}
		}
	
		for (new iMeleeLine = 0; iMeleeLine < MAX_INVENTORY_SLOT; iMeleeLine++)
		{
					
			new iCurrentLine = iMeleeLine * 4 + MELEE_START
			
			read_file(szInventoryFile, iCurrentLine, szTextInfo, sizeof szTextInfo - 1, iTextLen)
			
			formatex(szKey, sizeof szKey - 1, "%s_%d", MELEE_PREFIX, iMeleeLine)
			formatex(szKey_1, sizeof szKey_1 - 1, "%s_%d", MELEE_TYPE_PREFIX, iMeleeLine)
			
			set_int_to_key(iPersonalInfo[id], szKey, 1)
			set_int_to_key(iPersonalInfo[id], szKey_1, 1)
			
			
			if (equal(szTextInfo, "[melee_mdl]", 11))
			{
				replace(szTextInfo, sizeof szTextInfo - 1, "[melee_mdl]", "")
				set_int_to_key(iPersonalInfo[id], szKey, find_melee_by_model(szTextInfo))
				set_int_to_key(iPersonalInfo[id], szKey_1, 2)	
			}
			else if (equal(szTextInfo, "[melee_ser]", 11))
			{
				replace(szTextInfo, sizeof szTextInfo - 1, "[melee_ser]", "")
				set_int_to_key(iPersonalInfo[id], szKey, find_melee_by_serial(szTextInfo))
				set_int_to_key(iPersonalInfo[id], szKey_1, 2)
			}
		}
	
		// Grenade Information
		
		for (new iGrenadeLine = 0; iGrenadeLine < MAX_INVENTORY_SLOT; iGrenadeLine++)
		{
						
			new iCurrentLine = iGrenadeLine *  4 + GRENADE_START
			read_file(szInventoryFile, iCurrentLine, szTextInfo, sizeof szTextInfo - 1, iTextLen)
			
			formatex(szKey, sizeof szKey - 1, "%s_%d", GRENADE_PREFIX, iGrenadeLine)
			formatex(szKey_1, sizeof szKey_1 - 1, "%s_%d", GRENADE_TYPE_PREFIX, iGrenadeLine)
			
			if (equal(szTextInfo, "[grenade]", 9))
			{
				replace(szTextInfo, sizeof szTextInfo - 1, "[grenade]", "")
				set_int_to_key(iPersonalInfo[id], szKey, UT_WorldModelToWeaponId(szTextInfo))
				set_int_to_key(iPersonalInfo[id], szKey_1, 1)
			}
			else if (equal(szTextInfo, "[grenade_mdl]", 13))
			{
				replace(szTextInfo, sizeof szTextInfo - 1, "[grenade_mdl]", "")
				set_int_to_key(iPersonalInfo[id], szKey, find_grenade_by_model(szTextInfo))
				set_int_to_key(iPersonalInfo[id], szKey_1, 2)
			}
			else if (equal(szTextInfo, "[grenade_ser]", 13))
			{
				replace(szTextInfo, sizeof szTextInfo - 1, "[grenade_ser]", "")
				set_int_to_key(iPersonalInfo[id], szKey, find_grenade_by_serial(szTextInfo))
				set_int_to_key(iPersonalInfo[id], szKey_1, 2)
			}
		}
	}
	
	/**********************************************************************************/
	new iInventoryId = 0
	
	if (iReadingState)
	{
		read_file(szInventoryFile, SLOT_INVENTORY_ID, szTextInfo, sizeof szTextInfo - 1, iTextLen)
		replace(szTextInfo, sizeof szTextInfo - 1, "[INVENTORY_SLOT]", "")
		iInventoryId = str_to_num(szTextInfo) - 1
	}
	
	if (iInventoryId < 0)
		iInventoryId = 0
	else if (iInventoryId> MAX_INVENTORY_SLOT - 1)
		iInventoryId = MAX_INVENTORY_SLOT - 1
		
	set_int_to_key(iPersonalInfo[id], INT_INVENTORY_ID, iInventoryId)
	
	
	/**********************************************************************************/
	
	new iCharacterId = -1
	
	if (iReadingState)
	{
		read_file(szInventoryFile, SLOT_CHARACTER_ID, szTextInfo, sizeof szTextInfo - 1, iTextLen)
		replace(szTextInfo, sizeof szTextInfo - 1, "[CHARACTER]", "")
		
		if (equal(szTextInfo, "[CHARACTER]", 11))
		{
			iCharacterId = get_character_id_by_model(szTextInfo)
			
			
			if (iCharacterId > -1)
				set_user_character(id, iCharacterId, 1, 0)
		}
	}
	
	set_int_to_key(iPersonalInfo[id], INT_INFO_CHARACTER_ID, iCharacterId)
	
	/**********************************************************************************/
	
	set_int_to_key(iPersonalInfo[id], INT_INFO_ARMOR_ID, -1)
	set_int_to_key(iPersonalInfo[id], INT_INFO_ARMOR_TYPE, -1)
	
	if (iReadingState)
	{
		read_file(szInventoryFile, SLOT_ARMOR_ID, szTextInfo, sizeof szTextInfo - 1, iTextLen)
		if (equal(szTextInfo, "[ARMOR]", 7))
		{
			replace(szTextInfo, sizeof szTextInfo - 1, "[ARMOR]", "")
			
			new szArmorInfo[3], szArmorAmount[5]
			parse(szTextInfo, szArmorInfo, sizeof szArmorInfo - 1, szArmorAmount, sizeof szArmorAmount - 1)	
			
			set_int_to_key(iPersonalInfo[id], INT_INFO_ARMOR_TYPE, ARMORTYPE_NORMAL)
			set_int_to_key(iPersonalInfo[id], INT_INFO_ARMOR_ID, str_to_num(szArmorInfo)?ARMORID_VESTHELM:ARMORID_KEVLAR)
			set_int_to_key(iPersonalInfo[id], INT_INFO_ARMOR_AMOUNT, str_to_num(szArmorAmount))
		}
		else if (equal(szTextInfo, "[ARMOR_MDL]", 11))
		{
			replace(szTextInfo, sizeof szTextInfo - 1, "[ARMOR_MDL]", "")
			new szArmorInfo[128], szArmorAmount[5]
			parse(szTextInfo, szArmorInfo, sizeof szArmorInfo - 1, szArmorAmount, sizeof szArmorAmount - 1)	
			
			new iArmorId = find_armor_by_model(szArmorInfo)
			
			if (iArmorId > -1)
			{
				set_int_to_key(iPersonalInfo[id], INT_INFO_ARMOR_TYPE, ARMORTYPE_MDL)
				set_int_to_key(iPersonalInfo[id], INT_INFO_ARMOR_ID, iArmorId)
				set_int_to_key(iPersonalInfo[id], INT_INFO_ARMOR_AMOUNT, str_to_num(szArmorAmount))
			}
		}
		else if (equal(szTextInfo, "[ARMOR_SER]", 11))
		{
			replace(szTextInfo, sizeof szTextInfo - 1, "[ARMOR_SER]", "")
			new szArmorInfo[128], szArmorAmount[5]
			parse(szTextInfo, szArmorInfo, sizeof szArmorInfo - 1, szArmorAmount, sizeof szArmorAmount - 1)	
			
			new iArmorId = find_armor_by_serial(szArmorInfo)
			
			if (iArmorId > -1)
			{
				set_int_to_key(iPersonalInfo[id], INT_INFO_ARMOR_TYPE, ARMORTYPE_SERIAL)
				set_int_to_key(iPersonalInfo[id], INT_INFO_ARMOR_ID, iArmorId)
				set_int_to_key(iPersonalInfo[id], INT_INFO_ARMOR_AMOUNT, str_to_num(szArmorAmount))
			}
			
		}
	}
	
	/**********************************************************************************/	
	
	if (iReadingState)
	{
		read_file(szInventoryFile, SLOT_DEFUSER_ID, szTextInfo, sizeof szTextInfo - 1, iTextLen)
		replace(szTextInfo, sizeof szTextInfo - 1, "[DEFUSER]", "")
		
		if (equal(szTextInfo, "[DEFUSER]", 9))
			str_to_num(szTextInfo)?SetPlayerBit(bit_HasDefuser, id):ClearPlayerBit(bit_HasDefuser, id)
	}
	else	ClearPlayerBit(bit_HasDefuser, id)
	
	/**********************************************************************************/
	
	new iTeamId = 1
	new iClassId = 1
	new szTeam[3], szClass[3]
	
	if (iReadingState)
	{
		read_file(szInventoryFile, SLOT_TEAM_ID, szTextInfo, sizeof szTextInfo - 1, iTextLen)
		replace(szTextInfo, sizeof szTextInfo - 1, "[TEAM]", "")
		
		parse(szTextInfo, szTeam, sizeof szTeam - 1, szClass, sizeof szClass - 1)
		iTeamId = str_to_num(szTeam)
		iClassId = str_to_num(szClass)
	}
	else
	{
		iTeamId = get_pdata_int(id, m_iTeam  , 5)
	}
	
	if (iTeamId != 1 && iTeamId != 2)
		iTeamId = 1
		
	if (iClassId < 1 || iClassId > 5)
	{
		iClassId = 1
		formatex(szClass, sizeof szClass - 1, "%d", iClassId)
	}
		
	set_int_to_key(iPersonalInfo[id], INT_INFO_CLASS, iClassId)
	set_int_to_key(iPersonalInfo[id], INT_INFO_TEAM, iTeamId)
		
	/**********************************************************************************/
	
	if (iReadingState)
	{
		read_file(szInventoryFile, SLOT_ZOMBIE_CLASS_ID, szTextInfo, sizeof szTextInfo - 1, iTextLen)
		replace(szTextInfo, sizeof szTextInfo - 1, "[ZOMBIE_CLASS]", "")
		
		if (is_zombie_on() == GAMEMODE_ZM)
		{
			new iZombieClass = find_zombie_by_model(szTextInfo)
			
			if (iZombieClass < 0)
				iZombieClass = 0
		
			set_user_class(id, iZombieClass)
		}
	}
	else
	{
		if (is_zombie_on() == GAMEMODE_ZM)
			set_user_class(id, 0)
	}
	/**********************************************************************************/
	
	if (iReadingState)
	{
		read_file(szInventoryFile, SLOT_NIGHTVISION_ID, szTextInfo, sizeof szTextInfo - 1, iTextLen)
		replace(szTextInfo, sizeof szTextInfo - 1, "[NightVision]", "")
		
		if (equal(szTextInfo, "[NightVision]", 13))
			str_to_num(szTextInfo)?SetPlayerBit(bit_HasNightVision, id):ClearPlayerBit(bit_HasNightVision, id)
	}
	else
	{
		ClearPlayerBit(bit_HasNightVision, id)
	}
	
	/**********************************************************************************/
	
	new iRankPos = 0
	if (iReadingState)
	{
		read_file(szInventoryFile, SLOT_RANK_ID, szTextInfo, sizeof szTextInfo - 1, iTextLen)
		replace(szTextInfo, sizeof szTextInfo - 1, "[iRank]", "")
		
		iRankPos = str_to_num(szTextInfo)
	}
	
	new RANK_NAME[][] = {"NORMAL", "ASSASIN", "TANKER", "MASTER"}
	TFM_set_user_rank(id, RANK_NAME[iRankPos])
	
	/**********************************************************************************/
	
	SetPlayerBit(bit_UserLoggedIn, id)
	
	/**********************************************************************************/
	
	new szNickName[32]
	TrieGetString(iPersonalInfo[id], INFO_NICKNAME, szNickName, sizeof szNickName - 1)
	
	
	if (iReadingState)
	{	
		TFM_load_user_level(id, szAccount)
		TFM_set_user_account(id, szAccount)
	}
	/**********************************************************************************/
	
	set_task(3.0, "PlayerRespawn_TASK", id + TASK_RESPAWN_PLAYER)	
	set_int_to_key(iPersonalInfo[id], INT_INVENTORY_ID,  0)
	
	
	/**********************************************************************************/
	
	if (!is_user_bot(id))
		client_print(0, print_chat, "[TFM] %L", 0, "MSG_JOINT_BATTLE", szNickName)
		
	ExecuteForward(ifw_UserLoggedIn, ifw_Result, id, szNickName)
	return 1
}

stock RegisterAccount(id, fArg[], sArg[], tArg[])
{ 
	if (TrieKeyExists(iRegisteredAccount, fArg))
		return 0
		
	if (nt_is_user_online(id))
	{
		client_print(id, print_center, "%L", id, "MSG_ALREADY_SIGNED")
		return 0
	}
	
	/*
	for (new iChar = 0; iChar < strlen(fArg); iChar++)
	{
		if (fArg[iChar] < 'a' || fArg[iChar] > 'Z')
		{
			client_print(id, print_chat, "%L", id, "MSG_CANT_CONTAIN_SPECIAL_CHARACTER")
		
			return 0
		}
	}
	*/
	
	if (TrieKeyExists(iRegisteredAccount, fArg))
	{
		client_print(id, print_console, "%L", id, "MSG_ACCOUNT_HAS_BEEN_REGISTERED")
		return 0
	}
	
	if (TrieKeyExists(iAccountNickName, fArg))
	{
		new szAccountNickName[32]
		TrieGetString(iAccountNickName, fArg, szAccountNickName, sizeof szAccountNickName - 1)
		
		if (equal(szAccountNickName, tArg))
		{
			client_print(id, print_console, "%L", id, "MSG_NICKNAME_HAS_BEEN_REGISTERED")
			return 0
		}
	}
	
	TrieDeleteKey(iAccountInUse, fArg)
	
	
	new RECRUIT_GP = 15000
	new RECRUIT_COIN = 20


	if (!AUTO_LOGIN)
	{
		TFM_set_user_gp(id, RECRUIT_GP)
		TFM_set_user_coin(id, RECRUIT_COIN)
		TFM_save_user_level(id, fArg)
		
	}
	else
	{
		TFM_set_user_gp(id, RECRUIT_GP)
		TFM_set_user_coin(id, RECRUIT_COIN)
		TrieSetCell(iRegisteredAccount, fArg, 1)
		TrieSetString(iAccountPassWord, fArg, sArg)
		TrieSetString(iAccountNickName, fArg, tArg)
	}
	
	client_print(id, print_chat, "%L", id, "MSG_CREATE_ACCOUNT_SUCCESS")
	client_print(id, print_chat, "%L", id, "MSG_SIGN_IN_YOUR_ACCOUNT")
	client_print(id, print_console, "%L", id, "MSG_CREATE_ACCOUNT_SUCCESS")
	client_print(id, print_console, "%L", id, "MSG_SIGN_IN_YOUR_ACCOUNT")
	
	return 1
}

stock SigningIn(id, fArg[], sArg[])
{
	
	if (!TrieKeyExists(iRegisteredAccount, fArg))
	{
		client_print(id, print_center, "%L", id, "NOT_VALID_ACCOUNT")
		client_print(id, print_console, "%L", id, "NOT_VALID_ACCOUNT")
		return 0
	}
	
	if (TrieKeyExists(iAccountInUse, fArg))
	{
		client_print(id, print_center, "%L", id, "MSG_ACCOUNT_IN_USE")
		client_print(id, print_console, "%L", id, "MSG_ACCOUNT_IN_USE")
		return 0
		
	}
	
	new szPassWord[32]
	TrieGetString(iAccountPassWord, fArg, szPassWord, sizeof szPassWord - 1)
	
	if (!equal(sArg, szPassWord))
	{
		client_print(id, print_center, "%L", id, "WRONG_PASSWORD")
		client_print(id, print_console, "%L", id, "WRONG_PASSWORD")
		return 0
	}
	
	TrieSetString(iPersonalInfo[id], INFO_ACCOUNT, fArg)
	TrieSetCell(iAccountInUse, fArg, 1)	
	
	ReadMyBag(id, fArg, 1)
	
	if (nt_is_autologin_enabled())
	{
		TFM_set_user_gp(id, 800)
		TFM_set_user_coin(id, 0)
		
	}
	
	/*
	}
	else
	{
		
		set_task(3.0, "PlayerRespawn_TASK", id + TASK_RESPAWN_PLAYER)
		engclient_cmd(id, "joinclass", "1")	
		client_cmd(id, "joinclass 1")
		
		set_int_to_key(iPersonalInfo[id], INT_INFO_CLASS, 1)
		set_int_to_key(iPersonalInfo[id], INT_INVENTORY_ID,  0)
	}
	*/
	return 0
}

stock IsSniper(iWeaponId)
{
	if (iWeaponId == CSW_SCOUT)
		return 1
	if (iWeaponId == CSW_AWP)
		return 1
	if (iWeaponId == CSW_G3SG1)
		return 1
	if (iWeaponId == CSW_SG550)
		return 1
	return 0
}

stock IsMachinegun(weaponid)
{
	if (weaponid == CSW_M249)
		return 1
	return 0
}

stock IsSmg(weaponid)
{
	if (weaponid == CSW_MP5NAVY)
		return 1
	if (weaponid == CSW_TMP)
		return 1
	if (weaponid == CSW_P90)
		return 1
	if (weaponid == CSW_MAC10)
		return 1
	if (weaponid == CSW_UMP45)
		return 1
	return 0
}

public csred_user_save_gp(id, iGp)
{
	if (AUTO_LOGIN)
		return PLUGIN_HANDLED
	return PLUGIN_CONTINUE
}

public csred_user_save_coin(id, iCoin)
{
	if (AUTO_LOGIN)
		return PLUGIN_HANDLED
	return PLUGIN_CONTINUE
}

stock give_vip_weapon(id)
{
	fm_give_item(id, "weapon_deagle")
	
	if (is_user_bot(id))
	{
		fm_give_item(id, "weapon_hegrenade")
		fm_give_item(id, "weapon_smokegrenade")
		fm_give_item(id, "weapon_flashgrenade")
	}
	UT_SetUserBPA(id, CSW_DEAGLE, 120)
	
}

stock give_default_weapon(id)
{
	if (user_has_weapon(id, CSW_KNIFE))
		return 
		
	fm_give_item(id, "weapon_knife")
}

stock LoadInfoFromLauncher()
{
	new cfgfile[256]
	new cfgdir[128]
	get_configsdir(cfgdir, sizeof cfgdir - 1)
	
	formatex(cfgfile, sizeof cfgfile - 1, "%s/ldata.ini", cfgdir)
	
	if (!file_exists(cfgfile))
		return
	
	
	
	/*
	
	new szLauncherVersionFile[256]
	formatex(szLauncherVersionFile, sizeof szLauncherVersionFile - 1, "%s/%s", cfgdir, LAUNCHER_VERSION_FILE)
	
	if (!file_exists(szLauncherVersionFile))
	{
		
		
		set_task(1.0, "TASK_HackPunished", TASK_PUNISH_HACK, _, _, "b")
		return
	}
	
	new TXT[256], szCheckingFile[128], szMd5String[34], szMyMd5[64], iTRASH
	
	for (new i = 0; i <  file_size(szLauncherVersionFile, 1); i++)
	{
		read_file(szLauncherVersionFile, i, TXT, sizeof TXT - 1, iTRASH)
		
		parse(TXT, szCheckingFile, sizeof szCheckingFile - 1, szMyMd5, sizeof szMyMd5 - 1)
		md5_file(szCheckingFile, szMd5String)
		
		if (!file_exists(szCheckingFile) || !equal(szMd5String , szMyMd5))
		{
			delete_file(cfgfile)
			formatex(szLauncherVersionFile, sizeof szLauncherVersionFile - 1, "%s/UsingHack.txt", cfgdir)
		
			write_file(szLauncherVersionFile , "1", 0)
			set_task(1.0, "TASK_HackPunished", TASK_PUNISH_HACK, _, _, "b")
			return
		}
	}
	
	delete_file(szLauncherVersionFile)
	
	
	for (new iFileId = 0; iFileId < sizeof MD5_CHECKED_FILE; iFileId++)
	{
		if (!file_exists(MD5_CHECKED_FILE[iFileId]))
		{
			delete_file(cfgfile)
			formatex(szLauncherVersionFile, sizeof szLauncherVersionFile - 1, "%s/UsingHack.txt", cfgdir)
			
			write_file(szLauncherVersionFile , "1", 0)
			set_task(1.0, "TASK_HackPunished", TASK_PUNISH_HACK, _, _, "b")
			return
		}
		
		new szMD5_CODE[34]
		md5_file(MD5_CHECKED_FILE[iFileId], szMD5_CODE)
		
		if (!equal(szMD5_CODE, MD5_CODE[iFileId]))
		{
			delete_file(cfgfile)
			formatex(szLauncherVersionFile, sizeof szLauncherVersionFile - 1, "%s/UsingHack2.txt", cfgdir)
			
			write_file(szLauncherVersionFile , "1", 0)
			set_task(1.0, "TASK_HackPunished", TASK_PUNISH_HACK, _, _, "b")
			return
		}
	}
	
	*/
	iLauncherUsing = 1
	
	
	gPodBot = false
	
	new szInfo[128]
	new iBOT_TYPE, iBOT_NUM , iBOT_DIFFICULT
	new iTextLen
	
	enum
	{
		LINE_BOT_TYPE,
		LINE_BOT_NUMBER,
		LINE_BOT_DIFFICULTY,
		LINE_BOT_LIST_BEGIN
	}
	
	read_file(cfgfile, LINE_BOT_TYPE, szInfo, sizeof szInfo - 1, iTextLen)
	replace(szInfo, sizeof szInfo - 1, "BOT_TYPE=", "")
	iBOT_TYPE = str_to_num(szInfo)
	
	get_mapname(szInfo, sizeof szInfo - 1)
	
	switch (iBOT_TYPE)
	{
		case PODBOT:
		{
			new szWaypointFile[128]
			formatex(szWaypointFile, sizeof szWaypointFile - 1, "addons/podbot/wptdefault/%s.pwf", szInfo)
			
			if (!file_exists(szWaypointFile))
			{
				set_task(1.0, "TASK_HackPunished", TASK_PUNISH_HACK, _, _, "b")
				return
			}
		}
		case ZBOT:
		{
			new szWaypointFile[128]
			formatex(szWaypointFile, sizeof szWaypointFile - 1, "maps/%s.nav", szInfo)
			
			if (!file_exists(szWaypointFile))
			{
				formatex(szWaypointFile, sizeof szWaypointFile - 1, "addons/podbot/wptdefault/%s.pwf", szInfo)
				
				if (!file_exists(szWaypointFile))
				{
					set_task(1.0, "TASK_HackPunished", TASK_PUNISH_HACK, _, _, "b")
					return
				}
			}
		}
	}
	
	read_file(cfgfile, LINE_BOT_NUMBER, szInfo, sizeof szInfo - 1 ,iTextLen)
	replace(szInfo, sizeof szInfo - 1, "BOT_NUM=", "")
	iBOT_NUM = str_to_num(szInfo)
	
	read_file(cfgfile, LINE_BOT_DIFFICULTY, szInfo, sizeof szInfo - 1, iTextLen)
	replace(szInfo, sizeof szInfo - 1, "BOT_DIFFICULT=", "")
	iBOT_DIFFICULT = str_to_num(szInfo)
	
	if (!iBotInformation)
		iBotInformation = TrieCreate()
		
	new szKey[128]
	
	if (iBOT_TYPE == ZBOT)
	{	
		set_cvar_num("bot_join_after_player", 0)
		set_cvar_num("bot_difficulty", iBOT_DIFFICULT)	
		
		
	}
	else if (iBOT_TYPE == PODBOT)
	{
			
		gPodBot = true
		
		set_cvar_num("pb_maxbots", iBOT_NUM)
		set_cvar_num("pb_minbotskill ", iBOT_DIFFICULT)
		set_cvar_num("pb_maxbotskill", iBOT_DIFFICULT)
	}

	
	new i = 0
		
	while (i < iBOT_NUM)
	{
		new szBotName[32], szBotTeam[5]
		read_file(cfgfile, LINE_BOT_LIST_BEGIN + i, szInfo, sizeof szInfo - 1, iTextLen)
		parse(szInfo, szBotName, sizeof szBotName - 1, szBotTeam, sizeof szBotTeam - 1)
		
		if (str_to_num(szBotTeam) == 2)
		{
			formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_NAME_GR, iGrCount)
			TrieSetString(iBotInformation, szKey, szBotName)
			iGrCount++
		}
		else
		{
			formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_NAME_BL, iBlCount)
			TrieSetString(iBotInformation, szKey, szBotName)
			iBlCount++
		} 
		
		i++
	}
	
	delete_file(cfgfile)
}
	
public TASK_HackPunished(TASKID)
{
	
	server_cmd("quit")
}






public fw_BlockWaypointActive()
	return PLUGIN_HANDLED

stock ShowPredefinedVgui(id, iVguiId)
{
	if (!is_user_connected(id) || is_user_bot(id))	
		return
	emessage_begin(MSG_ONE_UNRELIABLE, get_user_msgid("VGUIMenu"), _, id)
	new szName[32]
	get_user_name(id, szName, sizeof szName - 1)
	ewrite_byte(iVguiId)
	ewrite_short(19)
	ewrite_string(szName)
	ewrite_byte(0)
	ewrite_string("")
	emessage_end()
}

stock Register_CL_SV_CON_CMD(CMD[], FUNC[])
{
	register_clcmd(CMD, FUNC)
	register_concmd(CMD, FUNC)
	register_srvcmd(CMD, FUNC)
}

public csred_saving_level_info(id)
{
	if (AUTO_LOGIN && !is_user_bot(id))
		return PLUGIN_HANDLED
		
	return PLUGIN_CONTINUE
}


stock load_csred_account()
{
	
	if (!iRegisteredAccount)
		iRegisteredAccount = TrieCreate()
		
	if (!iAccountPassWord)
		iAccountPassWord = TrieCreate()
		
	if (!iAccountNickName)
		iAccountNickName = TrieCreate()
		
	if (!iAccountInUse)
		iAccountInUse = TrieCreate()
		
	new szCfgDir[128], szCfgFile[256]
	get_configsdir(szCfgDir, sizeof szCfgDir - 1)
	
	formatex(szCfgFile, sizeof szCfgFile - 1, "%s/%s", szCfgDir, szCfgFile)
	
	if (!file_exists(szCfgFile))
		return
		
	for (new i = 0; i < file_size(szCfgFile, 1); i++)
	{
		new szInfo[128], szAccount[32], szPassword[32], szNickName[32]
		new iTextLen
		
		read_file(szCfgFile, i, szInfo, sizeof szInfo - 1, iTextLen)
		parse(szInfo, szAccount, sizeof szAccount - 1, szPassword , sizeof szPassword - 1, szNickName, sizeof szNickName - 1)
		
		if (TrieKeyExists(iRegisteredAccount, szAccount))
			continue
		
		if (TrieKeyExists(iAccountNickName, szAccount))
		{
			new szAccountNickName[32]
			TrieGetString(iAccountNickName, szAccount, szAccountNickName, sizeof szAccountNickName - 1)
			
			if (equal(szNickName, szAccountNickName))
				continue
		}
		
		TrieSetCell(iRegisteredAccount, szAccount, 1)
		
		TrieSetString(iAccountPassWord, szAccount, szPassword)
		TrieSetCell(iAccountPassWord, szAccount, 1)
		
		TrieSetString(iAccountNickName, szAccount, szNickName)
		TrieSetCell(iAccountNickName, szAccount, 1)
		
		TrieDeleteKey(iAccountInUse, szAccount)
	}
}

stock create_menu()
{
	new szMenuTitle[64]
	new szMenuItemName[64]
	new szItemInfo[32]
	
	formatex(szMenuTitle, sizeof szMenuTitle - 1, "%L", LANG_SERVER, "LOGIN_MENU_TITLE")
	iLoginMenuId = menu_create(szMenuTitle, "fw_LoginOption", 0)
			
			
	formatex(szMenuItemName, sizeof szMenuItemName - 1, "%L", LANG_SERVER, "MSG_SIGN_IN_BY_HAND")
	menu_additem(iLoginMenuId, szMenuItemName, "1", ADMIN_ALL, -1)
			
	formatex(szMenuItemName, sizeof szMenuItemName - 1, "%L", LANG_SERVER, "MSG_SIGN_IN_AUTOMATICALLY")
	menu_additem(iLoginMenuId, szMenuItemName, "2", ADMIN_ALL, -1)
			
	menu_setprop(iLoginMenuId, MPROP_EXIT, MEXIT_NEVER)
	
	
	//		CREATE INVENTORY MENU
	formatex(szMenuTitle, sizeof szMenuTitle - 1, "%L", 0, "CSRED_MENU_NAME")
		
	iBagSelectionMenuId = menu_create(szMenuTitle, "fw_InventoryOpen", -1)
		
	for (new iBagId = 0; iBagId < MAX_INVENTORY_SLOT; iBagId++)
	{
		new szDictionary[32]
			
		formatex(szDictionary, sizeof szDictionary - 1 , "CSRED_BAG_%d", iBagId)
		formatex(szMenuItemName, sizeof szMenuItemName - 1, "%L", LANG_SERVER, szDictionary)
		formatex(szItemInfo, sizeof szItemInfo - 1, "%d", iBagId)
		menu_additem(iBagSelectionMenuId, szMenuItemName, szItemInfo, ADMIN_ALL, -1)
	}
}

stock is_zp_on()
{
	if (get_current_gameplay() != GAMEMODE_ZM)
		return 0
		
	return zp_is_mode_on()
}




stock can_user_equip_prim()
{
	
	if (is_gungame_on())
		return 0
	
	return 1
}

stock can_user_equip_sec()
{
	if (is_gungame_on())
		return 0
		
	return 1
}

stock can_user_equip_melee()
{
	if (is_gungame_on())
		return 0
	
	return 1
}

stock can_user_equip_grenade()
{
	if (is_gungame_on())
		return 0
		
	return 1
}

stock can_user_equip_defuser()
{
	if (is_gungame_on())
		return 0
		
	new iWeaponMode, iFightYard
	
	if (is_tdm_on(iWeaponMode))
		return 0
	
	if (is_zombie_on())
		return 0
	
	
	if (is_deathmatch_on(iWeaponMode, iFightYard) == CS_DM_DE)
		return 1
	
	return 0
}

stock Float:get_float_from_key(Trie:iTrie, szKey[])
{
	if (!iTrie)
		return 0.0
		
	if (!TrieKeyExists(iTrie, szKey))
		return 0.0
		
	new Float:fOutput = 0.0
	TrieGetCell(iTrie, szKey, fOutput)
	return fOutput
}

stock get_int_from_key(Trie:iTrie, szKey[])
{
	if (!iTrie)
		return 0
		
	if (!TrieKeyExists(iTrie, szKey))
		return 0
		
	new iOutput = 0
	TrieGetCell(iTrie, szKey, iOutput)
	return iOutput
}

stock set_float_to_key(Trie:iTrie, szKey[], Float:fInput)
{
	if (!iTrie)
		return
		
	TrieSetCell(iTrie, szKey, fInput)
}

stock set_int_to_key(Trie:iTrie, szKey[], iInput)
{
	if (!iTrie)
		return
		
	TrieSetCell(iTrie, szKey, iInput)
}

#define m_iInternalMode	126

stock fm_get_user_internal_model(id)
	return get_pdata_int(id, m_iInternalModel, 5)

stock fm_set_user_internal_model(id, iModelIndex)
	set_pdata_int(id, m_iInternalModel, iModelIndex, 5)

public TFM_user_awarded_gp(id, iGp)
{
	if (nt_is_autologin_enabled())
	{
		iGp *= 10
		
		TFM_set_gp_return(id, iGp)
		
		return PLUGIN_HANDLED
	}
	return PLUGIN_CONTINUE
}

public TFM_user_awarded_coin(id, iCoin)
{
	if (nt_is_autologin_enabled())
	{
		iCoin *= 10
		TFM_set_coin_return(id, iCoin)
		return PLUGIN_HANDLED
	}
	return PLUGIN_CONTINUE
}
