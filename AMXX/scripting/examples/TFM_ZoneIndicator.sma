
/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <hamsandwich>
#include <engine>
#include <cstrike>
#include <xs>

#include <csx>


#include <GamePlay_Included/Tools.inc>
#include <fakemeta_util>

#define PLUGIN "[CSRED ZONE INDICATOR]"
#define VERSION "1.7"
#define AUTHOR "Nguyen Duy Linh"


#define INDICATOR_REACTIVE_TIME 2.0

enum
{
	TYPE_NONE,
	TYPE_BOMB,
	TYPE_RESCUE,
	TYPE_SAFETY,
	TYPE_ESCAPE
	
}

#define ZONE_BITSUM ((1<<TYPE_BOMB)|(1<<TYPE_RESCUE)|(1<<TYPE_SAFETY)|(1<<TYPE_ESCAPE))
#define is_valid_zone(%1)      (ZONE_BITSUM & (1<<%1))

stock const iCOLOR_RED[] = {	0,	255,	0,	0,	247}
stock const iCOLOR_GREEN[] = {	0,	0,	255,	0,	243}
stock const iCOLOR_BLUE[] = {	0,	0, 	0,	255,	7}


#define LASER_SPRITE "sprites/laserbeam.spr"

new iNotitficationSprite

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	
	register_think("func_bomb_target", "fw_BombZoneThink")
	register_think("info_bomb_target", "fw_BombZoneThink")
	register_think("info_hostage_rescue", "fw_HostageRescueZoneThink")
	register_think("func_hostage_rescue", "fw_HostageRescueZoneThink")
	register_think("func_vip_safetyzone", "fw_VipSafetyZoneThink")
	register_think("func_escapezone", "fw_EscapeZoneThink")
	
}

public plugin_cfg()
{
	
	new iGamePlay = 0
	new iFightYard, iWeaponMode
	new iDeathMatch =is_deathmatch_on(iWeaponMode, iFightYard)
	
	if (iDeathMatch)
	{
	
		if (iDeathMatch == CS_DM_DE)
		{
			new entity = -1
			while ((entity = find_ent_by_class(entity, "func_bomb_target")))
			{
				set_pev(entity, pev_nextthink, get_gametime() + 0.1)
			}
			
			// BOMB_TARGET_TYPE2
			entity = -1
			while ((entity = find_ent_by_class(entity, "info_bomb_target")))
			{
				set_pev(entity, pev_nextthink, get_gametime() + 0.1)
				
			}
		}
		else if (iDeathMatch == CS_DM_CS)
		{
			new entity 
			
			entity = -1
	
			while ((entity = find_ent_by_class(entity, "func_hostage_rescue")))
			{
				set_pev(entity, pev_nextthink, get_gametime() + 0.1)
			}
			
			entity = -1
	
			while ((entity = find_ent_by_class(entity, "info_hostage_rescue")))
			{
				set_pev(entity, pev_nextthink, get_gametime() + 0.1)
			}
		}
		else if (iDeathMatch == CS_DM_AS)
		{
			new entity 
			
			entity = -1
	
			while ((entity = find_ent_by_class(entity, "func_vip_safetyzone")))
			{
				set_pev(entity, pev_nextthink, get_gametime() + 0.1)
			}
		}
		
		iGamePlay = 1
		
	}
	else if (is_escape_on())
	{
		new entity 
			
		entity = -1
	
		while ((entity = find_ent_by_class(entity, "func_escapezone")))
		{
			if (!pev_valid(entity))
				continue
				
			set_pev(entity, pev_nextthink, get_gametime() + 0.1)
		}
		iGamePlay = 1
	}
	
	if (!iGamePlay)
	{
		set_fail_state("NO ZONE IS VALID")
		return
	}
	
	iNotitficationSprite = engfunc(EngFunc_PrecacheModel, LASER_SPRITE)
}

public fw_BombZoneThink(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return
		
	new Float:fOrigin[3]
	get_brush_entity_origin(iEnt, fOrigin)
	
	new iCOLOR[3]
	
	new iZoneType = TYPE_BOMB
	
	iCOLOR[0] = iCOLOR_RED[iZoneType]
	iCOLOR[1] = iCOLOR_GREEN[iZoneType]
	iCOLOR[2] = iCOLOR_BLUE[iZoneType]
	
	create_blast_circle(fOrigin, iCOLOR)
	
	set_pev(iEnt, pev_nextthink, get_gametime() + INDICATOR_REACTIVE_TIME)
	
}

public fw_HostageRescueZoneThink(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return
		
	new Float:fOrigin[3]
	get_brush_entity_origin(iEnt, fOrigin)
	
	new iCOLOR[3]
	
	new iZoneType = TYPE_RESCUE
	
	iCOLOR[0] = iCOLOR_RED[iZoneType]
	iCOLOR[1] = iCOLOR_GREEN[iZoneType]
	iCOLOR[2] = iCOLOR_BLUE[iZoneType]
	
	create_blast_circle(fOrigin, iCOLOR)
	
	set_pev(iEnt, pev_nextthink, get_gametime() + INDICATOR_REACTIVE_TIME)
}

public fw_VipSafetyZoneThink(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return
		
	new Float:fOrigin[3]
	get_brush_entity_origin(iEnt, fOrigin)
	
	new iCOLOR[3]
	
	new iZoneType = TYPE_SAFETY
	
	iCOLOR[0] = iCOLOR_RED[iZoneType]
	iCOLOR[1] = iCOLOR_GREEN[iZoneType]
	iCOLOR[2] = iCOLOR_BLUE[iZoneType]
	
	create_blast_circle(fOrigin, iCOLOR)
	
	set_pev(iEnt, pev_nextthink, get_gametime() + INDICATOR_REACTIVE_TIME)
}

public fw_EscapeZoneThink(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return
		
	new Float:fOrigin[3]
	get_brush_entity_origin(iEnt, fOrigin)
	
	new iCOLOR[3]
	
	new iZoneType = TYPE_ESCAPE
	
	iCOLOR[0] = iCOLOR_RED[iZoneType]
	iCOLOR[1] = iCOLOR_GREEN[iZoneType]
	iCOLOR[2] = iCOLOR_BLUE[iZoneType]
	
	create_blast_circle(fOrigin, iCOLOR)
	
	set_pev(iEnt, pev_nextthink, get_gametime() + INDICATOR_REACTIVE_TIME)
}

stock create_blast_circle(const Float:originF[3], iColor[3])
{
	/*
	// Smallest ring
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, originF, 0)
	write_byte(TE_BEAMCYLINDER) // TE id
	engfunc(EngFunc_WriteCoord, originF[0]) // x
	engfunc(EngFunc_WriteCoord, originF[1]) // y
	engfunc(EngFunc_WriteCoord, originF[2]) // z
	engfunc(EngFunc_WriteCoord, originF[0]) // x axis
	engfunc(EngFunc_WriteCoord, originF[1]) // y axis
	engfunc(EngFunc_WriteCoord, originF[2] + 100.0) // z axis
	write_short(iNotitficationSprite) // sprite
	write_byte(0) // startframe
	write_byte(0) // framerate
	write_byte(4) // life
	write_byte(10) // width
	write_byte(0) // noise
	write_byte(iColor[0]) // red
	write_byte(iColor[1]) // green
	write_byte(iColor[2]) // blue
	write_byte(200) // brightness
	write_byte(0) // speed
	message_end()
	
	// Medium ring
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, originF, 0)
	write_byte(TE_BEAMCYLINDER) // TE id
	engfunc(EngFunc_WriteCoord, originF[0]) // x
	engfunc(EngFunc_WriteCoord, originF[1]) // y
	engfunc(EngFunc_WriteCoord, originF[2]) // z
	engfunc(EngFunc_WriteCoord, originF[0]) // x axis
	engfunc(EngFunc_WriteCoord, originF[1]) // y axis
	engfunc(EngFunc_WriteCoord, originF[2] + 150.0) // z axis
	write_short(iNotitficationSprite) // sprite
	write_byte(0) // startframe
	write_byte(0) // framerate
	write_byte(4) // life
	write_byte(10) // width
	write_byte(0) // noise
	write_byte(iColor[0]) // red
	write_byte(iColor[1]) // green
	write_byte(iColor[2]) // blue
	write_byte(200) // brightness
	write_byte(0) // speed
	message_end()
	*/
	
	// Largest ring
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, originF, 0)
	write_byte(TE_BEAMCYLINDER) // TE id
	engfunc(EngFunc_WriteCoord, originF[0]) // x
	engfunc(EngFunc_WriteCoord, originF[1]) // y
	engfunc(EngFunc_WriteCoord, originF[2]) // z
	engfunc(EngFunc_WriteCoord, originF[0]) // x axis
	engfunc(EngFunc_WriteCoord, originF[1]) // y axis
	engfunc(EngFunc_WriteCoord, originF[2] + 200.0) // z axis
	write_short(iNotitficationSprite) // sprite
	write_byte(0) // startframe
	write_byte(0) // framerate
	write_byte(4) // life
	write_byte(10) // width
	write_byte(0) // noise
	write_byte(iColor[0]) // red
	write_byte(iColor[1]) // green
	write_byte(iColor[2]) // blue
	write_byte(200) // brightness
	write_byte(0) // speed
	message_end()
}
