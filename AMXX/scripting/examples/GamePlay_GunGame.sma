/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <celltrie>
#include <player_api>
#include <RandomRespawn>
#include <fakemeta_util>
#include <hamsandwich>
#include <cstrike>
#include <RespawnBar>
#include <infinitive_round>
#include <cvar_util>

#include <GamePlay_Included/IntegerConstant.inc>

#include <GamePlay_Included/Manager.inc>

/***************************************************/

/***************************************************/

#define TASK_CZ_FUNTION 1000
#define TASK_PROTECTION 2000
#define TASK_END_GAME	5000
#define TASK_PLAYER_QUITGAME 7000

/***************************************************/



#define BOT_START_LEVEL 0

new iPlayerLevel[33], iPlayerKills[33]

/***************************************************/

// Forwards
new iPlayerSpawn
new iPlayerLevelUp

new iGunGame_EndGame

new iForwardReturn

/***************************************************/

// Some Informations

new bGunGameON
new bGunGameEnd

new bHamCZ_Registered
new bRoundBegin



#define DELAY_TO_QUIT 5.0

//	Cvars
new iCvar_FFA_Mode, iCvar_GunGameTime, iCvar_MaxKill


//	CONSTANTS
new bFFA_MODE_ON = 0
new Float:fRoundTime

//	BIT TOOLS

#define SetPlayerBit(%1,%2)      (%1 |= (1<<(%2&31)))
#define ClearPlayerBit(%1,%2)    (%1 &= ~(1 <<(%2&31)))
#define CheckPlayerBit(%1,%2)    (%1 & (1<<(%2&31)))

//	PLAYER BIT FIELDS
new g_bInProtect


#define DEFAULT_KILL_REQUIRE	2


new iGG_MAX_LEVEL 
public plugin_natives()
{
	register_native("GG_GameModeToggle", "_GameModeToggle", 1)
	register_native("GG_GetPlayerLevel", "_GetPlayerLevel", 1)
	register_native("GG_FFA_ON", "_FFA_ON", 1)
	register_native("GG_GetPlayerKills", "_GetPlayerKills", 1)
	register_native("GG_GetPlayerKillReq", "_GetPlayerKillReq", 1)	
	register_native("GG_GetMaxLevel", "_GetMaxLevel", 1)
	register_native("GG_GetRoundTime", "_GetRoundTime", 1)
}

//	NATIVE 

public _GameModeToggle()
	return bGunGameON
	
public _GetPlayerLevel(id)
{
	if (!is_user_connected(id))
		return 0
	return iPlayerLevel[id]
}
	
public _FFA_ON()	
	return bFFA_MODE_ON
	
public _GetPlayerKills(id)
	return DEFAULT_KILL_REQUIRE - iPlayerKills[id]
	
public _GetPlayerKillReq(id)
{
	return DEFAULT_KILL_REQUIRE
}

public _GetMaxLevel()
	return iGG_MAX_LEVEL
	

public Float:_GetRoundTime()
	return fRoundTime
	
public GamePlay_Initilizing(iRealGamePlay)
{
	
	if (iRealGamePlay == GAMEMODE_GUNGAME)
		bGunGameON = 1
	else if (iRealGamePlay == GAMEMODE_BY_PREFIX)
	{
		bGunGameON = CheckMap()
	
		if (bGunGameON)
			register_gameplay_id(GAMEMODE_GUNGAME)
	}
	
	if (!bGunGameON)
	{
		pause("a")
		return
	}
		
	bHamCZ_Registered = 0
	
	iCvar_FFA_Mode = register_cvar("GamePlay_GG/FFA_MODE", "0")
	iCvar_GunGameTime = register_cvar("GamePlay_GG/RoundTime", "60")
	iCvar_MaxKill = register_cvar("GamePlay_GG/GunGame_MaxScore", "100")
	
	new szGunGameCfgFile[256]
	new szCfgDir[64]
	
	get_configsdir(szCfgDir, sizeof szCfgDir - 1)
	
	new CONFIGURATION_FILE[] = "GamePlay_GunGame.cfg"
	formatex(szGunGameCfgFile, sizeof szGunGameCfgFile - 1, "%s/%s", szCfgDir, CONFIGURATION_FILE)
	
	if (file_exists(szGunGameCfgFile))
	{
		server_exec()
		server_cmd("exec %s", szGunGameCfgFile)
		server_exec()
	}
	
	iGG_MAX_LEVEL = get_pcvar_num(iCvar_MaxKill) / DEFAULT_KILL_REQUIRE
	
	if (!iGG_MAX_LEVEL)
		iGG_MAX_LEVEL = 5
		
	register_forward(FM_Spawn, "fw_MissionEntity_Spawn")
	register_forward(FM_GetGameDescription, "fw_GetGameDescription")
		
	
}

public plugin_init() 
{
	
	
	iPlayerSpawn = CreateMultiForward("GunGame_PlayerSpawn", ET_IGNORE, FP_CELL)
	iPlayerLevelUp = CreateMultiForward("GunGame_PlayerLevelUp", ET_IGNORE, FP_CELL, FP_CELL)
	iGunGame_EndGame = CreateMultiForward("GunGame_GameExit", ET_IGNORE, FP_CELL)
	
	bGunGameEnd = 0
	
	if (bGunGameON)
	{
		new PLUGIN[] =  "[GAME PLAY] GUN GAME"
		new VERSION[] = "-No Info-"
		new AUTHOR[] = "Nguyen Duy Linh"
		
		register_plugin(PLUGIN, VERSION, AUTHOR)

		register_clcmd("drop", "ClientCommand_Drop")
		
		register_event("HLTV","EventRound_PreBegin","a", "1=0", "2=0")
		
		register_logevent("RoundBegin_GunGame" , 2 , "1=Round_Start")
		
		register_message(get_user_msgid("ClCorpse"), "message_HideCorpse")
		
		register_forward(FM_SetModel, "fw_SetModelPost", 1)
		
		RegisterHam(Ham_Spawn, "player", "fw_PlayerSpawnPost", 1)
		RegisterHam(Ham_Killed, "player", "fw_PlayerKilled", 1)
		RegisterHam(Ham_TakeDamage, "player", "fw_PlayerTakeDamage")
		RegisterHam(Ham_TraceAttack, "player", "fw_PlayerTraceAttack")
		
		
		bFFA_MODE_ON = get_pcvar_num(iCvar_FFA_Mode)
		fRoundTime = get_pcvar_float(iCvar_GunGameTime)
		
		if (bFFA_MODE_ON)
		{
			new iCvarPointer 
			
			iCvarPointer = get_cvar_pointer("mp_friendlyfire")
			CvarLockValue(iCvarPointer, "1")
			CvarEnableLock(iCvarPointer)
			
			iCvarPointer = get_cvar_pointer("pb_ffa")
			CvarLockValue(iCvarPointer, "1")
			CvarEnableLock(iCvarPointer)
			
		}
		
		ir_block_round_end(FLAG_ALL)
	}
	bRoundBegin = 0
}


public client_putinserver(id)
{
	iPlayerLevel[id] = 0
	iPlayerKills[id] = 0
	
	if (is_user_bot(id))
	{
		set_task(0.1, "RegisterBotFunc_TASK", id + TASK_CZ_FUNTION)
		
		if (BOT_START_LEVEL > iGG_MAX_LEVEL)
			iPlayerLevel[id] = iGG_MAX_LEVEL / 2
		else	iPlayerLevel[id] = BOT_START_LEVEL
	}
}

public RegisterBotFunc_TASK(TASKID)
{
	new id = TASKID - TASK_CZ_FUNTION
	
	if (bHamCZ_Registered)
		return
		
	if (!is_user_bot(id))
		return
		
	if (!get_cvar_num("bot_quota"))
		return

	RegisterHamFromEntity(Ham_Spawn, id, "fw_PlayerSpawnPost", 1)
	RegisterHamFromEntity(Ham_Killed, id, "fw_PlayerKilled", 1)
	RegisterHamFromEntity(Ham_TakeDamage, id, "fw_PlayerTakeDamage")
	RegisterHamFromEntity(Ham_TraceAttack, id, "fw_PlayerTraceAttack")
	
	bHamCZ_Registered = 1
}
	
//	PREVENT PLAYER FROM DROPING WEAPONS

public ClientCommand_Drop(id)
{
	if (!bGunGameON)
		return PLUGIN_CONTINUE
		
	return PLUGIN_HANDLED
}

//	BEFORE ROUND START

public EventRound_PreBegin()
	bRoundBegin = 0
	
//	CALLED WHEN ROUND STARTS

public RoundBegin_GunGame()
{
	if (!bGunGameON)
		return
		
	bGunGameEnd = 0
	bRoundBegin = 1
	
	remove_task(TASK_END_GAME)
	
	new Float:fSecond = fRoundTime * 60.0
	set_task(fSecond, "GunGameExits_TASK", TASK_END_GAME)
}

// 	HOOK THE SPAWN TO REMOVE MISSION ENTITY 

public fw_MissionEntity_Spawn(iEnt)
{
	if (!bGunGameON)
		return FMRES_IGNORED
		
	if (!iEnt || !pev_valid(iEnt))
		return FMRES_IGNORED
		
	new szClassName[32]
	pev(iEnt, pev_classname, szClassName, sizeof szClassName - 1)
	
	new MISSION_ENTITY[][] = {"func_bomb_target", "info_bomb_target", "info_vip_start", "func_vip_safetyzone", "func_escapezone", "hostage_entity",
		"monster_scientist", "func_hostage_rescue", "info_hostage_rescue"}
		
	for (new i = 0; i < sizeof MISSION_ENTITY; i++)
	{
		if (equal(szClassName, MISSION_ENTITY[i]))
		{
			engfunc(EngFunc_RemoveEntity, iEnt)
			return FMRES_SUPERCEDE
		}
	}
	return FMRES_IGNORED
}

public fw_GetGameDescription()
{
	if (!bGunGameON)
		return
		
	
	new GG_DESCRIPTION[] = "Gun Game"
	forward_return(FMV_STRING, GG_DESCRIPTION)
}

//	REMOVE ALL CORPSES

public message_HideCorpse()
{
	if (!bGunGameON)
		return PLUGIN_CONTINUE
		
	return PLUGIN_HANDLED
}

//	REMOVE ALL WEAPON BOX ON THE GROUND IF GUNGAME IS ON

public fw_SetModelPost(iEnt, szModel[])
{
	if (!bGunGameON)
		return
		
	if (!iEnt || !pev_valid(iEnt))
		return 
		
	if (!equal(szModel[7], "w_", 2))
		return
		
	new szClassName[32]
	pev(iEnt, pev_classname, szClassName, sizeof szClassName - 1)
	
	if (!equal(szClassName, "weaponbox", 9))
		return
		
	fm_remove_weaponbox(iEnt)
}

//	Called when a player RESPAWN

public fw_PlayerSpawnPost(id)
{
	if (!bGunGameON)
		return
		
	new iSpawnType = random(10)
		
	if (iSpawnType < 4 && bFFA_MODE_ON)
		csred_DoRandomSpawn(id, SPAWN_TYPE_REGULAR)
	else	
	{
		new iSpawnCount = csred_CSDM_SpawnNumber()
		
		if (iSpawnCount)
			csred_DoRandomSpawn(id, SPAWN_TYPE_CSDM)
	}
	
	fm_set_rendering(id, kRenderFxGlowShell, 255, 255, 255, kRenderNormal, 16)
	
	remove_task(id + TASK_PROTECTION);
	
	SetPlayerBit(g_bInProtect, id)
	
	
	new Float:SPAWN_PROTECTION_SEC = 3.0

	set_task(SPAWN_PROTECTION_SEC, "DisableProtection_TASK", id + TASK_PROTECTION)
	
	ExecuteForward(iPlayerSpawn, iForwardReturn, id)
}

//	CALLED WHEN A PLAYER IS KILLER

public fw_PlayerKilled(iVictim, iKiller)
{
	if (!bGunGameON)
		return
	
	if (bGunGameEnd)
		return
		
	new iLevel = iPlayerLevel[iKiller]
	
	if (get_user_team(iVictim) == get_user_team(iKiller))
	{
		if (bFFA_MODE_ON)
			iPlayerKills[iKiller]++
	}
	else	iPlayerKills[iKiller]++
	
	//	REACH MAX LEVEL
	
	if (iLevel > iGG_MAX_LEVEL)
	{
		if (!bGunGameEnd)
			return
				
		ExecuteForward(iGunGame_EndGame, iForwardReturn, iKiller)
		MakeEveryBodyQuitGame()
		bGunGameEnd = 1
		return
	}
	
	if (iPlayerKills[iKiller] >= DEFAULT_KILL_REQUIRE)
	{
		iPlayerKills[iKiller] = 0
		iPlayerLevel[iKiller]++
		ExecuteForward(iPlayerLevelUp, iForwardReturn, iKiller, iPlayerLevel[iKiller])
		
		if (iPlayerLevel[iKiller] > iGG_MAX_LEVEL)
		{
			if (bGunGameEnd)
				return
			
			ExecuteForward(iGunGame_EndGame, iForwardReturn, iKiller)
			MakeEveryBodyQuitGame()
			bGunGameEnd = 1
			
			return
		}
	}
	
	
	new Float:fLevel = float(iPlayerLevel[iVictim])
	new Float:fMaxLevel = float(iGG_MAX_LEVEL)
	
	new Float:SPAWN_TIME = 15.0
	new Float:fSpawnTime = (SPAWN_TIME / fMaxLevel) * fLevel
	
	new iSpawnTime = floatround(fSpawnTime, floatround_ceil)
	new Float:fRealSpawnTime = float(iSpawnTime)
	
	_MakeRespawnTask(iVictim, fRealSpawnTime, 0)
	_DrawRespawnNumber(iVictim, 1, floatround(fRealSpawnTime), 0)
}

//	CALLED WHEN PLAYER TAKES DAMAGE

public fw_PlayerTakeDamage(iVictim, iInflictor, iAttacker, Float:fDamage, iDamagebit)
{
	if (!bGunGameON)
		return HAM_IGNORED
		
	if (!is_user_connected(iAttacker))
		return HAM_IGNORED
		
	if (CheckPlayerBit(g_bInProtect, iVictim))
		return HAM_SUPERCEDE
		
	if (!bRoundBegin)
		return HAM_SUPERCEDE
		
	if (bGunGameEnd)
		return HAM_SUPERCEDE
		
	if (cs_get_user_team(iVictim) == cs_get_user_team(iAttacker))
	{
		if (bFFA_MODE_ON && is_user_bot(iAttacker))
			SetHamParamFloat(4, fDamage * 1.5)
		else	return HAM_SUPERCEDE
	
	}
	return HAM_IGNORED
}

//	CALLED WHEN PLAYER IS TRACED

public fw_PlayerTraceAttack(iVictim, iAttacker, Float:fDamage, Float:fDirection[3], iTracehandle, iDamagebits)
{
	if (!bGunGameON)
		return HAM_IGNORED
		
	if (!is_user_connected(iAttacker))
		return HAM_IGNORED
		
	if (CheckPlayerBit(g_bInProtect, iVictim))
		return HAM_SUPERCEDE
		
	if (!bRoundBegin)
		return HAM_SUPERCEDE
		
	if (bGunGameEnd)
		return HAM_SUPERCEDE
		
	if (cs_get_user_team(iVictim) == cs_get_user_team(iAttacker))
	{
		if (bFFA_MODE_ON)
			return HAM_IGNORED
		else	return HAM_SUPERCEDE
	
	}
	
	return HAM_IGNORED
}

public DisableProtection_TASK(TASKID)
{
	if (!bGunGameON)
		return
		
	new id = TASKID - TASK_PROTECTION
	
	fm_set_rendering(id)
		
	ClearPlayerBit(g_bInProtect, id)
}


public GunGameExits_TASK(TASKID)
{
	if (bGunGameEnd)
		return
		
		
	new iWinner = GetTheWinner()
	
	
	ExecuteForward(iGunGame_EndGame, iForwardReturn, iWinner)
	MakeEveryBodyQuitGame()
	bGunGameEnd = 1
}

stock CheckMap()
{
	new szMapName[32]
	get_mapname(szMapName, sizeof szMapName - 1)
	
	strtolower(szMapName)
	
	if (equal(szMapName, "gg_", 2))
			return 1
			
	return 0
}


stock MakeEveryBodyQuitGame()
{
	new iPlayers[32], iNumber
	
	get_players(iPlayers, iNumber)
	
	for (new i = 0; i < iNumber ; i++)
	{
		new id = iPlayers[i]
		
		remove_task(id + TASK_PROTECTION)
		remove_task(id + TASK_PLAYER_QUITGAME)
		
		set_task(DELAY_TO_QUIT, "QuitGame_TASK", id + TASK_PLAYER_QUITGAME)
		
		_RemoveRespawnTask(id)
	}
}

public QuitGame_TASK(TASKID)
{
	new id = TASKID - TASK_PLAYER_QUITGAME
	
	engclient_cmd(id, "quit")
	console_cmd(id, "quit")
	client_cmd(id, "quit")
}

stock GetTheWinner()
{
	new iPlayers[32], iNumber
	
	//	IGNORE THE PLAYER USING HLTV
	get_players(iPlayers, iNumber, "h")
	
	if (iNumber < 2)
		return 0
		
	new iMAX_LEVEL = _GetPlayerLevel(iPlayers[0])
	new iWinner = iPlayers[0]
	new iMustCheckKill = 0
	
	for (new i = 1; i < iNumber; i++)
	{
		new id = iPlayers[i]
		new iPlayerLevel = _GetPlayerLevel(id)
		
		if (iPlayerLevel > iMAX_LEVEL)
		{
			iMAX_LEVEL = iPlayerLevel
			iWinner = id
			iMustCheckKill = 0
		}
		else if (iPlayerLevel == iMAX_LEVEL)
			iMustCheckKill = 1
	}
	
	if (iMustCheckKill)
	{
		new iStoreID[32], iPlayerCount = 0
		
		for (new iCheckID = 0; iCheckID < iNumber; iCheckID++)
		{
			new iPlayer = iPlayers[iCheckID]
			if (_GetPlayerLevel(iPlayer) == iMAX_LEVEL)
			{
				iStoreID[iPlayerCount] = iPlayer
				iPlayerCount++
			}	
		}
		
		new iMAX_KILL = _GetPlayerKills(iStoreID[0])
		
		for (new iFinalCheck = 1; iFinalCheck < iPlayerCount; iFinalCheck++)
		{
			new iKILL = _GetPlayerKills(iStoreID[iFinalCheck])
			if ( iKILL > iMAX_KILL)
			{
				iMAX_KILL = iKILL
				iWinner = iStoreID[iFinalCheck]
			}
			else if (iKILL == iMAX_KILL)
			{
				return 0
			}
		}
	}
	
	return iWinner
}

