/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <engine>
#include <hamsandwich>
#include <g4u_wpn>
#include <cstrike>

#include <cswpn_ultilities>
#include <cswpn_info>

#include <CHARACTER_MOD>
#include <GamePlay_Included/TFM_ZombieMod.inc>
#include <GamePlay_Included/IntegerConstant.inc>
#include <GamePlay_Included/Manager.inc>

/*	Mini Game-Play of TFM Zombie	*/
#include <GamePlay_Included/SurvivorMode.inc>

#define PLUGIN "Hero Weapon"
#define VERSION "-[No Info]-"
#define AUTHOR "Nguyen Duy Linh"


stock primary_wpn_id[] = {CSW_M3, CSW_XM1014,
			CSW_MP5NAVY, CSW_TMP, CSW_P90, CSW_MAC10, CSW_UMP45,
			CSW_FAMAS, CSW_GALIL, CSW_AK47, CSW_M4A1, CSW_SG552, CSW_AUG, 
			CSW_SCOUT, CSW_AWP, CSW_G3SG1, CSW_SG550,
			CSW_M249}

stock secondary_wpn_id[] = {CSW_USP, CSW_GLOCK18, CSW_DEAGLE, CSW_P228, CSW_ELITE}

new PRIMARY_TYPE, SECONDARY_TYPE, MELEE_TYPE, GRENADE_TYPE
new PRIMARY_ID, SECONDARY_ID, MELEE_ID, GRENADE_ID

new iMaleCharacter_ID, iFemaleCharacter_ID

new bool:g_enabled

enum
{
	LINE_PRIMARY,
	LINE_SECONDARY,
	LINE_MELEE,
	LINE_GRENADE,
	LINE_ARMOR,
	LINE_CHARACTER_MALE,
	LINE_CHARACTER_FEMALE
}
#define PRIMARY_WEAPONS_BITSUM (1<<CSW_M3 | 1<<CSW_XM1014 |1<<CSW_SCOUT | 1<<CSW_MAC10 | 1<<CSW_AUG | 1<<CSW_UMP45 | 1<<CSW_SG550 | 1<<CSW_GALIL | 1<<CSW_FAMAS | 1<<CSW_AWP | 1<<CSW_MP5NAVY | 1<<CSW_M249 | 1<<CSW_M4A1 | 1<<CSW_TMP | 1<<CSW_G3SG1 | 1<<CSW_SG552 | 1<<CSW_AK47 | 1<<CSW_P90)
#define SECONDARY_WEAPONS (1<<CSW_DEAGLE | 1<<CSW_USP | 1<< CSW_GLOCK18 | 1<<CSW_P228 | 1<<CSW_ELITE | 1<<CSW_FIVESEVEN)
#define is_primary_wpn(%1)      (PRIMARY_WEAPONS_BITSUM & (1<<%1))
#define is_secondary_wpn(%1)	(SECONDARY_WEAPONS & (1<<%1))

#define MULTI_NUMBER	2

new iZombieToggle  
	
	
public plugin_cfg() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	
	
	new szCfgDir[64]
	new szCfgFile[256]
	new szWpnListFile[256]
	
	get_configsdir(szCfgDir, sizeof szCfgDir - 1)
	
	new iZombieToggle = can_plugin_enable()
	if (!iZombieToggle)
	{
		set_fail_state("DISABLE BECAUSE ZOMBIE MOD IS OFF")
		return
	}
	
	if (iZombieToggle == ZB_GAMEPLAY_SURVIVOR)
	{
		formatex(szCfgFile, sizeof szCfgFile - 1, "%s/HERO_EQUIPMENT/SurvivorEquipment.redplane", szCfgDir)
		formatex(szWpnListFile, sizeof szWpnListFile - 1, "%s/HERO_EQUIPMENT/SurvivorEquipmentList.redplane", szCfgDir)
		LoadWpnListFile(szWpnListFile)
		
	}
	else if (iZombieToggle == ZB_GAMEPLAY_ZM3)
	{
		formatex(szCfgFile, sizeof szCfgFile - 1, "%s/HERO_EQUIPMENT/LeaderEquipment.redplane", szCfgDir)
		formatex(szWpnListFile, sizeof szWpnListFile - 1, "%s/HERO_EQUIPMENT/LeaderEquipmentList.redplane", szCfgDir)
		LoadWpnListFile(szWpnListFile)
	}
	else if (iZombieToggle == ZB_GAMEPLAY_ZM4)
	{
		formatex(szCfgFile, sizeof szCfgFile - 1, "%s/HERO_EQUIPMENT/ZM4WPN.redplane", szCfgDir)
		formatex(szWpnListFile, sizeof szWpnListFile - 1, "%s/HERO_EQUIPMENT/ZM4WPN_list.redplane", szCfgDir)
		LoadWpnListFile(szWpnListFile)
	}
	if (!file_exists(szCfgFile))
	{
		g_enabled = true
		
		PRIMARY_TYPE = 1
		PRIMARY_ID = primary_wpn_id[random(sizeof primary_wpn_id - 1)]
		
		SECONDARY_TYPE = 1
		SECONDARY_ID = secondary_wpn_id[random(sizeof secondary_wpn_id - 1)]
		
		MELEE_TYPE = 1
		MELEE_ID = CSW_KNIFE
		
		GRENADE_TYPE = 1
		GRENADE_ID = CSW_HEGRENADE
		
		//server_print("%s DOES NOT EXIST", cfgfile)
		//server_print("LOADING DEFAULT HERO WEAPON")
		return
	}
	
	new szInfo[256], iTextLen
	read_file(szCfgFile, LINE_PRIMARY, szInfo, sizeof szInfo - 1, iTextLen)
	
	if (equal(szInfo, "[primary]", 9))
	{
		replace(szInfo, sizeof szInfo - 1, "[primary]", "")
		
		PRIMARY_ID = UT_WorldModelToWeaponId(szInfo)
		PRIMARY_TYPE = 1
		
	}
	else if (equal(szInfo, "[primary_mdl]", 13))
	{
		replace(szInfo, sizeof szInfo - 1, "[primary_mdl]", "")
		
		PRIMARY_ID = find_pw_by_model(szInfo)
		PRIMARY_TYPE = 2
	}
	else if (equal(szInfo, "[primary_ser]", 13))
	{
		replace(szInfo, sizeof szInfo - 1, "[primary_ser]", "")
		
		PRIMARY_ID = find_pw_by_serial(szInfo)
		PRIMARY_TYPE = 2
	}
	
	read_file(szCfgFile, LINE_SECONDARY, szInfo, sizeof szInfo - 1, iTextLen)
	
	if (equal(szInfo, "[secondary]", 11)) 
	{
		replace(szInfo, sizeof szInfo - 1, "[secondary]", "")
		
		SECONDARY_ID = UT_WorldModelToWeaponId(szInfo)
		SECONDARY_TYPE = 1
	}
	else if (equal(szInfo, "[secondary_mdl]", 15))
	{
		replace(szInfo, sizeof szInfo - 1, "[secondary_mdl]", "")
		
		SECONDARY_ID = find_sec_wpn_by_model(szInfo)
		SECONDARY_TYPE = 2
	}
	else if (equal(szInfo, "[secondary_ser]", 15))
	{
		replace(szInfo, sizeof szInfo - 1, "[secondary_ser]", "")
		
		SECONDARY_ID = find_sec_wpn_by_serial(szInfo)
		SECONDARY_TYPE = 2
	}
	
	read_file(szCfgFile, LINE_MELEE, szInfo, sizeof szInfo - 1 ,iTextLen)
	
	if (equal(szInfo, "[melee]"))
		MELEE_TYPE = 1
	else if (equal(szInfo, "[melee_mdl]", 11))
	{
		replace(szInfo, sizeof szInfo - 1, "[melee_mdl]", "")
		MELEE_ID = find_melee_by_model(szInfo)
		MELEE_TYPE = 2
	}
	
	read_file(szCfgFile, LINE_GRENADE, szInfo, sizeof szInfo - 1, iTextLen)
	
	if (equal(szInfo, "[grenade]", 9))
	{
		replace(szInfo, sizeof szInfo - 1, "[grenade]", "")
		GRENADE_ID = UT_WorldModelToWeaponId(szInfo)
		GRENADE_TYPE = 1
	}
	else if (equal(szInfo, "[grenade_mdl]", 13))
	{
		replace(szInfo, sizeof szInfo - 1, "[grenade_mdl]", "")
		GRENADE_ID = find_grenade_by_model(szInfo)
		GRENADE_TYPE = 2
	}
	
	read_file(szCfgFile, LINE_CHARACTER_MALE, szInfo, sizeof szInfo - 1, iTextLen)
	replace(szInfo, sizeof szInfo - 1, "[Male]", "")
	iMaleCharacter_ID = get_character_id_by_model(szInfo)
	
	read_file(szCfgFile, LINE_CHARACTER_FEMALE, szInfo, sizeof szInfo - 1, iTextLen)
	replace(szInfo, sizeof szInfo - 1, "[Female]", "")
	iFemaleCharacter_ID = get_character_id_by_model(szInfo)
	
	g_enabled = true
}

public SM_PlayerBecomeSurvivor(id)
{
	if (!g_enabled)
		return
	
	fm_strip_user_weapons(id)
	
	equip_player_grenade(id)
	equip_player_melee(id)
	equip_player_secondary(id)
	equip_player_primary(id)
	
	equip_player_character(id, CS_TEAM_CT)
	
	//cs_set_user_armor(id, 100, CS_ARMOR_KEVLAR)
}

public hm_UserBecomeSurvivor(id)
{
	fm_strip_user_weapons(id)
	equip_player_grenade(id)
	equip_player_melee(id)
	equip_player_secondary(id)
	equip_player_primary(id)
}

/*
public csred_WpnReload_Post(id, iEnt, iWeaponId)
{
	if (!g_enabled)
		return
				
	if (iZombieToggle != ZB_GAMEPLAY_SURVIVOR)
		return
	
	if (get_user_zombie(id))
		return
		
	new iClip = cs_get_weapon_ammo(iEnt)
	
	if (is_primary_wpn(iWeaponId))
	{
		new iPrimaryWpnId = get_user_pw(id)
		
		if (iPrimaryWpnId < 0)
		{
			if (!iClip && is_user_bot(id))
				cs_set_weapon_ammo(iEnt, _Get_CSWPN_Ammo(iWeaponId))
				
			UT_SetUserBPA(id, iWeaponId, _Get_CSWPN_Bpa(iWeaponId) * MULTI_NUMBER)
		}
		else
		{
			if (!iClip && is_user_bot(id))
				cs_set_weapon_ammo(iEnt, get_pw_ammo(iPrimaryWpnId))
				
			UT_SetUserBPA(id, iWeaponId, get_pw_bpammo(iPrimaryWpnId))
		}
	}
	else if (is_secondary_wpn(iWeaponId))
	{
		new iSecondaryWpnId = get_user_sec_wpn(id)
		
		if ( iSecondaryWpnId < 0)
		{
			if (!iClip && is_user_bot(id))
				cs_set_weapon_ammo(iEnt, _Get_CSWPN_Ammo(iWeaponId))
				
			UT_SetUserBPA(id, iWeaponId, _Get_CSWPN_Bpa(iWeaponId) * MULTI_NUMBER)
		}
		else
		{
			if (!iClip && is_user_bot(id))
				cs_set_weapon_ammo(iEnt, get_sec_wpn_clip(iSecondaryWpnId))
				
			UT_SetUserBPA(id, iWeaponId, get_sec_wpn_bpa(iSecondaryWpnId))
		}
	}
	
}

*/
	
public zm4_hero_appeared(id)
	equip_player_melee(id)
	
		
stock equip_player_primary(id)
{
	if (!is_user_alive(id))
		return 
		
	if (get_user_zombie(id))
		return
		
	if (PRIMARY_TYPE == 1)
	{
		if (!PRIMARY_ID)
			return
			
		new szWeaponName[32]
		get_weaponname(PRIMARY_ID, szWeaponName, sizeof szWeaponName - 1)
		
		fm_give_item(id, szWeaponName)
		
		UT_SetUserBPA(id, PRIMARY_ID, _Get_CSWPN_Bpa(PRIMARY_ID) * MULTI_NUMBER)
		
		engclient_cmd(id, szWeaponName)
	}
	else if (PRIMARY_TYPE == 2)
		give_user_pw(id, PRIMARY_ID)
}

stock equip_player_secondary(id)
{
	if (!is_user_alive(id) || get_user_zombie(id))
		return
		
	if (SECONDARY_TYPE == 1)
	{
		if (!SECONDARY_ID)
			return
			
		new szWeaponName[32]
		get_weaponname(SECONDARY_ID, szWeaponName, sizeof szWeaponName - 1)
		
		fm_give_item(id, szWeaponName)
		UT_SetUserBPA(id, SECONDARY_ID, _Get_CSWPN_Bpa(SECONDARY_ID) * MULTI_NUMBER)
		engclient_cmd(id, szWeaponName)
	}
	else if (SECONDARY_TYPE == 2)
	{
		if (SECONDARY_ID < 0)
			return
			
		give_player_sec_wpn(id, SECONDARY_ID)
	}
}

stock equip_player_melee(id)
{
	if (!is_user_alive(id) || get_user_zombie(id))
		return
		
	if (MELEE_TYPE == 1)
	{
		fm_give_item(id, "weapon_knife")
		engclient_cmd(id, "weapon_knife")
		
	}
	else if (MELEE_TYPE == 2)
		give_user_melee(id, MELEE_ID)
}

stock equip_player_grenade(id)
{
	if (!is_user_alive(id))
		return
	if (GRENADE_TYPE == 1)
	{
		new szWeaponName[32]
		get_weaponname(GRENADE_ID, szWeaponName, sizeof szWeaponName - 1)
		
		fm_give_item(id, szWeaponName)
		engclient_cmd(id, szWeaponName)
	}
	else if (GRENADE_TYPE == 2)
		give_user_grenade(id, GRENADE_ID)	
}

stock equip_player_character(id, CsTeams:iTeam)
{
	if (!is_user_alive(id))
		return
		
	new iCharacterId = get_user_character_2(id)
	
	switch (get_character_gender(iCharacterId, iTeam))
	{
		case GENDER_MALE:
		{
			if (iMaleCharacter_ID < 0)
				return
			set_user_character(id, iMaleCharacter_ID, 0, 1)
		}
		case GENDER_FEMALE:
		{
			if (iFemaleCharacter_ID < 0)
				return
				
			set_user_character(id, iFemaleCharacter_ID, 0, 1)
		}
	}
}

stock fm_give_item(index, const item[]) {
	if (!equal(item, "weapon_", 7) && !equal(item, "ammo_", 5) && !equal(item, "item_", 5) && !equal(item, "tf_weapon_", 10))
		return 0;
	
	new ent = create_entity(item)
	if (!pev_valid(ent))
		return 0;
	
	new Float:origin[3];
	pev(index, pev_origin, origin);
	set_pev(ent, pev_origin, origin);
	set_pev(ent, pev_spawnflags, pev(ent, pev_spawnflags) | SF_NORESPAWN);
	dllfunc(DLLFunc_Spawn, ent);
	
	new save = pev(ent, pev_solid);
	dllfunc(DLLFunc_Touch, ent, index);
	if (pev(ent, pev_solid) != save)
		return ent;
	
	engfunc(EngFunc_RemoveEntity, ent);
	
	return -1;
}

stock fm_strip_user_weapons(index) {
	new ent = create_entity("player_weaponstrip");
	if (!pev_valid(ent))
		return 0;

	dllfunc(DLLFunc_Spawn, ent);
	dllfunc(DLLFunc_Use, ent, index);
	engfunc(EngFunc_RemoveEntity, ent);

	return 1;
}

stock LoadWpnListFile(szFile[])
{
	if (!file_exists(szFile))
		return
		
	new iTRASH, szText[128]
	
	for (new i = 0; i < file_size(szFile, 1); i++)
	{
		read_file(szFile, i, szText, sizeof szText - 1, iTRASH)
		
		
		if (equal(szText, "[primary_wpn]", 13))
		{
			replace(szText, sizeof szText - 1, "[primary_wpn]", "")
			set_pw_load_file(szText, "sp")
		}
		else if (equal(szText, "[secondary_wpn]", 15))
		{
			replace(szText, sizeof szText - 1, "[secondary_wpn]", "")
			set_sec_wpn_load_file(szText, "sp")
		}
		else if (equal(szText, "[melee]", 7))
		{
			replace(szText, sizeof szText - 1, "[melee]", "")
			set_melee_load_file(szText, "sp")
		}
		else if (equal(szText, "[grenade]", 9))
		{
			replace(szText, sizeof szText - 1, "[grenade]", "")
			load_grenade_file(szText, "sp")
		}
		else if (equal(szText, "[character]", 11))
		{
			replace(szText, sizeof szText - 1, "[character]", "")
			load_character_file(szText, "sp")
		}
	}
	
}

stock can_plugin_enable()
{
	if (get_current_gameplay() != GAMEMODE_ZM)
		return 0
		
	if (!zp_is_mode_on())
		return 0
		
	iZombieToggle = zp_get_current_gameplay()
	
	if (iZombieToggle != ZB_GAMEPLAY_SURVIVOR && iZombieToggle != ZB_GAMEPLAY_ZM3 && iZombieToggle != ZB_GAMEPLAY_ZM4)
	{
		return 0
	}
	return iZombieToggle
}
