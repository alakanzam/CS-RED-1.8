/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta_util>
#include <cstrike>
#include <hamsandwich>
#include <cvar_util>

#include <RandomRespawn>
#include <SDK_Hook>
#include <player_api>

#include <GamePlay_Included/TFM_ZombieMod.inc>
#include <GamePlay_Included/IntegerConstant.inc>


#define PLUGIN "[GAME-PLAY] Zombie Mod 1"
#define VERSION "-No Info-"
#define AUTHOR "Redplane"


new GAMEPLAY_NAME[] =	"Zombie Mod 1"
new GAMEPLAY_MAP_PREFIX[] = "zm1_"

#define TASK_BOT_FUNC	1000
#define TASK_ZOMBIE_SELECTION	2000
#define TASK_RESET_MODEL	3000

new ZB_SELECTION_TIME	= 20
#define ZB_ROUND_TIME	3.0

new iCvar_MaxRound



new iMaxRound
new iGameExit
new iHamCz

//	OFFSET 

const	m_iTeam		=	114

stock const LOCKED_CVAR[][] = {
	"mp_friendlyfire",
	"mp_freezetime"
}
	
stock const LOCKED_VALUE[][] = {
	"0",
	"0.0"
}
	
public TFM_EnableRegisterGamePlay()
{
	zp_register_gameplay(ZB_GAMEPLAY_ZM1, GAMEPLAY_NAME, GAMEPLAY_MAP_PREFIX, sizeof GAMEPLAY_MAP_PREFIX)
	iCvar_MaxRound = register_cvar("ZombieMod/GamePlay/ZM1/MaxRound", "9")
	iGameExit = 0
}

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	
	RegisterHam(Ham_TakeDamage, "player", "fw_PlayerTakeDamage")
	RegisterHam(Ham_TraceAttack, "player", "fw_PlayerTraceAttack")
	
	
	iHamCz = 0
	
}

public plugin_cfg()
{
	if (!is_zm1_on())
	{
		set_fail_state("[GAMEPLAY] Zombie Mod 1 is turned OFF")
		return
	}
	
	iMaxRound = get_pcvar_num(iCvar_MaxRound)
	
	if (!iMaxRound)
		iMaxRound = 9
		
	zp_set_round_time(ZB_ROUND_TIME)
	zp_set_max_score(iMaxRound)
	
	for (new iLockedId = 0; iLockedId < sizeof LOCKED_CVAR; iLockedId++)
	{
		new iCvarPointer = get_cvar_pointer(LOCKED_CVAR[iLockedId])
		CvarLockValue(iCvarPointer, LOCKED_VALUE[iLockedId])
		CvarEnableLock(iCvarPointer)
	}
}

public client_putinserver(id)
{
	
	client_disconnect(id)
	
	
	
	if (!is_user_bot(id))
		return
		
	if (!get_cvar_num("bot_quota"))
		return
		
	if (iHamCz)
		return
		
	remove_task(id + TASK_BOT_FUNC)
	set_task(0.1, "RegisterCzFunction_TASK", id + TASK_BOT_FUNC)
	
}

public client_disconnect(id)
{
	remove_task(id + TASK_RESET_MODEL)
	remove_task(id + TASK_BOT_FUNC)
}

public RegisterCzFunction_TASK(TASKID)
{
	if (iHamCz)
		return
		
	new id = TASKID - TASK_BOT_FUNC
	
	if (!is_user_connected(id))
		return
		
	if (!is_user_bot(id))
		return
		
	if (!get_cvar_num("bot_quota"))
		return
		
	if (iHamCz)
		return
		
	RegisterHamFromEntity(Ham_TakeDamage, id, "fw_PlayerTakeDamage")
	RegisterHamFromEntity(Ham_TraceAttack, id, "fw_PlayerTraceAttack")
	iHamCz = 1
	
}


public fw_PlayerTakeDamage(iVictim, iInflictor, iAttacker, Float:fDamage, iDamagebit)
{
	if (!is_zm1_on())
		return HAM_IGNORED
		
	if (!is_user_connected(iVictim))
		return HAM_IGNORED
		
	if (!is_user_connected(iAttacker))
		return HAM_IGNORED
		
	if (get_user_zombie(iVictim) && get_user_zombie(iAttacker))
		return HAM_SUPERCEDE
		
	if (!get_user_zombie(iVictim) && !get_user_zombie(iAttacker))
		return HAM_SUPERCEDE
		
	return HAM_IGNORED
}

public fw_PlayerTraceAttack(iVictim, iAttacker, Float:fDamage, Float:fDirection[3], tracehandle, damagebits)
{
	if (!is_zm1_on())
		return HAM_IGNORED
		
	if (!is_user_connected(iVictim))
		return HAM_IGNORED
		
	if (!is_user_connected(iAttacker))
		return HAM_IGNORED
		
	if (get_user_zombie(iVictim) && get_user_zombie(iAttacker))
		return HAM_SUPERCEDE
		
	if (!get_user_zombie(iVictim) && !get_user_zombie(iAttacker))
		return HAM_SUPERCEDE
		
	return HAM_IGNORED
}

public RoundEvent_PreBegin()
{
	if (!is_zm1_on())
		return
		
	zp_set_round_state(ROUND_END)
	set_user_countdown(0, 0, 1, 1, 1)

}

public RoundEvent_Begin()
{
	if (!is_zm1_on())
		return
		
	
	set_user_countdown(0, ZB_SELECTION_TIME, 1, 1, 1)
	new Float:fSelectionTime = float(ZB_SELECTION_TIME)
	
	remove_task(TASK_ZOMBIE_SELECTION)
	
	new iParam[2]
	
	iParam[0] = 0 //	Created Zombie
	
	set_task(fSelectionTime , "ZombieSelection_TASK", TASK_ZOMBIE_SELECTION, iParam, 2)
}

public RoundEvent_CtWin()
{
	if (!is_zm1_on())
		return
	
	if (iGameExit)
		return
		
	new iScore = zp_get_score(TEAM_CT)
	iScore++
	zp_set_score(TEAM_CT, iScore)
	
	if (iScore > iMaxRound)
	{
		zp_force_game_exit(TEAM_CT)
		iGameExit = 1
	}
	
}

public RoundEvent_TerWin()
{
	if (!is_zm1_on())
		return
		
	if (iGameExit)
		return
		
	new iScore = zp_get_score(TEAM_TERRORIST)
	iScore++
	zp_set_score(TEAM_TERRORIST, iScore)
	
	if (iScore > iMaxRound)
	{
		zp_force_game_exit(TEAM_TERRORIST)
		iGameExit = 1
	}
	
}

public csred_PlayerSpawnPre(id)
{
	if (!is_zm1_on())
		return
		
	set_user_zombie(id, -1, 0, 0, 0)
}

public csred_PlayerSpawnPost(id)
{
	if (!is_zm1_on())
		return
	
	do_random_spawn(id)
	
	if (is_user_connected(id))
		cs_set_user_team(id, CS_TEAM_CT)
	else	fm_set_user_team(id, TEAM_CT)
	
	UT_UpdatePlayerTeam(id, 2, 1)
	
	remove_task(id + TASK_RESET_MODEL)
	set_task(0.25, "ResetModel_TASK" , id + TASK_RESET_MODEL)
	
}

public ResetModel_TASK(TASKID)
{
	new id = TASKID - TASK_RESET_MODEL
	
	if (!is_zm1_on())
		return
		
	if (!is_user_connected(id))
		return
		
	
	
	cs_reset_user_model(id)
	//cs_set_user_team(id, CS_TEAM_CT)
	
	
}

public ZombieSelection_TASK(iParam[2], TASKID)
{
	if (!is_zm1_on())
		return
		
	new iPlayers[32], iNumber, iAlivePlayer
	
	get_players(iPlayers, iAlivePlayer, "a")
	get_players(iPlayers, iNumber)
	
	
	if (iAlivePlayer < 2)
	{
		set_task(1.0 , "ZombieSelection_TASK", TASK_ZOMBIE_SELECTION, iParam, 2)
		return
	}
	
	new id = iPlayers[random(iNumber)]
	
	if (get_user_zombie(id) || !is_user_connected(id) || !is_user_alive(id))
	{
		set_task(1.0 , "ZombieSelection_TASK", TASK_ZOMBIE_SELECTION, iParam, 2)
		return
	}
	
	
	new iClassId = get_user_zombie_class(id)
	
	set_user_zombie(id, iClassId, 0, 1, 1)
	
	//	Double Hp for this Zombie
	
	new Float:fClassHealth = get_class_health(iClassId)
	
	fClassHealth += (iNumber - iParam[0]) * 1000.0
	
	if (fClassHealth > 9000.0)
		fClassHealth = 9000.0
		
	set_pev(id, pev_health, fClassHealth)
	
	//	Move Zombie to Terrorist Team
	cs_set_user_team(id, CS_TEAM_T) 
	UT_UpdatePlayerTeam(id, TEAM_TERRORIST, 1)
	
	iParam[0]++
	
	if (8 < iAlivePlayer < 16)
	{
		if (iParam[0] < 2)
		{
			set_task(0.1 , "ZombieSelection_TASK", TASK_ZOMBIE_SELECTION, iParam, 2)
			return
		}
	}
	else if (16 <= iAlivePlayer < 30)
	{
		if (iParam[0] < 3)
		{
			set_task(0.1 , "ZombieSelection_TASK", TASK_ZOMBIE_SELECTION, iParam, 2)
			return
		}
	}
	else if (30 <= iAlivePlayer) 
	{
		if (iParam[0] < 4)
		{
			set_task(0.1 , "ZombieSelection_TASK", TASK_ZOMBIE_SELECTION, iParam, 2)
			return
		}
	}
	
	for (new i = 0; i < iNumber; i++)
	{
		new iPlayer = iPlayers[i]
		
		if (iPlayer == id)
			continue
		//	Move soldiers to CT Team
		cs_set_user_team(iPlayer, CS_TEAM_CT)
		UT_UpdatePlayerTeam(iPlayer, TEAM_CT, 1)
	}
	
	zp_set_round_state(ROUND_BEGIN)
}

stock is_zm1_on()
{
	if (!zp_is_mode_on())
		return 0
		
	if (zp_get_current_gameplay() != ZB_GAMEPLAY_ZM1)
		return 0
		
	return 1
}

stock do_random_spawn(id)
{
	new iCSDM_SpawnNumber = csred_CSDM_SpawnNumber()
		
	new iSpawnMethod = random(10)
		
	if (iSpawnMethod <= 8)
	{
		if (iCSDM_SpawnNumber)
		{
			csred_DoRandomSpawn(id, 1)
			
		}
	}
	else
		csred_DoRandomSpawn(id, 0)
		
}

stock fm_set_user_team(id, iTeam)
{
	if (!is_user_connected(id))
		return
		
	set_pdata_int(id, m_iTeam, iTeam, 5)
}
