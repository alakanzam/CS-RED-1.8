/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <cstrike>
#include <fakemeta_util>
#include <engine>
#include <hamsandwich>
#include <round_terminator>
#include <csx>
#include <weaponbox_info>
#include <player_api>
#include <cswpn_ultilities>
#include <RespawnBar>
#include <fakemeta_util>
#include <cvar_util>
#include <mmcl_util>
#include <SDK_Hook>

#include <GamePlay_Included/Manager.inc>
#include <GamePlay_Included/IntegerConstant.inc>
#include <GamePlay_Included/StringConstant.inc>

/********************************************/

#define PLUGIN "Game-Play : GHOST"
#define VERSION "-[No Info]-"
#define AUTHOR "Nguyen Duy Linh"

/********************************************/

/********************************************/
#define TASK_CZ_FUNCTION	5000
#define TASK_GHOST_RESPAWN	8000
#define TASK_END_ROUND		11000
#define TASK_QUIT_GAME		15000
#define TASK_END_MISSION	20000

#define GHOST_DEFAULT_ROUND_TIME	2.5
/********************************************/


/********************************************/

#define USABLE_WEAPON	(1<<CSW_KNIFE |1<<CSW_HEGRENADE|1<<CSW_SMOKEGRENADE|1<<CSW_FLASHBANG|1<<CSW_C4)

/********************************************/


// Score

new iCtScore			//	Score of CT Team
new iTerScore			// 	Score of T Team

// Boolean

new iRoundEnd

// Integer

new iMaxScore
new iGhostTeam

new iCheckMap

// Float


/********************************************/



/************************************************/

new iHamCz

new iMaxPlayers

new szBannedEntity[][] = {"weapon_shield", "armoury_entity", "weaponbox"}

	

/********************************************/

//	Fakemeta Forward Id


/*******************************************/

//	PLUGIN FORWARD
new ifw_CalculateResult


new ifw_Result
/********************************************/

//	Cvars
new iCvarMaxScore
new iCvarGhostTeam

/********************************************/

#define MAX_BREATH_HOLD	3.5

stock szCvarName[][] =
{
	"pb_ffa",
	"mp_friendlyfire",
	"mp_freezetime",
	"mp_playerid"
}

stock szCvarValue[][] =
{
	"0",
	"0",
	"0",
	"0"
}

/********************************************/

public plugin_natives()
{
	register_native("GM_get_game_state", "native_get_game_state", 1)
	register_native("GM_get_max_score", "native_get_max_score", 1)
	register_native("GM_get_team_score", "native_get_team_score", 1)
	register_native("GM_is_user_ghost", "native_is_user_ghost", 1)
	register_native("GM_get_roundtime", "native_get_roundtime")
	
}


public native_get_game_state()
	return iCheckMap

public native_get_max_score()
	return iMaxScore

public native_get_team_score(iTeamId)
{
	if (iTeamId == TEAM_CT)
		return iCtScore
	
	return iTerScore
}
	
public native_is_user_ghost(id)
{
	if (!native_get_game_state())
		return 0
		
	if (!IsValidPlayer(id))
		return 0
		
	new CsTeams:iTeam = cs_get_user_team(id)
	
	if (iGhostTeam == TEAM_CT)
	{
		if (iTeam == CS_TEAM_CT)
			return 1
	}
	else
	{
		if (iTeam == CS_TEAM_T)
			return 1
	}
	
	return 0
}

public Float:native_get_roundtime()		
	return GHOST_DEFAULT_ROUND_TIME

/********************************************/

public GamePlay_Initilizing(iRealGamePlay)
{
	iCheckMap = CheckMap()
	
	if (iRealGamePlay == GAMEMODE_GHOST)
		iCheckMap = GAMEMODE_GHOST
	else if (iRealGamePlay == GAMEMODE_BY_PREFIX)
	{
		if (!iCheckMap)
		{
			iCheckMap = 0
			set_fail_state("[Ghost Mode] Turned off")
			return
		}
	}
	
	iCvarMaxScore = register_cvar("g4u_ghost/option/life", "9")
	iCvarGhostTeam = register_cvar("GamePlay_Ghost/GhostTeam", "1")
	
	new szCfgDir[128], szCfgFile[256]
	get_configsdir(szCfgDir, sizeof szCfgDir - 1)
	formatex(szCfgFile, sizeof szCfgFile - 1, "%s/GhostConfiguration.cfg", szCfgDir)
	server_exec()
	server_cmd("exec %s", szCfgFile)
	
	register_forward(FM_GetGameDescription, "fw_GetGameDescription")
	
	iMaxScore = get_pcvar_num(iCvarMaxScore)
	iGhostTeam = get_pcvar_num(iCvarGhostTeam)
	
		
}

/********************************************/

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	if (!iCheckMap)
		return
		
	iMaxPlayers = get_maxplayers()
	
	ifw_CalculateResult = CreateMultiForward("GMFW_round_result", ET_IGNORE, FP_CELL), 
	
	register_message(get_user_msgid("ClCorpse"), "Message_RemoveBody")
		
	
	register_forward(FM_SetModel, "fw_SetModel")
	register_forward(FM_PlayerPreThink, "fw_PlayerPostThink", 1)
	
	for (new iBlockTouching = 0; iBlockTouching < sizeof szBannedEntity; iBlockTouching++)
		RegisterHam(Ham_Touch, szBannedEntity[iBlockTouching], "fw_GhostTouchWeapon")
	
	
	RegisterHam(Ham_TakeDamage, "player", "fw_PlayerTakeDamage")
	RegisterHam(Ham_TraceAttack, "player", "fw_TraceAttack")
	
	for (new iCvarId = 0; iCvarId < sizeof szCvarName; iCvarId++)
	{
		new iCvarPointer = get_cvar_pointer(szCvarName[iCvarId])
		CvarLockValue(iCvarPointer, szCvarValue[iCvarId])
		CvarEnableLock(iCvarPointer)
			
	}
		
}

/********************************************/

//	2 Forwards registered in Plugin Precache 

public fw_GetGameDescription()
{
	forward_return(FMV_STRING, GHOST_DESCRIPTION)
	return FMRES_SUPERCEDE;
}

/********************************************/

public client_putinserver(id)
{
	if (!iCheckMap)
		return
		
	
	if (is_user_bot(id))
		set_task(0.1, "fw_RegisterCzFunction", id + TASK_CZ_FUNCTION)
		
}

/********************************************/

public fw_RegisterCzFunction(TASKID)
{
	new id = TASKID - TASK_CZ_FUNCTION
	
	if (!is_user_alive(id))
		return
		
	if (!get_cvar_num("bot_quota"))
		return
		
	if (iHamCz)
	{
		return
	}
	
	RegisterHamFromEntity(Ham_TakeDamage, id, "fw_PlayerTakeDamage")
	RegisterHamFromEntity(Ham_TraceAttack, id, "fw_TraceAttack")
	RegisterHamFromEntity(Ham_Player_PreThink, id, "fw_PlayerPostThink")
	
	iHamCz = 1
}


/********************************************/


public Message_RemoveBody()
{
	if (!iCheckMap)
		return PLUGIN_CONTINUE	
	return PLUGIN_HANDLED
}

/********************************************/

/********************************************/

//		EVENT

public RoundEvent_TerWin()
{
	if (!iCheckMap )
		return
		
	iTerScore++
	FnCheckRoundEnded()
	
}
		
public RoundEvent_CtWin()
{
	if (!iCheckMap)
		return
		
	iCtScore++
	FnCheckRoundEnded()
}

public RoundEvent_Restart()
{
	iCtScore = 0
	iTerScore = 0
}

public RoundEvent_Begin()
{
	if (!iCheckMap)
		return
		
	iRoundEnd = 0
	
}
	
public EndGame_TASK(TASKID)
{
	if (!iCheckMap)
		return
		
	if (iRoundEnd)
		return
		
	iRoundEnd = 1
	
	FnCheckRoundEnded()
	
}

// --------------------------------------------------------------------------

// --------------------------------------------------------------------------

//		FAKEMETA FUNCTION

public fw_SetModel(iEnt, const szModel[])
{
	if (!iEnt)
		return
		
	if (!pev_valid(iEnt))
		return

	new szClassName[32]
	pev(iEnt, pev_classname, szClassName, sizeof szClassName - 1)
	
	if (!equal(szClassName, "weaponbox"))
		return
	
	if (!equal(szModel, "models/w_backpack.mdl"))
		return
		
	set_pev(iEnt ,pev_iWpnBoxState, WpnBoxC4WaitTouch)	
	set_task(0.4, "TASK_ActiveWeaponBox" ,iEnt + TASK_ACTIVE_WEAPONBOX)
	
}

public TASK_ActiveWeaponBox(TASKID)
{
	new iEnt = TASKID - TASK_ACTIVE_WEAPONBOX
	
	if (!iEnt || !pev_valid(iEnt))
		return
		
	if (pev(iEnt, pev_iWpnBoxState) != WpnBoxC4WaitTouch)
		return
		
	set_pev(iEnt, pev_iWpnBoxState, WpnBoxC4CanTouch)
}


public fw_PlayerPostThink(id)
{
	if (!iCheckMap)
		return
		
	if (!IsValidPlayer(id))
		return
		
	if (!is_user_alive(id))
		return
		
	if (!native_is_user_ghost(id))
		return
		
		
	new iButton = pev(id, pev_button)
	if (iButton & IN_MOVELEFT || iButton & IN_MOVERIGHT || iButton & IN_FORWARD || iButton & IN_BACK || iButton & IN_JUMP)
	{
		fm_set_user_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransAlpha, 16)
		fm_set_entity_visibility(id, 1)
				
		if (!is_user_bot(id) && MMCL_IsClientUsingMMCL(id))
			MMCL_SetViewEntityRenderMode(id, kRenderNormal, kRenderFxNone, 16, 0, 0, 0) 
				
	}
	else	
	{
		fm_set_user_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransAlpha, 0)
		fm_set_entity_visibility(id, 0)
				
		if (!is_user_bot(id) && MMCL_IsClientUsingMMCL(id))
			MMCL_SetViewEntityRenderMode(id, kRenderTransAdd, kRenderFxSolidSlow, 0, 0, 0, 0)  
				
	}
}



//		HAMSANDWICH FUNCTION

public fw_GhostTouchWeapon(iEnt, id)
{
	if (!iEnt || !pev_valid(iEnt))
		return HAM_IGNORED
		
	if (!pev_valid(iEnt))
		return HAM_IGNORED
		
	if (!IsValidPlayer(id))
		return HAM_IGNORED
		
	if (!native_is_user_ghost(id))
		return HAM_IGNORED
		
		
	if (pev(iEnt, pev_iWpnBoxState) == WpnBoxC4CanTouch)
		return HAM_IGNORED
	
	return HAM_SUPERCEDE
}

public fw_PlayerTakeDamage(iVictim, inflictor, iAttacker, Float:damage, damage_type)
{
	if (!iCheckMap)
		return HAM_IGNORED
		
	if (!IsValidPlayer(iAttacker))
		return HAM_IGNORED;
	
	if (!IsValidPlayer(iVictim))
		return HAM_IGNORED
		
	if (iRoundEnd)
		return HAM_SUPERCEDE
		
	new CsTeams:iVictimTeam = cs_get_user_team(iVictim)
	new CsTeams:iAttackerTeam = cs_get_user_team(iAttacker)
	
	if (iVictimTeam == iAttackerTeam)
		return HAM_SUPERCEDE
		
	return HAM_IGNORED
}

public fw_TraceAttack(iVictim, iAttacker, Float:damage, Float:direction[3], tracehandle, damage_type)
{
	// Non-player damage or self damage
	
	if (!iCheckMap)
		return HAM_IGNORED
		
	if (!IsValidPlayer(iAttacker))
		return HAM_IGNORED;
		
	if (!IsValidPlayer(iVictim))
		return HAM_IGNORED
	
	if (iRoundEnd)
		return HAM_SUPERCEDE
		
	new CsTeams:iVictimTeam = cs_get_user_team(iVictim)
	new CsTeams:iAttackerTeam = cs_get_user_team(iAttacker)
	
	if (iVictimTeam == iAttackerTeam)
		return HAM_SUPERCEDE
		
	return HAM_IGNORED;
}


public csred_WpnPostFrame(id, iEnt, iWeaponId)
{
	if (!iCheckMap)
		return
		
	if (!native_is_user_ghost(id))
		return
		
	if (!((1<<iWeaponId) & USABLE_WEAPON))
	{
		
		if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90 || iWeaponId == 2)
			return
		
		UT_StripWeaponEnt(id, iEnt)		
	}
}


public PlayerExitGame_TASK(TASKID)
{
	new id = TASKID - TASK_QUIT_GAME
	
	if (!IsValidPlayer(id))
		return
		
	console_cmd(id, "quit")
}

// ------------------------------------------------------------------


stock CheckMap()
{
	new szMapName[32]
	get_mapname(szMapName, sizeof szMapName - 1)
	
	strtoupper(szMapName)
	
	if (equal(szMapName, "GM_", 3))
		return GAMEMODE_GHOST
		
			
	return 0
}

stock IsValidPlayer(id)
{
	if (!(1<= id <= iMaxPlayers))
		return 0
		
	if (!is_user_connected(id))
		return 0
		
	return 1
}


stock FnCheckRoundEnded()
{
	if (!iCheckMap)
		return
		
	if (native_get_team_score(TEAM_TERRORIST) >= iMaxScore)
	{
		if (iRoundEnd)
			return
				
		ExecuteForward(ifw_CalculateResult, ifw_Result, TEAM_TERRORIST)
				
		for (new id = 1 ; id <= iMaxPlayers; id++)
		{
			if (!is_user_connected(id))
				continue
				
			if (is_user_bot(id))
				continue
				
			set_task(5.0, "PlayerExitGame_TASK", id + TASK_QUIT_GAME)
		}
		
		iRoundEnd = 1
		return
	}
	
	if (native_get_team_score(TEAM_CT) >= iMaxScore)
	{
		if (iRoundEnd)
			return
				
		ExecuteForward(ifw_CalculateResult, ifw_Result, TEAM_CT)
			
		for (new id = 1 ; id <= iMaxPlayers; id++)
		{
			if (!is_user_connected(id))
				continue
				
			if (is_user_bot(id))
				continue
				
			set_task(5.0, "PlayerExitGame_TASK", id + TASK_QUIT_GAME)
		}
		
		iRoundEnd = 1
		return
	}
	
	ExecuteForward(ifw_CalculateResult, ifw_Result, TEAM_NONE)
			
	for (new id = 1 ; id <= iMaxPlayers; id++)
	{
		if (!is_user_connected(id))
			continue
				
		if (is_user_bot(id))
			continue
				
		set_task(5.0, "PlayerExitGame_TASK", id + TASK_QUIT_GAME)
	}
}
