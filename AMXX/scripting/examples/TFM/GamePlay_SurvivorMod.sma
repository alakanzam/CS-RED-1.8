/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta_util>
#include <cstrike>
#include <hamsandwich>

#include <RandomRespawn>
#include <SDK_Hook>
#include <player_api>
#include <infinitive_round>
#include <round_terminator>


#include <GamePlay_Included/TFM_ZombieMod.inc>
#include <GamePlay_Included/IntegerConstant.inc>


#define PLUGIN "[GAME-PLAY] Survivor Mode"
#define VERSION "-No Info-"
#define AUTHOR "Redplane"


new GAMEPLAY_NAME[] =	"Survivor Mode"
new GAMEPLAY_MAP_PREFIX[] = "sv_"

#define TASK_BOT_FUNC	1000
#define TASK_SURVIVOR_SELECTION	2000
#define TASK_RESET_MODEL	3000
#define TASK_ZOMBIE_RESPAWN	4000


new SURVIVOR_SELECTION_TIME	= 20
#define ZB_ROUND_TIME	5.0	// Minutes
#define ZB_RESPAWN_TIME	5.0	// Seconds

#define SURVIVOR_START_HP	300.0

#define MAX_DAMAGE_BONUS	10

new iCvar_MaxRound



new iMaxRound
new iGameExit
new iHamCz

//	OFFSET 

const	m_iTeam		=	114


#define SetPlayerBit(%1,%2)      (%1 |= (1<<(%2&31)))
#define ClearPlayerBit(%1,%2)    (%1 &= ~(1 <<(%2&31)))
#define CheckPlayerBit(%1,%2)    (%1 & (1<<(%2&31)))

new bit_RespawnAsZombie
new bit_IsSurvivor
/*	Integers	*/
new iBonus_Damage
new iMaxPlayers
/*	FORWARDS	*/

new ifw_BecomeSurvivor

new ifw_UpgradeDamage

//	Forward Result
new ifw_Result

public plugin_natives()
{
	register_native("SM_get_damage_plus", "nt_SM_get_damage_plus", 1)
	register_native("SM_is_user_survivor", "nt_SM_is_user_survivor", 1)
}

public nt_SM_get_damage_plus()
	return iBonus_Damage
	
public nt_SM_is_user_survivor(id)
	return CheckPlayerBit(bit_IsSurvivor, id)

public TFM_EnableRegisterGamePlay()
{
	zp_register_gameplay(ZB_GAMEPLAY_SURVIVOR, GAMEPLAY_NAME, GAMEPLAY_MAP_PREFIX, sizeof GAMEPLAY_MAP_PREFIX)
	iCvar_MaxRound = register_cvar("ZombieMod/GamePlay/SurviorMode/MaxRound", "9")
	iGameExit = 0
}

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_clcmd("drop", "clcmd_drop")
	RegisterHam(Ham_TakeDamage, "player", "fw_PlayerTakeDamage")
	RegisterHam(Ham_TraceAttack, "player", "fw_PlayerTraceAttack")
	
	
	iHamCz = 0
	
}

public plugin_cfg()
{
	if (!is_sv_on())
	{
		set_fail_state("[GAMEPLAY] Survivor Mode is turned OFF")
		return
	}
	
	iMaxRound = get_pcvar_num(iCvar_MaxRound)
	iMaxPlayers = get_maxplayers()
	
	if (!iMaxRound)
		iMaxRound = 9
		
	zp_set_max_score(iMaxRound)
	zp_set_round_time(ZB_ROUND_TIME)
	ir_block_round_end(FLAG_ALL)
	
	
	/*	Forward section		*/
	ifw_BecomeSurvivor = CreateMultiForward("SM_PlayerBecomeSurvivor", ET_IGNORE, FP_CELL)
	ifw_UpgradeDamage = CreateMultiForward("SM_UpgradeDamage", ET_IGNORE, FP_CELL)
	
	/*	Message section		*/
	register_message(get_user_msgid("ClCorpse"), "messgae_ClCorpse")
}

public client_putinserver(id)
{
	client_disconnect(id)
	
	
	if (zp_get_round_state() != ROUND_BEGIN)
		SetPlayerBit(bit_RespawnAsZombie, id)
		
	if (!is_user_bot(id))
		return
		
	if (!get_cvar_num("bot_quota"))
		return
		
	if (iHamCz)
		return
		
	remove_task(id + TASK_BOT_FUNC)
	set_task(0.1, "RegisterCzFunction_TASK", id + TASK_BOT_FUNC)
	
}

public client_disconnect(id)
{
	remove_task(id + TASK_RESET_MODEL)
	remove_task(id + TASK_ZOMBIE_RESPAWN);
	remove_task(id + TASK_BOT_FUNC);
	
	ClearPlayerBit(bit_IsSurvivor ,id);
	ClearPlayerBit(bit_RespawnAsZombie, id)
}

public RegisterCzFunction_TASK(TASKID)
{
	if (iHamCz)
		return
		
	new id = TASKID - TASK_BOT_FUNC
	
	if (!is_user_connected(id))
		return
		
	if (!is_user_bot(id))
		return
		
	if (!get_cvar_num("bot_quota"))
		return
		
	if (iHamCz)
		return
		
	RegisterHamFromEntity(Ham_TakeDamage, id, "fw_PlayerTakeDamage")
	RegisterHamFromEntity(Ham_TraceAttack, id, "fw_PlayerTraceAttack")
	iHamCz = 1
	
}

public clcmd_drop(id)
{
	if (!is_sv_on())
		return PLUGIN_CONTINUE
		
	if (zp_get_round_state() != ROUND_BEGIN)
		return PLUGIN_CONTINUE
		
	return PLUGIN_HANDLED
}

/*	Prevent player from being infected		*/
public TFM_PlayerBeingInfected(iVictim , iAttacker)
{
	if (!is_sv_on())
		return PLUGIN_CONTINUE
		
	return PLUGIN_HANDLED
}

public fw_PlayerTakeDamage(iVictim, iInflictor, iAttacker, Float:fDamage, iDamagebit)
{
	if (!is_sv_on())
		return HAM_IGNORED
		
	if (!is_user_connected(iVictim))
		return HAM_IGNORED
		
	if (!is_user_connected(iAttacker))
		return HAM_IGNORED
		
	if (get_user_zombie(iVictim) && get_user_zombie(iAttacker))
		return HAM_SUPERCEDE
		
	if (!get_user_zombie(iVictim) && !get_user_zombie(iAttacker))
		return HAM_SUPERCEDE
	
	if (!get_user_zombie(iAttacker) && get_user_zombie(iVictim))
	{
		fDamage += fDamage * (20 * iBonus_Damage) / 100
		SetHamParamFloat(4, fDamage)
	}
	
	return HAM_IGNORED
}

public fw_PlayerTraceAttack(iVictim, iAttacker, Float:fDamage, Float:fDirection[3], tracehandle, damagebits)
{
	if (!is_sv_on())
		return HAM_IGNORED
		
	if (!is_user_connected(iVictim))
		return HAM_IGNORED
		
	if (!is_user_connected(iAttacker))
		return HAM_IGNORED
		
	if (get_user_zombie(iVictim) && get_user_zombie(iAttacker))
		return HAM_SUPERCEDE
		
	if (!get_user_zombie(iVictim) && !get_user_zombie(iAttacker))
		return HAM_SUPERCEDE
		
	fDamage += fDamage * (20 * iBonus_Damage) / 100
	SetHamParamFloat(3, fDamage)
	
	return HAM_IGNORED
}


public messgae_ClCorpse()
{
	if (!is_sv_on())
		return PLUGIN_CONTINUE
		
	return PLUGIN_HANDLED
}


public RoundEvent_PreBegin()
{
	if (!is_sv_on())
		return
		
	zp_set_round_state(ROUND_END)
	set_user_countdown(0, 0, 1, 1, 1)
	iBonus_Damage = 0
	
}

public RoundEvent_Begin()
{
	if (!is_sv_on())
		return
		
	
	set_user_countdown(0, SURVIVOR_SELECTION_TIME, 1, 1, 1)
	new Float:fSelectionTime = float(SURVIVOR_SELECTION_TIME)
	
	remove_task(TASK_SURVIVOR_SELECTION)
	
	new iParam[2]
	iParam[0] = 0 // Created Survivor
	
	set_task(fSelectionTime , "SurvivorSelection_TASK", TASK_SURVIVOR_SELECTION, iParam, sizeof iParam)
	
	iBonus_Damage = 0
	upgrade_damage_plus(iBonus_Damage)
	
}

public RoundEvent_CtWin()
{
	if (!is_sv_on())
		return
	
	ClearZombieRespawnTask()
	
	if (iGameExit)
		return
		
	new iScore = zp_get_score(TEAM_CT)
	iScore++
	zp_set_score(TEAM_CT, iScore)
	
	if (iScore > iMaxRound)
	{
		zp_force_game_exit(TEAM_CT)
		iGameExit = 1
	}
	
}

public RoundEvent_TerWin()
{
	if (!is_sv_on())
		return
		
	ClearZombieRespawnTask()
	
	if (iGameExit)
		return
		
	new iScore = zp_get_score(TEAM_TERRORIST)
	iScore++
	zp_set_score(TEAM_TERRORIST, iScore)
	
	if (iScore > iMaxRound)
	{
		zp_force_game_exit(TEAM_TERRORIST)
		iGameExit = 1
	}
	
}

public RoundEvent_Restart()
{
	if (!is_sv_on())
		return
		
	ClearZombieRespawnTask()
}

public TFM_RoundEnd()
{
	if (!is_sv_on())
		return PLUGIN_CONTINUE
		
	ir_block_round_end("")
	fnForceRoundEnd(TEAM_CT)
	ir_block_round_end(FLAG_ALL)
	
	return PLUGIN_HANDLED
}

public csred_PlayerSpawnPre(id)
{
	if (!is_sv_on())
		return
		
	if (!CheckPlayerBit(bit_RespawnAsZombie, id))
		set_user_zombie(id, -1, 0, 0, 0)
	
	ClearPlayerBit(bit_IsSurvivor, id)
}

public csred_PlayerSpawnPost(id)
{
	if (!is_sv_on())
		return
	
	do_random_spawn(id)
	
	remove_task(id + TASK_RESET_MODEL)
	remove_task(id + TASK_ZOMBIE_RESPAWN)
	
	if (!CheckPlayerBit(bit_RespawnAsZombie, id))
	{
		if (is_user_connected(id))
			cs_set_user_team(id, CS_TEAM_CT)
		else	fm_set_user_team(id, TEAM_CT)
		
		UT_UpdatePlayerTeam(id, 2, 1)
		
		remove_task(id + TASK_RESET_MODEL)
		set_task(0.25, "ResetModel_TASK" , id + TASK_RESET_MODEL)
	}
	else
	{
		new iClassId = get_user_zombie_class(id)
		
		set_user_zombie(id, iClassId, 0, 1, 0)
		
		if (cs_get_user_team(id) != CS_TEAM_T)
		{
			//	Move Zombie to Terrorist Team
			
			if (is_user_connected(id))
				cs_set_user_team(id, CS_TEAM_T) 
			else	fm_set_user_team(id, TEAM_TERRORIST)
			UT_UpdatePlayerTeam(id, TEAM_TERRORIST, 1)
		}
	}
	
}

public csred_PlayerKilledPost(iVictim, iKiller)
{
	if (!is_sv_on())
		return
		
	if (zp_get_round_state() == ROUND_END)
		return
	
	/*	Survivor is killed	*/
	
	if (!get_user_zombie(iVictim))
	{
		if (fnGetHumans() < 1)
		{
			
			ir_block_round_end("")	//	No round end blocking anymore
			fnForceRoundEnd(TEAM_TERRORIST)	// Zombie Wins
			ir_block_round_end(FLAG_ALL)	// Set Round blocking again
			
			zp_set_round_state(ROUND_END)	// Make TFM_ZombieModMain know that game ends
		}
		return
	}
	
	iBonus_Damage++
	
	if (iBonus_Damage > 5)
		iBonus_Damage = 5
		
	upgrade_damage_plus(iBonus_Damage)
	
	set_task(ZB_RESPAWN_TIME, "ZombieRespawn_TASK", iVictim + TASK_ZOMBIE_RESPAWN)
}

public ZombieRespawn_TASK(TASKID)
{
	if (!is_sv_on())
		return
	
	new id = TASKID - TASK_ZOMBIE_RESPAWN
	
	if (!is_user_connected(id))
		return
		
	if (!get_user_zombie(id))
		return
		
	if (is_user_alive(id))
		return
		
	SetPlayerBit(bit_RespawnAsZombie, id)
	ExecuteHamB(Ham_CS_RoundRespawn, id)
}

public ResetModel_TASK(TASKID)
{
	new id = TASKID - TASK_RESET_MODEL
	
	if (!is_sv_on())
		return
		
	if (!is_user_connected(id))
		return
		
	
	
	cs_reset_user_model(id)
	//cs_set_user_team(id, CS_TEAM_CT)
	
	
}

public SurvivorSelection_TASK(iParam[2], TASKID)
{
	if (!is_sv_on())
		return
		
	new iPlayers[32], iNumber, iAliveNumber
	
	get_players(iPlayers, iAliveNumber, "a")
	get_players(iPlayers, iNumber)
	
	if (iAliveNumber < 2)
	{
		set_task(1.0 , "SurvivorSelection_TASK", TASK_SURVIVOR_SELECTION, iParam, sizeof iParam)
		return
	}
	
	
	new id = iPlayers[random(iNumber)]
	
	if (nt_SM_is_user_survivor(id) || get_user_zombie(id) || !is_user_connected(id) || !is_user_alive(id))
	{
		set_task(1.0 , "SurvivorSelection_TASK", TASK_SURVIVOR_SELECTION, iParam, sizeof iParam)
		return
	}

	
	/*	Survivor must be in CT Team	*/
	
	cs_set_user_team(id, CS_TEAM_CT)
	UT_UpdatePlayerTeam(id, TEAM_CT, 1)
	
	ExecuteForward(ifw_BecomeSurvivor, ifw_Result, id)
	
	new Float:flHealth = (iNumber - iParam[0]) * SURVIVOR_START_HP
	
	if (flHealth > 3000.0)
		flHealth = 3000.0
		
	iParam[0]++
	set_pev(id, pev_health, flHealth)
	
	if (8 < iAliveNumber < 16)
	{
		if (iParam[0] < 2)
		{
			set_task(0.1 , "SurvivorSelection_TASK", TASK_SURVIVOR_SELECTION, iParam, sizeof iParam)
			return
		}
	}
	else if (16 <= iAliveNumber < 30)
	{
		if (iParam[0] < 3)
		{
			set_task(0.1 , "SurvivorSelection_TASK", TASK_SURVIVOR_SELECTION, iParam, sizeof iParam)
			return
		}
	}
	else if (30 <= iAliveNumber) 
	{
		if (iParam[0] < 4)
		{
			set_task(0.1 , "SurvivorSelection_TASK", TASK_SURVIVOR_SELECTION, iParam, sizeof iParam)
			return
		}
	}
	
	for (new i = 0; i < iNumber; i++)
	{
		new iPlayer = iPlayers[i]
		
		if (iPlayer == id)
			continue
		
		/*	The rest of players will become zombie		*/
		
		new iClassId = get_user_zombie_class(iPlayer)
		
		set_user_class(iPlayer, iClassId)
		
		set_user_zombie(iPlayer, iClassId, 0, 1, 1)
		
		//	Move Zombie to Terrorist Team
		cs_set_user_team(iPlayer, CS_TEAM_T) 
		UT_UpdatePlayerTeam(iPlayer, TEAM_TERRORIST, 1)
	}
	
	zp_set_round_state(ROUND_BEGIN)
	
	
	
}

stock is_sv_on()
{
	if (!zp_is_mode_on())
		return 0
		
	if (zp_get_current_gameplay() != ZB_GAMEPLAY_SURVIVOR)
		return 0
		
	return 1
}

stock do_random_spawn(id)
{
	new iCSDM_SpawnNumber = csred_CSDM_SpawnNumber()
		
	new iSpawnMethod = random(10)
		
	if (iSpawnMethod <= 8)
	{
		if (iCSDM_SpawnNumber)
		{
			csred_DoRandomSpawn(id, 1)
			
		}
	}
	else
		csred_DoRandomSpawn(id, 0)
		
}

stock fm_set_user_team(id, iTeam)
{
	if (!is_user_connected(id))
		return
		
	set_pdata_int(id, m_iTeam, iTeam, 5)
}

stock fnForceRoundEnd(iTeamId)
{
	if (iTeamId == TEAM_TERRORIST)
		TerminateRound(RoundEndType_TeamExtermination, TeamWinning_Terrorist)
	else if (iTeamId == TEAM_CT)
		TerminateRound(RoundEndType_TeamExtermination, TeamWinning_Ct)
	else	TerminateRound(RoundEndType_Draw)
}

stock fnGetHumans()
{
	new iHumans, id
	iHumans = 0
	for (id = 1; id <= iMaxPlayers; id++)
	{
		if (is_user_alive(id) && !get_user_zombie(id))
			iHumans++
	}
	
	return iHumans;
}

stock ClearZombieRespawnTask()
{
	new iMAX_PLAYER = 33
	for (new id = 1; id < iMAX_PLAYER; id++)
	{
		remove_task(id + TASK_ZOMBIE_RESPAWN)
		ClearPlayerBit(bit_RespawnAsZombie, id)
	}
}

stock upgrade_damage_plus(iPercentage)
	ExecuteForward(ifw_UpgradeDamage, ifw_Result, iPercentage)
