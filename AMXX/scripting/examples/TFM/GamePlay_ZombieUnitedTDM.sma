/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta_util>
#include <cstrike>
#include <hamsandwich>
#include <cvar_util>
#include <infinitive_round>


#include <SDK_Hook>
#include <player_api>

#include <GamePlay_Included/TFM_ZombieMod.inc>
#include <GamePlay_Included/IntegerConstant.inc>


#define PLUGIN "[GAME-PLAY] Zombie United TDM"
#define VERSION "-No Info-"
#define AUTHOR "Redplane"


new GAMEPLAY_NAME[] =	"Zombie United [TDM]"
new GAMEPLAY_MAP_PREFIX[] = "zu1_"

#define RESPAWN_TIME	10.0

#define TASK_RESET_MODEL	3000
#define TASK_PLAYER_RESPAWN	4000

new iCvar_MaxKill
new iCvar_RoundTime



new iMaxKill
new Float:fRoundTime


new iGameExit


stock const LOCKED_CVAR[][] = {
	"mp_friendlyfire",
	"mp_freezetime"
}
	
stock const LOCKED_VALUE[][] = {
	"0",
	"0.0"
}
	
public TFM_EnableRegisterGamePlay()
{
	zp_register_gameplay(ZB_GAMEPLAY_UNITED_1, GAMEPLAY_NAME, GAMEPLAY_MAP_PREFIX, sizeof GAMEPLAY_MAP_PREFIX)
	iCvar_MaxKill = register_cvar("ZombieMod/GamePlay/ZU1/MaxKill", "150")
	iCvar_RoundTime = register_cvar("ZombieMod/GamePlay/ZU1/RoundTime", "15.0")
	
	iGameExit = 0
}

public plugin_init() 
	register_plugin(PLUGIN, VERSION, AUTHOR)

public plugin_cfg()
{
	if (!is_zu1_on())
	{
		set_fail_state("[GAMEPLAY] Zombie United [TDM] is turned OFF")
		return
	}
	
	iMaxKill = get_pcvar_num(iCvar_MaxKill)
	fRoundTime = get_pcvar_float(iCvar_RoundTime)
	
	
	if (!iMaxKill)
		iMaxKill = 150
		
	zp_set_round_time(fRoundTime)
	zp_set_max_score(iMaxKill)
	
	for (new iLockedId = 0; iLockedId < sizeof LOCKED_CVAR; iLockedId++)
	{
		new iCvarPointer = get_cvar_pointer(LOCKED_CVAR[iLockedId])
		CvarLockValue(iCvarPointer, LOCKED_VALUE[iLockedId])
		CvarEnableLock(iCvarPointer)
	}
	
	ir_block_round_end(FLAG_ALL)
	
}

public client_putinserver(id)	
	client_disconnect(id)

public client_disconnect(id)
{
	remove_task(id + TASK_RESET_MODEL)
	remove_task(id + TASK_PLAYER_RESPAWN)
}

public RoundEvent_PreBegin()
{
	if (!is_zu1_on())
		return
		
	zp_set_round_state(ROUND_END)

}

public RoundEvent_Begin()
{
	if (!is_zu1_on())
		return
		
	zp_set_round_state(ROUND_BEGIN)
	
	//	Reset the score
	zp_set_score(TEAM_CT, 0)
	zp_set_score(TEAM_TERRORIST, 0)
}

public TFM_RoundEnd()
{
	if (!is_zu1_on())
		return PLUGIN_CONTINUE
		
	new iCtScore = zp_get_score(TEAM_CT)
	new iTerScore = zp_get_score(TEAM_TERRORIST)
	
	if (iCtScore > iTerScore)
		zp_force_game_exit(TEAM_CT)
	else if (iCtScore < iTerScore)
		zp_force_game_exit(TEAM_TERRORIST)
	else	zp_force_game_exit(TEAM_NONE)
	
	return PLUGIN_HANDLED
}

public csred_PlayerSpawnPre(id)
{
	if (!is_zu1_on())
		return
	
	remove_task(id + TASK_RESET_MODEL)
	remove_task(id + TASK_PLAYER_RESPAWN)
	
	new iSpawnState = random(10)
	
	if (iSpawnState < 5)
	{
		set_user_zombie(id, -1, 0, 0, 0)
		set_task(0.25, "ResetModel_TASK" , id + TASK_RESET_MODEL)
	}
	else
	{
		new iClassId = get_user_zombie_class(id)
		set_user_zombie(id, iClassId, 0, 1, 0)
		
		//	Decrease the health of Zombie by half
		
		new Float:fHealth = get_class_health(iClassId)
		
		fHealth *= 0.5
		set_pev(id, pev_health, fHealth)
	}
}


public csred_PlayerKilledPost(iVictim, iKiller)
{
	if (!is_zu1_on())
		return
		
	if (!is_user_connected(iVictim))
		return
		
	switch (cs_get_user_team(iVictim))
	{
		case CS_TEAM_T:
			update_team_score(TEAM_CT)
		case CS_TEAM_CT:
			update_team_score(TEAM_TERRORIST)
	}
	
	remove_task(iVictim + TASK_PLAYER_RESPAWN)
	set_task(RESPAWN_TIME, "RespawnPlayer_TASK", iVictim + TASK_PLAYER_RESPAWN)
}


public ResetModel_TASK(TASKID)
{
	new id = TASKID - TASK_RESET_MODEL
	
	if (!is_zu1_on())
		return
		
	if (!is_user_connected(id))
		return
		
	
	cs_reset_user_model(id)
	
}

public RespawnPlayer_TASK(TASKID)
{
	if (!is_zu1_on())
		return
		
	new id = TASKID - TASK_PLAYER_RESPAWN
	
	if (!is_user_alive(id))
		return
		
	ExecuteHamB(Ham_CS_RoundRespawn, id)
	
}
stock is_zu1_on()
{
	if (!zp_is_mode_on())
		return 0
		
	if (zp_get_current_gameplay() != ZB_GAMEPLAY_ZM1)
		return 0
		
	return 1
}

stock fm_set_user_team(id, iTeam)
{
	if (!is_user_connected(id))
		return
		
	set_pdata_int(id, m_iTeam, iTeam, 5)
}

stock update_team_score(iTeamId)
{
	if (!is_zu1_on())
		return
	
	if (iGameExit)
		return
		
	switch (iTeamId)
	{
		case TEAM_CT:
		{
			new iScore = zp_get_score(TEAM_CT)
			iScore++
			zp_set_score(TEAM_CT, iScore)
			
			if (iScore > iMaxKill)
			{
				zp_force_game_exit(TEAM_CT)
				iGameExit = 1
			}
		}
		case TEAM_TERRORIST:
		{
			new iScore = zp_get_score(TEAM_TERRORIST)
			iScore++
			zp_set_score(TEAM_TERRORIST, iScore)
			
			if (iScore > iMaxKill)
			{
				zp_force_game_exit(TEAM_TERRORIST)
				iGameExit = 1
			}
		}
	}
}
