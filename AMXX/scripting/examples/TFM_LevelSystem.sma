/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <cstrike>
#include <csx>
#include <fakemeta>
#include <hamsandwich>

#include <engine>

#include <celltrie>

#define MAX_LEVEL 100




#define PLUGIN	"TFM LEVEL SYSTEM"
#define VERSION	"-[No Info]-"
#define AUTHOR "REDPLANE"

#define NVAULT_DIRECTORY "addons/amxmodx/data/vault"


#define TASK_CHECK_LEVEL_UP 2000





#define MAX_PLAYER 33




	


//	************ FORWARD ***************


new ifw_UserSaveLevel // Called when plugin try to save level information of a player
new ifw_UserPromoted // Called when a player is promoted
new ifw_AwardPlayerGp // Called when a plugin arward Game point to a player (IN GAME)
new ifw_AwardPlayerCoin // Called when a plugin award Coin to a player (IN GAME)
new ifw_AwardPlayerPoint	//	Called when a plugin award point to a player

new ifw_ForwardResult // Receive result of Forward

//	************ END *******************

/************** TRIE INFO *******************/

new Trie:iUserInfo[MAX_PLAYER]

//************* TRIE KEY *******************

#define SECTION_ACCOUNT	"ACCOUNT_NAME"
#define SECTION_CURRENT_LEVEL	"PLAYER_LEVEL"

#define SECTION_TOTAL_POINT	"TOTAL_POINT"
#define SECTION_TOTAL_COIN	"TOTAL_COIN"
#define SECTION_TOTAL_GP	"TOTAL_GP"

#define SECTION_AWARDED_GP	"AWARDED_GP"
#define SECTION_AWARDED_COIN	"AWARDED_COIN"
#define SECTION_AWARDED_POINT	"AWARDED_POINT"

#define SECTION_RETURN_GP	"RETURN_GP"
#define SECTION_RETURN_COIN	"RETURN_COIN"
#define SECTION_RETURN_POINT	"RETURN_POINT"

//************** END **********************

enum
{
	LINE_NONE,
	LINE_LEVEL,
	LINE_LEVEL_POINT,
	LINE_COIN,
	LINE_GP,
	LINE_AWARDED_COIN,
	LINE_AWARDED_GP
}

#define SetPlayerBit(%1,%2)      (%1 |= (1<<(%2&31)))
#define ClearPlayerBit(%1,%2)    (%1 &= ~(1 <<(%2&31)))
#define CheckPlayerBit(%1,%2)    (%1 & (1<<(%2&31)))

new bit_PlayerCanLevelUp
new bit_PlayerPromoted


public plugin_natives()
{
	register_native("TFM_get_user_level", "native_get_user_level", 1)
	
	register_native("TFM_get_user_coin", "native_get_user_coin", 1)
	register_native("TFM_set_user_coin", "native_set_user_coin", 1)
	register_native("TFM_award_user_coin", "native_award_user_coin", 1)
	
	register_native("TFM_get_user_gp", "native_get_user_gp", 1)
	register_native("TFM_set_user_gp", "native_set_user_gp", 1)
	register_native("TFM_award_user_gp", "native_award_user_gp", 1)
	
	register_native("TFM_get_max_level", "native_get_max_level", 1)
	register_native("TFM_get_level_name", "native_get_level_name", 1)
	
	register_native("TFM_save_user_level", "native_save_user_level", 1)
	register_native("TFM_load_user_level", "native_load_user_level", 1)
	
	register_native("TFM_get_user_point", "native_get_user_point", 1)
	register_native("TFM_award_user_point", "native_award_user_point", 1)
	
	register_native("TFM_get_awarded_coin", "native_get_awarded_coin", 1)
	register_native("TFM_get_awarded_gp", "native_get_awarded_gp", 1)
	register_native("TFM_get_awarded_point", "native_get_awarded_point", 1)
	
	register_native("TFM_is_user_promoted", "native_is_user_promoted", 1)
	
	register_native("TFM_get_user_account", "native_get_user_account", 1)
	register_native("TFM_set_user_account", "native_set_user_account", 1)
	
	register_native("TFM_set_gp_return", "native_set_gp_return", 1)
	register_native("TFM_set_coin_return", "native_set_coin_return", 1)
	register_native("TFM_set_point_return", "native_set_point_return", 1)
	
}


// ****************************** NATIVE **************************************

public native_get_user_level(id)
{
	if (!is_valid_player(id))
		return 0
	
	return get_int_from_key(id, SECTION_CURRENT_LEVEL)
}
public native_get_user_coin(id)
{
	if (!is_valid_player(id))
		return 0
		
	return get_int_from_key(id, SECTION_TOTAL_COIN)
}

public native_award_user_coin(id, iCoin)
{
	if (!is_valid_player(id))
		return
		
	ExecuteForward(ifw_AwardPlayerCoin, ifw_ForwardResult, id, iCoin)
	
	new iCoinReturn = get_int_from_key(id, SECTION_RETURN_COIN)
	
	if (ifw_ForwardResult != PLUGIN_CONTINUE)
	{
		new iPlayerCoin = get_int_from_key(id, SECTION_TOTAL_COIN) + iCoinReturn
		set_int_key(id, SECTION_TOTAL_COIN, iPlayerCoin)
		set_int_key(id, SECTION_AWARDED_COIN, native_get_awarded_coin(id) + iCoinReturn)
		return
	}
	
	new iPlayerCoin = get_int_from_key(id, SECTION_TOTAL_COIN) + iCoin
	set_int_key(id, SECTION_TOTAL_COIN, iPlayerCoin)
	set_int_key(id, SECTION_AWARDED_COIN, native_get_awarded_coin(id) + iCoin)
}

public native_set_user_coin(id, iCoin)
{
	if (!is_valid_player(id))
		return
		
	set_int_key(id, SECTION_TOTAL_COIN, iCoin)
}

public native_get_user_gp(id)
{
	if (!is_valid_player(id))
		return 0
		
	return get_int_from_key(id, SECTION_TOTAL_GP)
}

public native_set_user_gp(id, iGP)
{
	if (!is_valid_player(id))
		return
		
	set_int_key(id, SECTION_TOTAL_GP, iGP)
}

public native_award_user_gp(id, iGP)
{
	if (!is_valid_player(id))
		return

	ExecuteForward(ifw_AwardPlayerGp, ifw_ForwardResult, id, iGP)
	
	if (ifw_ForwardResult != PLUGIN_CONTINUE)
	{
		new iReturnGp = get_int_from_key(id, SECTION_RETURN_GP)
		
		set_int_key(id, SECTION_TOTAL_GP, native_get_user_gp(id) + iReturnGp)
		set_int_key(id, SECTION_AWARDED_GP, native_get_awarded_gp(id) + iReturnGp)
		return
	}
	
	set_int_key(id, SECTION_TOTAL_GP, native_get_user_gp(id) + iGP)
	set_int_key(id, SECTION_AWARDED_GP, native_get_awarded_gp(id) + iGP)
}

public native_get_max_level()
	return MAX_LEVEL
	
public native_get_level_name(iLevel, szLevelName[], iLen)
{
	if (iLevel < 0 || iLevel >  MAX_LEVEL - 1)
		return 0
		
	new const szLEVEL_NAME[MAX_LEVEL][] = {"Hoc Vien 1", "Hoc Vien 2",
					"Tan Binh", "Binh Bet", "Binh Nhi",
					"Binh Nhat 1", "Binh Nhat 2", "Binh Nhat 3", "Binh Nhat 4",
					"Ha Si 1", "Ha Si 2", "Ha Si 3", "Ha Si 4", "Ha Si 5", "Ha si 6",
					"Trung Si 1", "Trung Si 2", "Trung Si 3", "Trung Si 4", "Trung Si 5", "Trung Si 6",
					"Thuong Si 1", "Thuong Si 2", "Thuong Si 3", "Thuong Si 4", "Thuong Si 5", "Thuong Si 6",
					"Thieu Uy 1", "Thieu Uy 2", "Thieu Uy 3", "Thieu Uy 4", "Thieu Uy 5", "Thieu Uy 6", "Thieu Uy 7", "Thieu Uy 8",
					"Trung Uy 1", "Trung Uy 2", "Trung Uy 3", "Trung Uy 4", "Trung Uy 5", "Trung Uy 6", "Trung Uy 7", "Trung Uy 8",
					"Thuong Uy 1", "Thuong Uy 2", "Thuong Uy 3", "Thuong Uy 4", "Thuong Uy 5", "Thuong Uy 6", "Thuong Uy 7", "Thuong Uy 8",
					"Thieu Ta 1", "Thieu Ta 2", "Thieu Ta 3", "Thieu Ta 4", "Thieu Ta 5", "Thieu Ta 6", "Thieu Ta 7", "Thieu Ta 8" ,
					"Trung Ta 1", "Trung Ta 2", "Trung Ta 3", "Trung Ta 4", "Trung Ta 5", "Trung Ta 6", "Trung Ta 7", "Trung Ta 8",
					"Dai Ta 1", "Dai Ta 2", "Dai Ta 3", "Dai Ta 4", "Dai Ta 5", "Dai Ta 6", "Dai Ta 7", "Dai Ta 8",
					"Thieu Tuong 1", "Thieu Tuong 2", "Thieu Tuong 3", "Thieu Tuong 4", "Thieu Tuong 5", "Thieu Tuong 6",
					"Trung Tuong 1", "Trung Tuong 2", "Trung Tuong 3", "Trung Tuong 4", "Trung Tuong 5", "Trung Tuong 6",
					"Thuong Tuong 1", "Thuong Tuong 2", "Thuong Tuong 3", "Thuong Tuong 4", "Thuong Tuong 5", "Thuong Tuong 6",
					"Dai Tuong 1", "Dai Tuong 2", "Dai Tuong 3", "Dai Tuong 4", "Dai Tuong 5", "Dai Tuong 6",
					"Tong Tu Lenh"
					}
					
	formatex(szLevelName, iLen, szLEVEL_NAME[iLevel])
	return 1
}

public native_save_user_level(id, szAccount[])
{		
	param_convert(2)
	csred_save_level(id, szAccount)
}

public native_load_user_level(id, szAccount[])
{
	if (!is_valid_player(id))
		return
		
	param_convert(2)
	csred_load_level(id, szAccount)
}

public native_get_user_point(id)
{
	if (!is_valid_player(id))
		return 0
		
	return get_int_from_key(id, SECTION_TOTAL_POINT)
}

public native_award_user_point(id, iPoint)
{	
	if (!iPoint)
		return
	
	ExecuteForward(ifw_AwardPlayerPoint, ifw_ForwardResult, id, iPoint)
	
	
	new iPointReturn = get_int_from_key(id, SECTION_RETURN_POINT)
	
	if (ifw_ForwardResult != PLUGIN_CONTINUE)
	{
		set_int_key(id, SECTION_TOTAL_POINT, native_get_user_point(id) + iPointReturn)
		set_int_key(id, SECTION_AWARDED_POINT, native_get_awarded_point(id) + iPointReturn)
	}
	
	set_int_key(id, SECTION_TOTAL_POINT, native_get_user_point(id) + iPoint)
	set_int_key(id, SECTION_AWARDED_POINT, native_get_awarded_point(id) + iPoint)
	
	CheckLevelUp_TASK(id + TASK_CHECK_LEVEL_UP)
}


public native_get_awarded_coin(id)
{
	if (!is_valid_player(id))
		return 0
		
	return get_int_from_key(id, SECTION_AWARDED_COIN)
}

public native_get_awarded_gp(id)
{
	if (!is_valid_player(id))
		return 0
		
	return get_int_from_key(id, SECTION_AWARDED_GP)
}

public native_get_awarded_point(id)
{
	if (!is_valid_player(id))
		return 0
		
	return get_int_from_key(id, SECTION_AWARDED_POINT)
}

public native_is_user_promoted(id)
{
	if (!CheckPlayerBit(bit_PlayerPromoted, id))
		return 0
		
	return 1
}

public native_get_user_account(id, szAccount[], iLen)
{
	if (!is_valid_player(id))
		return
		
	if (!iUserInfo[id])
		return
		
	param_convert(2)
	TrieGetString(iUserInfo[id], SECTION_ACCOUNT, szAccount, iLen)
}

public native_set_user_account(id, szAccount[])
{
	if (!is_valid_player(id))
		return 0
		
	if (!iUserInfo[id])
		return 0
		
	param_convert(2)
	
	TrieSetString(iUserInfo[id], SECTION_ACCOUNT, szAccount)
	
	return 1
	
}

public native_set_gp_return(id, iGP)
{
	if (!is_valid_player(id))
		return
		
	set_int_key(id, SECTION_RETURN_GP, iGP)
}

public native_set_coin_return(id, iCOIN)
{
	if (!is_valid_player(id))
		return
		
	set_int_key(id, SECTION_RETURN_COIN, iCOIN)
}

public native_set_point_return(id, iPoint)
{
	if (!is_valid_player(id))
		return
		
	if (!iPoint)
		return
		
	set_int_key(id, SECTION_RETURN_POINT, iPoint)
}

// ****************** END OF NATIVE ********************************

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	if (!dir_exists(NVAULT_DIRECTORY)) // Directory is not exists?
		mkdir(NVAULT_DIRECTORY) // Create new one
	
	ifw_UserPromoted = CreateMultiForward("TFM_player_promoted", ET_IGNORE, FP_CELL, FP_CELL)
	ifw_AwardPlayerGp = CreateMultiForward("TFM_user_awarded_gp", ET_CONTINUE, FP_CELL, FP_CELL)
	ifw_AwardPlayerCoin = CreateMultiForward("TFM_user_awarded_coin", ET_CONTINUE, FP_CELL, FP_CELL)
	ifw_AwardPlayerPoint = CreateMultiForward("TFM_user_awarded_point", ET_CONTINUE, FP_CELL, FP_CELL)
	
	ifw_UserSaveLevel = CreateMultiForward("TFM_saving_level_info", ET_CONTINUE, FP_CELL)
		
	
}

public client_putinserver(id)
{
	if (!iUserInfo[id])
		iUserInfo[id] = TrieCreate()
		
	SetPlayerBit(bit_PlayerCanLevelUp, id);
	ClearPlayerBit(bit_PlayerPromoted, id);

	set_int_key(id, SECTION_AWARDED_GP, 0)
	set_int_key(id, SECTION_AWARDED_COIN, 0)
	
	set_int_key(id, SECTION_CURRENT_LEVEL, 0)
	set_int_key(id, SECTION_TOTAL_POINT, 0)
	
	if (is_user_bot(id))
	{
		new szName[32]
		get_user_name(id, szName, sizeof szName - 1)
		
		csred_load_level(id, szName)
	}
	
	//set_task(2.0, "CheckLevelUp_TASK", id + TASK_POINT, _, _, "b")
}
	

public client_disconnect(id)
{
	if (iUserInfo[id])
		TrieDestroy(iUserInfo[id])
}
		
public CheckLevelUp_TASK(TASKID)
{
	new id = TASKID - TASK_CHECK_LEVEL_UP
	
	if (!is_user_connected(id))
	{
		remove_task(TASKID)
		return
	}
	
	if (!CheckPlayerBit(bit_PlayerCanLevelUp, id))
	{
		remove_task(TASKID)
		return
	}
	
	new iPlayerLevel = get_int_from_key(id, SECTION_CURRENT_LEVEL)
	new iNextLevel = iPlayerLevel + 1
	
	if (iNextLevel >= MAX_LEVEL)
	{
		ClearPlayerBit(bit_PlayerCanLevelUp, id);
		remove_task(TASKID)
		return
	}
		
	if (!is_user_alive(id))
		return
		
	new iTotalPoint = get_int_from_key(id, SECTION_TOTAL_POINT)
	
	new const iLEVEL_POINT[MAX_LEVEL] = {0, 912,
				1824, 3192, 5016,
				7296, 10032, 13224, 17784,
				23940, 33060, 43092, 54036,65892, 78660,
				92340, 106932, 122436, 138852, 156180, 174420, 
				193572, 213636, 234612, 256500, 279300, 326724, 
				375972, 427044, 479940, 534660, 591204, 649572, 709764, 771780, 
				835620, 901284, 968772, 1038084, 1109220, 1182180, 1256964, 1333572,
				1412004, 1492260, 1574340, 1658244, 1743972, 1831524, 1920900, 2057700,
				2197236, 2339508, 2484516, 2632260, 2782740, 2935956, 3091908, 3277044,
				3465372, 3673536, 3885177, 4100295, 4318890, 4540962, 4776511, 5028198,
				5319183, 5614500, 5914149, 6218130, 6526500, 6839202, 7156236, 7578036,
				757803600, 767803600, 777803600, 787803600, 797803600, 807803600,
				817803600, 827803600, 837803600, 847803600, 857803600, 867803600,
				877803600, 887803600, 897803600, 907803600, 917803600, 927803600,
				937803600, 947803600, 957803600, 967803600, 977803600, 987803600,
				997803600
		}

	if (iTotalPoint >= iLEVEL_POINT[iNextLevel])
	{
		iPlayerLevel++
		set_int_key(id, SECTION_CURRENT_LEVEL, iPlayerLevel)
		iNextLevel++
		
		iTotalPoint = 0
		set_int_key(id, SECTION_TOTAL_POINT, iTotalPoint) 	
				
		ExecuteForward(ifw_UserPromoted, ifw_ForwardResult, id, iPlayerLevel)
		SetPlayerBit(bit_PlayerPromoted, id);
			
		if (iNextLevel >= MAX_LEVEL)
		{
			ClearPlayerBit(bit_PlayerCanLevelUp, id);
			remove_task(TASKID)
			return
			
		}
	}
}
					
stock csred_save_level(id, szAccount[])
{
	ExecuteForward(ifw_UserSaveLevel, ifw_ForwardResult, id)
	
	//if (ifw_ForwardResult != PLUGIN_CONTINUE)
	//	return
		
	new szAccountFile[256]
	formatex(szAccountFile, sizeof szAccountFile - 1, "%s/%s.tfm", NVAULT_DIRECTORY, szAccount)
		
	if (file_exists(szAccountFile))
		delete_file(szAccountFile)
	
	write_file(szAccountFile, "[LEVEL INFO]", LINE_NONE)
	
	new szInfo[128]
	
	new iPlayerLevel = get_int_from_key(id, SECTION_CURRENT_LEVEL)
	formatex(szInfo, sizeof szInfo - 1, "%d", iPlayerLevel)
	write_file(szAccountFile, szInfo, LINE_LEVEL)
	
	new iTotalPoint = get_int_from_key(id, SECTION_TOTAL_POINT)
	formatex(szInfo, sizeof szInfo - 1, "%d", iTotalPoint)
	write_file(szAccountFile, szInfo, LINE_LEVEL_POINT)
	
	
	new iPlayerCoin = get_int_from_key(id, SECTION_TOTAL_COIN)
	new iPlayerGp = native_get_user_gp(id)
		
	formatex(szInfo, sizeof szInfo - 1, "%d", iPlayerCoin)
	write_file(szAccountFile, szInfo, LINE_COIN)
	
	formatex(szInfo, sizeof szInfo - 1, "%d", iPlayerGp)
	write_file(szAccountFile, szInfo, LINE_GP)
	
	
	
	new iAwardedCoin = native_get_awarded_coin(id)
	new iAwardedGp = native_get_awarded_gp(id)
	
	
	formatex(szInfo, sizeof szInfo - 1, "%d", iAwardedCoin)
	write_file(szAccountFile, szInfo, LINE_AWARDED_COIN)
	
	formatex(szInfo, sizeof szInfo - 1, "%d", iAwardedGp)
	write_file(szAccountFile, szInfo, LINE_AWARDED_GP)
}

stock csred_load_level(id, szAccount[])
{
	
	if (!is_valid_player(id))
		return
		
	new szAccountFile[256]
	formatex(szAccountFile, sizeof szAccountFile - 1, "%s/%s.tfm", NVAULT_DIRECTORY, szAccount)
	
		
	if (!file_exists(szAccountFile))
		return
		
		
	new szTEXT[128], iTEXTLEN
		
	read_file(szAccountFile, LINE_LEVEL, szTEXT, sizeof szTEXT - 1, iTEXTLEN)
	set_int_key(id, SECTION_CURRENT_LEVEL,  str_to_num(szTEXT))
			
	read_file(szAccountFile, LINE_LEVEL_POINT, szTEXT, sizeof szTEXT - 1, iTEXTLEN)
	set_int_key(id, SECTION_TOTAL_POINT, str_to_num(szTEXT))
			
	read_file(szAccountFile, LINE_COIN, szTEXT, sizeof szTEXT - 1, iTEXTLEN)
	native_set_user_coin(id, str_to_num(szTEXT))
			
	read_file(szAccountFile, LINE_GP, szTEXT, sizeof szTEXT - 1, iTEXTLEN)
	native_set_user_gp(id, str_to_num(szTEXT))
	
}

stock is_valid_player(id)
{
	if (!(1<= id < MAX_PLAYER))
		return 0
		
	return 1
}

stock get_int_from_key(id, szKey[])
{
	if (!iUserInfo[id])
		return 0
		
	new iOutput
	TrieGetCell(iUserInfo[id], szKey, iOutput)
	return iOutput
}

stock set_int_key(id, szKey[], iInput)
{
	if (!iUserInfo[id])
		return
		
	TrieSetCell(iUserInfo[id], szKey, iInput)
}

	
		
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
