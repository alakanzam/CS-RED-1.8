/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>

#include <TFM_WPN>
#include <CHARACTER_MOD>

#include <fakemeta>
#include <cstrike>
#include <hamsandwich>
#include <xs>
#include <player_api>
#include <cswpn_ultilities>
#include <cstrike_pdatas>


#include <GamePlay_Included/Tools.inc>

#define PLUGIN "WEAPON MANAGER"
#define VERSION "1.0"
#define AUTHOR "Nguyen Duy Linh"

#define PRIMARY_WEAPON_BITSUMS (1<<CSW_M3 | 1<<CSW_XM1014 | 1<<CSW_SCOUT | 1<<CSW_MAC10 | 1<<CSW_AUG | 1<<CSW_UMP45 | 1<<CSW_SG550 | 1<<CSW_GALIL | 1<<CSW_FAMAS | 1<<CSW_AWP | 1<<CSW_MP5NAVY | 1<<CSW_M249 | 1<<CSW_M4A1 | 1<<CSW_TMP | 1<<CSW_G3SG1 | 1<<CSW_SG552 | 1<<CSW_AK47 | 1<<CSW_P90)
#define SECONDARY_WEAPON_BITSUMS (1<<CSW_USP | 1<<CSW_GLOCK18 | 1<<CSW_DEAGLE | 1<<CSW_P228 | 1<<CSW_ELITE | 1<<CSW_FIVESEVEN)
#define GRENADE_BITSUM ((1<<CSW_HEGRENADE)|(1<<CSW_SMOKEGRENADE)|(1<<CSW_FLASHBANG))

#define is_primary_wpn(%1)      (PRIMARY_WEAPON_BITSUMS & (1<<%1))
#define is_secondary_wpn(%1)	(SECONDARY_WEAPON_BITSUMS & (1<<%1))
#define is_grenade(%1) 		(GRENADE_BITSUM & (1<<%1))


new iRoundBegin = 0
new iHamCz = 0



#define TASK_RESET_SPEED	1000
#define TASK_FUNCTION_CZ	2000


#define SetPlayerBit(%1,%2)      (%1 |= (1<<(%2&31)))
#define ClearPlayerBit(%1,%2)    (%1 &= ~(1 <<(%2&31)))
#define CheckPlayerBit(%1,%2)    (%1 & (1<<(%2&31)))	


#define SPEED_REDUCTION_ADS	30.0
#define SPEED_REDUCTION_ZOOM	0.4
#define SPEED_REDUCTION_SPIN	10.0

new bit_IsDucked

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_event("HLTV", "EventRoundStart", "a", "1=0", "2=0")
	register_logevent("Logevent_RoundBegin" , 2 , "1=Round_Start")
		
	//register_event("CurWeapon", "Event_CurWeapon", "b", "1=1")
	//RegisterHam(Ham_Player_Duck, "player", "fw_PlayerDuck", 1)
	register_forward(FM_PlayerPostThink, "fw_PlayerPostThink")
}

public client_putinserver(id)
{
	set_task(0.1, "RegisterCzFunction_TASK", id + TASK_FUNCTION_CZ)
	//ClearPlayerBit(bit_IsDucked, id)
}
	
public RegisterCzFunction_TASK(TASKID)
{
	if (iHamCz)
		return
		
	if (!get_cvar_num("bot_quota"))
		return

	new id = TASKID - TASK_FUNCTION_CZ
	
	if (!is_user_bot(id))
		return
		
	//RegisterHamFromEntity(Ham_Item_PreFrame, id, "fw_PlayerPostThink", 1)
	//RegisterHam(Ham_Player_Duck, "player", "fw_PlayerDuck", 1)
	RegisterHamFromEntity(Ham_Think, id, "fw_PlayerPostThink", 1)
	iHamCz = 1
}

public client_disconnect(id)
{
	remove_task(id + TASK_FUNCTION_CZ)
	remove_task(id + TASK_RESET_SPEED)
	ClearPlayerBit(bit_IsDucked, id)
}

public EventRoundStart()
	iRoundBegin = 0
	
public Logevent_RoundBegin()
	iRoundBegin = 1

public fw_PlayerPostThink(id)
{
	if (!is_user_connected(id))
		return
		
	if (!is_user_alive(id))
		return
		
	new iEnt = get_pdata_cbase(id, m_pActiveItem, 5)
	
	if (!pev_valid(iEnt))
		return
		
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90 || iWeaponId == 2)
		return
		
	calculate_speed(id, iWeaponId)
}


public fw_PlayerDuck(id)
{
	if (!is_user_connected(id))
		return
		
	if (!is_user_alive(id))
		return
		
	new iWeaponId = get_user_weapon(id)
	
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90 || iWeaponId == 2)
		return
	
	if (!CheckPlayerBit(bit_IsDucked, id))
	{
		calculate_speed(id, iWeaponId)
		SetPlayerBit(bit_IsDucked, id)
	}
	
	remove_task(id + TASK_RESET_SPEED)
	set_task(0.5, "ResetMaxSpeed_TASK", id + TASK_RESET_SPEED)
}

public ResetMaxSpeed_TASK(TASKID)
{
	new id = TASKID - TASK_RESET_SPEED
	
	if (!is_user_alive(id))
		return
		
	new iWeaponId = get_user_weapon(id)
	
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90 || iWeaponId == 2)
		return
		
	calculate_speed(id, iWeaponId);
	ClearPlayerBit(bit_IsDucked, id)
}


stock calculate_speed(id, iWeaponId)
{
	if (!is_user_alive(id))
		return 0
		
	if (is_user_zombie(id))
		return 0
		
	
	new Float:fCurrentSpeed, Float:fCurrentGravity
	pev(id, pev_maxspeed, fCurrentSpeed)
	pev(id, pev_gravity, fCurrentGravity)
	
	if (!check_can_move())
	{
		set_pev(id, pev_maxspeed, 0.0)
		engfunc(EngFunc_SetClientMaxspeed, id, 0.0)
		
		return 1
	}
	
	new iFov = UT_GetPlayerFOV(id)
	
	if (iFov > 90 || iFov < 0)
		iFov = 90
	
	new CsTeams:iTeam = cs_get_user_team(id)
	
	new Float:fCharacterSpeed
	new Float:fCharacterGravity
	
	new iCharacterId = get_user_character(id)
	new iInternalModel = fm_get_player_internal_model(id)
	
	fCharacterSpeed = float(get_character_speed(iCharacterId, iTeam, iInternalModel))
	fCharacterGravity = get_character_gravity(iCharacterId, iTeam, iInternalModel)
	
	if (IsPlayerDucking(id))
	{
		if (fCurrentSpeed != fCharacterSpeed)
			set_player_speed(id, fCharacterSpeed)
			
		return 1
	}
	
	fCharacterSpeed -= (90 - iFov) * SPEED_REDUCTION_ZOOM
	
	if (is_grenade(iWeaponId))
	{
		
		new iGrenadeId = get_user_grenade(id, iWeaponId)
		
		if (iGrenadeId < 0)
			fCharacterSpeed -= UT_Get_CS_Speed(iWeaponId)
		else
		{
			fCharacterGravity -= get_grenade_weight(iGrenadeId)
			fCharacterSpeed -= get_grenade_speed(iGrenadeId)
			
		}
		
		if (fCurrentGravity != fCharacterGravity)
			set_pev(id, pev_gravity, fCharacterGravity)
			
		if (fCurrentSpeed != fCharacterSpeed)
			set_player_speed(id, fCharacterSpeed)
		
	}
	else if (is_secondary_wpn(iWeaponId))
	{
		new iSecondaryWpnId = get_user_sec_wpn(id)
		
		if (iSecondaryWpnId >= 0)
		{
			iWeaponId = iSecondaryWpnId
			
			fCharacterGravity += get_sec_wpn_weight(iWeaponId)
			fCharacterSpeed -= get_sec_wpn_speed(iWeaponId)
			
			if (sw_is_user_ads(id))
				fCharacterSpeed -= SPEED_REDUCTION_ADS
			
			if (fCharacterGravity != fCurrentGravity)	
				set_pev(id, pev_gravity, fCharacterGravity)
				
			if (fCharacterSpeed != fCurrentSpeed)
				set_player_speed(id, fCharacterSpeed)
		}
		else
		{
			fCharacterSpeed -= UT_Get_CS_Speed(iWeaponId)
			
			if (sw_is_user_ads(id))
				fCharacterSpeed -= SPEED_REDUCTION_ADS
			
			if (fCurrentGravity != fCharacterGravity)
				set_pev(id, pev_gravity, fCharacterGravity)
				
			if (fCurrentSpeed != fCharacterSpeed)
				set_player_speed(id, fCharacterSpeed)
			
			
		}
	}
	else if (iWeaponId == CSW_KNIFE)
	{
		new iMeleeId = get_user_melee(id)
		
		if (iMeleeId < 0)
		{
			fCharacterSpeed -= UT_Get_CS_Speed(iWeaponId)
			
			if (fCurrentGravity != fCharacterGravity)
				set_pev(id, pev_gravity, fCharacterGravity)
				
			if (fCurrentSpeed != fCharacterSpeed)
				set_player_speed(id, fCharacterSpeed)
				
		}
		else
		{
			
			fCharacterGravity += get_sec_wpn_weight(iMeleeId)
			fCharacterSpeed -= get_sec_wpn_speed(iMeleeId)
			
			
			if (fCurrentGravity != fCharacterGravity)	
				set_pev(id, pev_gravity, fCharacterGravity)
				
			if (fCurrentSpeed != fCharacterSpeed)
				set_player_speed(id, fCharacterSpeed)
		}
	}		
	else if (iWeaponId == CSW_C4)
	{
		
		fCharacterSpeed -= UT_Get_CS_Speed(CSW_C4)
			
		if (fCurrentGravity != fCharacterGravity)
			set_pev(id, pev_gravity, fCharacterGravity)
			
		if (fCurrentSpeed != fCharacterSpeed)
			set_player_speed(id, fCharacterSpeed)
			
	}
	if (is_primary_wpn(iWeaponId))
	{
		new iPrimaryWpnId = get_user_pw(id)
		
		
		if (iPrimaryWpnId > - 1)
		{
			iWeaponId = iPrimaryWpnId
			
			fCharacterGravity += get_pw_weight(iWeaponId)
			fCharacterSpeed -= get_pw_speed(iWeaponId)
			
			if (pw_user_attack_stage(id) != STAGE_NONE)
				fCharacterSpeed -= SPEED_REDUCTION_SPIN
			
			if (pw_is_ads(id))
				fCharacterSpeed -= SPEED_REDUCTION_ADS
			
			if (fCurrentGravity != fCharacterGravity)	
				set_pev(id, pev_gravity, fCharacterGravity)
				
			if (fCurrentSpeed != fCharacterSpeed)
				set_player_speed(id, fCharacterSpeed)
			
		}
		else
		{
			
			fCharacterGravity += UT_Get_CS_Weight(iWeaponId)
			fCharacterSpeed -= UT_Get_CS_Speed(iWeaponId)
			
			if (pw_is_ads(id))
				fCharacterSpeed -= SPEED_REDUCTION_ADS
				
			
			if (fCurrentGravity != fCharacterGravity)
				set_pev(id, pev_gravity, fCharacterGravity)
				
			if (fCurrentSpeed != fCharacterSpeed)
				set_player_speed(id, fCharacterSpeed)
				
			
		}
	}
	return 1
}
	
stock check_can_move()
{
	new iWeaponMode, iFightYard
	if (is_deathmatch_on(iWeaponMode, iFightYard))
		return iRoundBegin
			
		
	return 1
}

stock IsPlayerDucking(id)
{
	new iFlag = pev(id, pev_flags)
	
	if (!(iFlag & FL_ONGROUND))
		return 0
		
	if (!(iFlag & FL_DUCKING))
		return 0
		
	return 1
}


stock set_player_speed(id, Float:fSpeed)
{
	set_pev(id, pev_maxspeed, fSpeed)
	engfunc(EngFunc_SetClientMaxspeed, id, fSpeed)
}

stock fm_get_player_internal_model(id)
{
	#define        m_iInternalModel                                126
	
	return get_pdata_int(id, m_iInternalModel, 5)
}
