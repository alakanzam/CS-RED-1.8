/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <cstrike>
#include <hamsandwich>
#include <fakemeta_util>
#include <csx>
#include <xs>
#include <celltrie>
#include <round_terminator>
#include <SDK_Hook>
#include <cstrike_pdatas>
#include <xs>

#include <GamePlay_Included/IntegerConstant.inc>
#include <GamePlay_Included/Manager.inc>

#include <cswpn_ultilities>
#include <player_api>


#define PLUGIN "[ZOMBIE MOD] MAIN"
#define VERSION "-No Info-"
#define AUTHOR "Redplane"



#define MAX_CLASS	32
#define MAX_GAMEPLAY	10

#define ZOMBIEMOD_SOUND_DIR "TFM_Zombie" 
#define ZOMBIEMOD_MODEL_DIR	"TFM_ZombieMod"
#define GAME_CONFIGURATION_FILE	"TFM_Zombie.cfg"




/*			TASK SECTION				*/

#define TASK_CZ_FUNCTION	2000
#define TASK_COUNT_DOWN		3000
#define TASK_CLIENT_EXIT	4000

#define TASK_SPECTATOR_NVG	5000
#define TASK_ZOMBIE_NVG		6000
#define TASK_END_ROUND		7000
#define TASK_DEPLOY_WEAPON	8000
#define TASK_RESET_ZB_MODEL	9000

/*			TRIE SECTION				*/

new Trie:iZombieClassInfo[MAX_CLASS]
new Trie:iGamePlayInfo[MAX_GAMEPLAY]

/*			KEY SECTION				*/
#define KEY_USABLE_WPN	"USABLE_WPN"

/*			INFORMAITON OF GAMEPLAY			*/

#define SECTION_GP_NAME	"GAMEPLAY_NAME"
#define SECTION_GP_MAP_PREFIX	"GAMEPLAY_MAP_PREFIX"
#define SECTION_GP_GLOBAL_ID	"GAMEPLAY_GLOBAL_ID"

/*			INFORMATION OF ZOMBIE 			*/



#define SECTION_CLASSNAME "ZOMBIE_CLASSNAME"
#define SECTION_MODEL "ZOMBIE_MODEL"
#define SECTION_HAND_MODEL "ZOMBIE_HAND"

#define SECTION_HUD_DEATHMSG "ZOMBIE_HUD"
#define SECTION_HUD_HEALTH "ZOMBIE_HUD_HEALTH"
#define SECTION_HUD_GRENADE "ZOMBIE_GRENADE_HUD"

#define SECTION_CLASS_COST "ZOMBIE_COST"
#define SECTION_CLASS_COST_TYPE "ZOMBIE_COST_TYPE"

#define SECTION_SOUND_DIRECTORY "ZOMBIE_SOUND_DIRECTORY"
#define SECTION_GRENADE_NAME "ZOMBIE_GRENADE_NAME"

#define SECTION_CLASS_GENDER "ZOMBIE_GENDER"
#define SECTION_MODEL_INDEX "ZOMBIE_MODEL_INDEX"

#define SECTION_CLASS_HEALTH	"ZOMBIE_HEALTH"
#define SECTION_CLASS_GRAVITY	"ZOMBIE_GRAVITY"
#define SECTION_CLASS_KNOCKBACK	"ZOMBIE_KNOCK-BACK"
#define SECTION_CLASS_SPEED	"ZOMBIE_SPEED"
#define SECTION_CLASS_DAMAGE	"ZOMBIE_DAMAGE"
#define SECTION_CLASS_ARMOR_DMG	"ZOMBIE_ARMOR_DAMAGE"
#define SECTION_CLASS_DMG_REDUCE	"ZOMBIE_DMG_REDUCE"


#define SECTION_CLASS_NVG_ALPHA	"ZOMBIE_NVG_ALPHA"
#define SECTION_CLASS_NVG_RADIUS	"ZOMBIE_NVG_RADIUS"

#define SECTION_CLASS_NVG_R	"ZOMBIE_NVG_R"
#define SECTION_CLASS_NVG_G	"ZOMBIE_NVG_G"
#define SECTION_CLASS_NVG_B	"ZOMBIE_NVG_B"

/*****************************************************************/



/*****************************************************************/



/* -------------------------------------------------------------- */

new iGamePlay = 0
new iRoundState

new iClassRegisterEnabled
new iGamePlayRegisterEnabled
new iHamCzEnabled = 0

/*	INTEGER SECTION	*/
new iZbClassCount = 0	//	Information of registered Zombie Class
new iZbGamePlayCount = 1 //	Information of registered Game Play


new iGamePlay_Toggle = 0	//	0 - Game-Play is OFF | Positive value : Game-Play is ON

new iMAX_PLAYERS



/*	INTEGER ARRAY SECTION	*/

new iGlobal_TeamScore[3]
new iUserClassId[33]

new iMAX_SCORE

/*	FLOAT SECTION	*/
new Float:fRoundTime

/*	STRING CONSTANT	*/


// INFECTION SOUND - ONLY VICTIM CAN HEAR



// SOUND PLAYED WHEN A ZOMBIE RESPAWNS



		
enum
{
	CLASS_GENDER_MALE,
	CLASS_GENDER_FEMALE
}

enum
{
	ROUND_BEGIN,
	ROUND_END
}

/*	BIT TOOLS	*/

#define SetPlayerBit(%1,%2)      (%1 |= (1<<(%2&31)))
#define ClearPlayerBit(%1,%2)    (%1 &= ~(1 <<(%2&31)))
#define CheckPlayerBit(%1,%2)    (%1 & (1<<(%2&31)))

#define SetBit(%1,%2)      (%1[%2>>5] |= (1<<(%2 & 31)))
#define ClearBit(%1,%2)    (%1[%2>>5] &= ~(1<<(%2 & 31)))
#define CheckBit(%1,%2)    (%1[%2>>5] & (1<<(%2 & 31)))  

/*	BIT FIELD	*/
new bit_HitHead
new bit_IsZombie




/*	FORWARD		*/

new ifw_Result

new ifw_BecomeZombiePre
new ifw_BecomeZombiePost

new ifw_UserInfected
new ifw_UserArmorDamaged


new ifw_BeingInfected

new ifw_EnableRegisterGP
new ifw_EnableRegisterClass

new ifw_EndRound
new ifw_GameExited

/*	ID of FakeMeta Forward		*/
new ifm_Spawn

stock forward_register()
{
	ifw_BecomeZombiePre = CreateMultiForward("TFM_become_zombie_pre", ET_IGNORE, FP_CELL, FP_CELL, FP_CELL, FP_CELL, FP_CELL)
	ifw_BecomeZombiePost = CreateMultiForward("TFM_become_zombie_post", ET_IGNORE, FP_CELL, FP_CELL, FP_CELL, FP_CELL, FP_CELL)
	
	ifw_UserInfected = CreateMultiForward("TFM_user_infected", ET_IGNORE, FP_CELL, FP_CELL)
	ifw_UserArmorDamaged = CreateMultiForward("TFM_user_armor_damaged", ET_IGNORE, FP_CELL, FP_CELL)
	
	ifw_BeingInfected = CreateMultiForward("TFM_PlayerBeingInfected", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL)
	
	ifw_EnableRegisterGP = CreateMultiForward("TFM_EnableRegisterGamePlay", ET_IGNORE)
	ifw_EnableRegisterClass = CreateMultiForward("TFM_EnableClassRegister", ET_IGNORE)
	
	ifw_GameExited = CreateMultiForward("TFM_ZombieModExit", ET_IGNORE, FP_CELL)
	ifw_EndRound = CreateMultiForward("TFM_RoundEnd", ET_CONTINUE)
}




/*********************************************	PLUGIN NATIVE ********************************************/
		
public plugin_natives()
{
	register_native("create_zombie_class", "nt_create_zombie_class", 1)
	register_native("set_class_model", "nt_set_class_model", 1)
	register_native("set_class_hand", "nt_set_class_hand_model", 1)
	register_native("set_class_hud", "nt_set_class_hud", 1)
	register_native("set_class_health", "nt_set_class_health", 1)
	register_native("set_class_gravity", "nt_set_class_gravity", 1)
	register_native("set_class_speed", "nt_set_class_speed", 1)
	register_native("set_class_damage", "nt_set_zombie_damage", 1)
	register_native("set_class_armor_dmg", "nt_set_zombie_armor_dmg", 1)
	register_native("set_class_dmg_reduce", "nt_set_zombie_dmg_reduce", 1)
	register_native("set_class_sound", "nt_set_zombie_sound", 1)
	register_native("set_class_price", "nt_set_zombie_price", 1)
	register_native("set_class_knockback", "nt_set_zombie_knockback", 1)
	register_native("set_class_NVG", "nt_set_zombie_NVG", 1)
	register_native("set_class_gender", "nt_set_zombie_gender", 1)
	register_native("set_class_wpn_name", "nt_set_zombie_wpn_name", 1)
	register_native("set_class_wpn_hud", "nt_set_class_wpn_hud", 1)
	register_native("set_class_wpn", "nt_set_zombie_weapon", 1)
	register_native("set_class_wpn_speed", "nt_set_class_wpn_speed", 1)
	
	register_native("zp_set_score", "nt_zm_set_score", 1) 
	register_native("zp_register_gameplay", "nt_zp_register_gameplay", 1)
	register_native("zp_set_round_state", "nt_zp_set_round_state", 1)
	register_native("zp_set_round_time", "nt_zp_set_round_time", 1)
	register_native("zp_set_max_score", "nt_zp_set_max_score", 1)
	
	register_native("get_class_price", "nt_get_zombie_price", 1)
	register_native("get_class_speed", "nt_get_zombie_speed", 1)
	register_native("get_class_gravity", "nt_get_zombie_gravity", 1)
	register_native("get_class_dmg_reduce", "nt_get_class_dmg_reduce", 1)
	register_native("get_class_wpn_name", "nt_get_zombie_wpn_name", 1)
	register_native("get_class_gender", "nt_get_class_gender", 1)
	register_native("get_class_kb", "nt_get_class_kb", 1)
	register_native("get_class_health", "nt_get_class_health", 1)
	register_native("get_class_wpn_hud", "nt_get_class_wpn_hud", 1)
	register_native("get_class_hp_hud", "nt_get_class_hp_hud", 1)
	register_native("get_class_wpn", "nt_get_class_wpn", 1)
	
	register_native("zp_get_score", "nt_zm_get_score", 1)
	register_native("zp_is_mode_on", "nt_zp_is_mode_on", 1)
	register_native("zp_get_current_gameplay", "nt_zp_get_gameplay", 1)
	register_native("zp_get_round_state", "nt_zp_get_round_state", 1)
	register_native("zp_force_game_exit", "nt_zp_force_game_exit", 1) 
	register_native("zp_get_round_time", "nt_zp_get_round_time", 1)
	register_native("zp_get_max_score", "nt_zp_get_max_score", 1)
	
	register_native("find_zombie_by_model", "nt_find_zombie_by_model", 1)
	register_native("get_class_number", "nt_get_class_number", 1)
	
	/*		NATIVE FOR PLAYER	*/
	
	register_native("set_user_zombie", "nt_set_user_zombie", 1)
	register_native("get_user_zombie_class", "nt_get_user_zombie_class", 1)
	register_native("get_user_zombie", "nt_get_user_zombie", 1)
	register_native("set_user_infected", "nt_set_user_infected", 1)
	register_native("set_user_countdown", "nt_set_user_countdown", 1)
	register_native("set_user_class", "nt_set_user_class", 1)

}

/********	ZOMBIE CLASS REGISTRATION	*********/

public nt_create_zombie_class(szClassName[])
{
	if (!iClassRegisterEnabled)
		return -1
		
	if (iZbClassCount + 1 > MAX_CLASS - 1)
		return - 1
		
	param_convert(1)
	TrieSetString(iZombieClassInfo[iZbClassCount], SECTION_CLASSNAME, szClassName)
	 
	
	
	
	new iReturn = iZbClassCount
	iZbClassCount++
	
	//	Zombie can use Knife as a Claw 
	nt_set_zombie_weapon(iReturn, CSW_KNIFE, 1)
	
	
	return iReturn
}

public nt_set_class_model(iClassId, szModel[])
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0
		
	param_convert(2)
	
	new szPrecacheModel[128]
	TrieSetString(iZombieClassInfo[iClassId], SECTION_MODEL, szModel)
	
	formatex(szPrecacheModel, sizeof szPrecacheModel - 1, "models/player/%s/%s.mdl", szModel, szModel)
	
	new iModelIndex = engfunc(EngFunc_PrecacheModel, szPrecacheModel)
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_MODEL_INDEX, iModelIndex )
	
	return 1
}

public nt_set_class_hand_model(iClassId, szModel[])
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0
		
	param_convert(2)
	
	new szClawModel[128]
	formatex(szClawModel, sizeof szClawModel - 1, "models/%s/v_%s.mdl", ZOMBIEMOD_MODEL_DIR, szModel)
	TrieSetString(iZombieClassInfo[iClassId], SECTION_HAND_MODEL, szClawModel)
	engfunc(EngFunc_PrecacheModel, szClawModel)
	
	return 1
}

public nt_set_class_hud(iClassId, szHudKill[], szHpHud[])
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0
		
	param_convert(2)
	param_convert(3)
	
	TrieSetString(iZombieClassInfo[iClassId], SECTION_HUD_DEATHMSG, szHudKill)
	TrieSetString(iZombieClassInfo[iClassId], SECTION_HUD_HEALTH, szHpHud)
	
	return 1
}

public nt_set_class_health(iClassId, iHealth)
{
	if (!iZombieClassInfo[iClassId])
		return 0
		
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0
		
	if (iHealth <= 0)
		iHealth = 100
		
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_CLASS_HEALTH, float(iHealth))
	
	return 1
}

public nt_set_class_gravity(iClassId, Float:fGravity)
{
	if (!iZombieClassInfo[iClassId])
		return 0
		
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0
		
	if (fGravity < 0.0)
		fGravity = 0.0
		
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_CLASS_GRAVITY, fGravity)
	
	return 1
}

public nt_set_class_speed(iClassId, Float:fSpeed)
{
	if (!iZombieClassInfo[iClassId])
		return 0
		
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0
		
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_CLASS_SPEED, fSpeed)
	return 1
}

public nt_set_zombie_damage(iClassId, Float:fDamage)
{
	if (!iZombieClassInfo[iClassId])
		return 0
		
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0
		
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_CLASS_DAMAGE, fDamage)
	return 1
}

public nt_set_zombie_armor_dmg(iClassId, Float:fArmorDamage)
{
	if (!iZombieClassInfo[iClassId])
		return 0
		
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0
		
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_CLASS_ARMOR_DMG, fArmorDamage)
	return 1
}

public nt_set_zombie_dmg_reduce(iClassId, Float:fDmgReduce)
{
	if (!iZombieClassInfo[iClassId])
		return 0
		
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0
		
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_CLASS_DMG_REDUCE,  fDmgReduce)
	return 1
}

public nt_set_zombie_sound(iClassId, szSoundDirectory[])
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0
		
	param_convert(2)
	
	TrieSetString(iZombieClassInfo[iClassId], SECTION_SOUND_DIRECTORY, szSoundDirectory)
	
	new const AMBIENT_SOUND[][] = {"HandDraw.wav", "Hand_HitBody.wav", "Hand_HitWall.wav",
				"Hand_Slash.wav", "Hand_Stab.wav", "Zombie_Pain.wav", "Zombie_Die.wav", "Zombie_FallScream.wav"}

				
	for (new iSoundId = 0; iSoundId < sizeof AMBIENT_SOUND; iSoundId++)
	{
		new szSound[128]
		formatex(szSound, sizeof szSound - 1, "%s/%s/%s", ZOMBIEMOD_SOUND_DIR, szSoundDirectory, AMBIENT_SOUND[iSoundId])
		engfunc(EngFunc_PrecacheSound, szSound)
	}
	return 1
}

public nt_set_zombie_price(iClassId, iCostType, iCost)
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0
		
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_CLASS_COST_TYPE, iCostType)
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_CLASS_COST, iCost)
	
	return 1
}

public nt_set_zombie_knockback(iClassId, Float:fKnockBack)
{
	if (!iZombieClassInfo[iClassId])
		return 0
		
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0
		
	if (fKnockBack <= 0.0)
		fKnockBack = 1.0
		
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_CLASS_KNOCKBACK, fKnockBack)
	
	return 1
}

public nt_set_zombie_NVG(iClassId, iColor[3], iAlpha, iRadius)
{
	if (!iZombieClassInfo[iClassId])
		return
		
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return
		
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_CLASS_NVG_R,  iColor[0])
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_CLASS_NVG_G,  iColor[1])
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_CLASS_NVG_B,  iColor[2])
	
	
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_CLASS_NVG_ALPHA,  iAlpha)
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_CLASS_NVG_RADIUS,  iRadius)
}

public nt_set_zombie_gender(iClassId, iGender)
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return
		
	TrieSetCell(iZombieClassInfo[iClassId], SECTION_CLASS_GENDER, iGender)
}

public nt_set_zombie_wpn_name(iClassId, iWeaponId, szName[])
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return
	
	param_convert(3)
	
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "ZB_WEAPON-%d-NAME", iWeaponId)
	TrieSetString(iZombieClassInfo[iClassId], szKey, szName)
	
}

public nt_set_class_wpn_hud(iClassId, iWeaponId, szHud[])
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return
		
	param_convert(3)
	
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "ZB_WEAPON-%d-HUD", iWeaponId)
	TrieSetString(iZombieClassInfo[iClassId], szKey, szHud)
	
}

public nt_set_zombie_weapon(iClassId, iWeaponId, iToggle)
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return
	
	new szKey[32]
	formatex(szKey, sizeof szKey - 1, "%s-%d", KEY_USABLE_WPN, iWeaponId)
	
	if (!iToggle)
	{
		TrieDeleteKey(iZombieClassInfo[iClassId], szKey)
		return
	}
	
	TrieSetCell(iZombieClassInfo[iClassId], szKey, 1)
}

public nt_set_class_wpn_speed(iClassId, iWeaponId, iSpeed)
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "ZB_WEAPON-%d-SPEED", iWeaponId)
	TrieSetCell(iZombieClassInfo[iClassId], szKey, iSpeed)
}

public nt_zm_set_score(iTeamId, iScore)
{
	if (iTeamId != TEAM_TERRORIST && iTeamId != TEAM_CT)
		return 
		
	iGlobal_TeamScore[iTeamId] = iScore
}

public nt_zp_register_gameplay(iGamePlayGlobalId, szGamePlayName[], szMapPreFix[], iPreFixLen)
{
	if (iZbGamePlayCount > MAX_GAMEPLAY - 1)
		return -1
	
	if (!iGamePlayRegisterEnabled)
		return -1
		
	param_convert(2)
	param_convert(3)
	
	strtoupper(szMapPreFix)
	
	TrieSetString(iGamePlayInfo[iZbGamePlayCount], SECTION_GP_NAME, szGamePlayName)
	TrieSetString(iGamePlayInfo[iZbGamePlayCount], SECTION_GP_MAP_PREFIX, szMapPreFix)
	TrieSetCell(iGamePlayInfo[iZbGamePlayCount], SECTION_GP_MAP_PREFIX, iPreFixLen)
	TrieSetCell(iGamePlayInfo[iZbGamePlayCount], SECTION_GP_GLOBAL_ID, iGamePlayGlobalId)
	
	new iReturnId = iZbGamePlayCount
	iZbGamePlayCount++
	return iReturnId
}

public nt_zp_set_round_state(iState)
	iRoundState = iState
	
public nt_zp_set_round_time(Float:fRoundTimeValue)
	fRoundTime = fRoundTimeValue
	
public nt_zp_set_max_score(iMaxScore)
	iMAX_SCORE = iMaxScore
	
public nt_find_zombie_by_model(szModel[])
{
	param_convert(1)
	
	for (new iClassId = 0; iClassId < iZbClassCount; iClassId++)
	{
		new szPlayerModel[128]
		TrieGetString(iZombieClassInfo[iClassId], SECTION_MODEL, szPlayerModel, sizeof szPlayerModel - 1)
		
		if (equal(szModel, szPlayerModel))
			return iClassId
	}
	return -1
}

public nt_get_class_number()
	return iZbClassCount
	
/****************************************************************/

/********	RETRIEVE INFORMATION	**********/

public nt_get_zombie_price(iClassId, &iCostType, &iCost)
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
	{
		iCostType 	= 	-1
		iCost 	= 	-1
		return
	}
	
	TrieGetCell(iZombieClassInfo[iClassId], SECTION_CLASS_COST_TYPE, iCostType)
	TrieGetCell(iZombieClassInfo[iClassId], SECTION_CLASS_COST, iCost)
}

public Float:nt_get_zombie_speed(iClassId)
{
	#define DEFAULT_SPEED	250.0
	
	if (!iZombieClassInfo[iClassId])
		return DEFAULT_SPEED
		
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return DEFAULT_SPEED
	
	new Float:fSpeed
	TrieGetCell(iZombieClassInfo[iClassId], SECTION_CLASS_SPEED, fSpeed)
	return fSpeed
}

public Float:nt_get_class_dmg_reduce(iClassId)
{
	if (!iZombieClassInfo[iClassId])
		return 0.0
		
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0.0
	
	new Float:fDamageReduction
	TrieGetCell(iZombieClassInfo[iClassId], SECTION_CLASS_DMG_REDUCE, fDamageReduction)
	
	return fDamageReduction
}
public Float:nt_get_zombie_gravity(iClassId)
{
	if (!iZombieClassInfo[iClassId])
		return 1.0
		
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0.0
	
	new Float:fGravity
	TrieGetCell(iZombieClassInfo[iClassId], SECTION_CLASS_GRAVITY, fGravity)
	
	return fGravity
}

public nt_get_zombie_wpn_name(iClassId, iWeaponId, szName[], iLen)
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return
	
	param_convert(3)
	
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "ZB_WEAPON-%d", iWeaponId)
	TrieGetString(iZombieClassInfo[iClassId], szKey, szName, iLen)
}

public nt_get_class_gender(iClassId)
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return CLASS_GENDER_MALE
		
	return CLASS_GENDER_FEMALE
}

public Float:nt_get_class_kb(iClassId)
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0.0
		
	if (!iZombieClassInfo[iClassId])
		return 1.0
		
	new Float:fKnockBack
	TrieGetCell(iZombieClassInfo[iClassId], SECTION_CLASS_KNOCKBACK, fKnockBack)
	return fKnockBack
}

public Float:nt_get_class_health(iClassId)
{
	if (!iZombieClassInfo[iClassId])
		return 1.0
		
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 1.0
		
	new Float:fHealth
	TrieGetCell(iZombieClassInfo[iClassId], SECTION_CLASS_HEALTH, fHealth)
	return fHealth
}

public nt_get_class_wpn_hud(iClassId, iWeaponId, szHud[], iLen)
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 
		
	param_convert(3)
	new szKey[32]
	formatex(szKey, sizeof szKey - 1, "ZB_WEAPON-%d-HUD", iWeaponId)
	TrieGetString(iZombieClassInfo[iClassId], szKey, szHud, iLen)
}

public nt_get_class_hp_hud(iClassId, szHud[], iLen)
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 
		
	param_convert(2)
	TrieGetString(iZombieClassInfo[iClassId], SECTION_HUD_HEALTH, szHud, iLen)
}

public nt_get_class_wpn(iClassId, iWeaponId)
{
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		return 0
	
	
	new szKey[32]
	formatex(szKey, sizeof szKey - 1 , "%s-%d", KEY_USABLE_WPN, iWeaponId)
	
	if (TrieKeyExists(iZombieClassInfo[iClassId], szKey))
		return 1
		
	return 0
	
}

public nt_zm_get_score(iTeamId)
{
	if (iTeamId != TEAM_TERRORIST && iTeamId != TEAM_CT)
		return 0
		
	return iGlobal_TeamScore[iTeamId]
}

public nt_zp_is_mode_on()
	return iGamePlay_Toggle
	
public nt_zp_get_gameplay()
	return iGamePlay
	
public nt_zp_get_round_state()
	return iRoundState
	
public nt_zp_force_game_exit(iTeamWin)
{
	ExecuteForward(ifw_GameExited, ifw_Result, iTeamWin)
	
	new iPlayers[32], iNumber
	get_players(iPlayers, iNumber)
	
	for (new i = 0; i < iNumber; i++)
	{
		new id = iPlayers[i]
		
		remove_task(id + TASK_CLIENT_EXIT)
		set_task(2.0, "ClientExitGame_TASK", id + TASK_CLIENT_EXIT)
	}
}

public Float:nt_zp_get_round_time()
	return fRoundTime

public nt_zp_get_max_score()
	return iMAX_SCORE
	
/********	NATIVE FOR PLAYER	**************/

public nt_set_user_zombie(id, iClassId, iUpdateClass, iUpdateUserInfo, iNotification)
{
	if (!nt_zp_is_mode_on())	
	{
		return 0
	}
		
	if (!is_user_connected(id))
	{
		return 0
	}
	
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
	{
		ClearPlayerBit(bit_IsZombie, id)
		return 0
	}
	
	if (iUpdateClass)
		iUserClassId[id] = iClassId
	
	if (iUpdateUserInfo)
	{
		
		ExecuteForward(ifw_BecomeZombiePre, ifw_Result, id, iClassId, iUpdateClass, iUpdateUserInfo, iNotification)
		
		UT_DropPrimaryWeapon(id) //	Drop primary weapons of player
		UT_DropSecondaryWeapon(id) // Drop secondary weapons of player
		fm_strip_user_weapons(id) // Make sure that we strip all weapons of player, include : grenades, bombs, knives,....
		
		SetPlayerBit(bit_IsZombie, id)
		new iWeaponEnt = fm_give_item(id, "weapon_knife") // Give claw to this player 
		engclient_cmd(id, "weapon_knife") // Deploy the claw
		
		ExecuteHamB(Ham_Item_Deploy, iWeaponEnt)
		
		update_claw_model(id, iClassId)
		UT_SendCurWeaponMsg(id, 1, CSW_KNIFE, 1, 1) // Send this message to announces another plugins that : player is holding a knife
		
		/*
		if (task_exists(id + TASK_BOT_USE_SKILL))
			remove_task(id + TASK_BOT_USE_SKILL)
		if (is_user_bot(id))
			set_task(random_float(1.0, 10.0), "BotUseSkill", id + TASK_BOT_USE_SKILL)
		*/
		
		UT_SetPlayerFOV(id, 90) // Reset player's Field of View
		
		/*	Change the appearance of player	*/
		
		new szModel[128]
		TrieGetString(iZombieClassInfo[iClassId], SECTION_MODEL, szModel, sizeof szModel - 1)
		fm_set_user_model(id, szModel)
		cs_set_user_model(id, szModel)
			
		set_pev(id, pev_maxspeed, nt_get_zombie_speed(iClassId)) // Set speed to player
		set_pev(id, pev_gravity, nt_get_zombie_gravity(iClassId)) // Set gravity to player
		set_pev(id, pev_health, nt_get_class_health(iClassId))	// Set Hp to player
		
		cs_set_user_armor(id, 0, CS_ARMOR_NONE) // Reset armor to 0
		
		set_pev(id, pev_effects, pev(id, pev_effects) & ~EF_DIMLIGHT) // Make sure that we turn off the flashlight (Zombie cant use flashlight)
		
		UT_SetUserNVG_State(id, 0, 1) // Remove nightvision goggles
	
		/*	Play infection sound to player who is infected	*/
		
		new szSound[128]
		
		
		
		switch (nt_get_class_gender(iClassId))
		{
			case CLASS_GENDER_MALE :
			{
				new const InfectionSound_Male[][] = {"INFECTED_MALE_1.wav", "INFECTED_MALE_2.wav"}
				
				new iRandomSound = random(sizeof InfectionSound_Male)
			
				formatex(szSound, 127, "%s/%s", ZOMBIEMOD_SOUND_DIR, InfectionSound_Male[iRandomSound])
			
				client_cmd(id, "spk %s", szSound)
			}
			case CLASS_GENDER_FEMALE :
			{
				new const InfectionSound_Female[][] = {"INFECTED_FEMALE_1.wav", "INFECTED_FEMALE_2.wav"}
				
				new iRandomSound = random(sizeof InfectionSound_Female)
				
				formatex(szSound, 127, "%s/%s", ZOMBIEMOD_SOUND_DIR, InfectionSound_Female[iRandomSound])
				
				client_cmd(id, "spk %s", szSound)
			}
		}
		
		ExecuteForward(ifw_BecomeZombiePost, ifw_Result, id, iClassId, iUpdateClass, iUpdateUserInfo, iNotification)
	}
	
	if (iNotification)
	{
		/*	Play infection sound to player who is soldier	*/
		new iPlayers[32], iNumber
		get_players(iPlayers, iNumber, "ac")	

		new const APPEARANCE_SOUND[][] = {"ZB_APPEAR_1.wav", "ZB_APPEAR_2.wav", "ZB_APPEAR_3.wav", "ZB_APPEAR_4.wav", "ZB_APPEAR_5.wav"}
		
		for (new i = 0; i < iNumber; i++)
		{
			if (iPlayers[i] == id)
				continue
			
			new iRandomSound = random(sizeof APPEARANCE_SOUND)
			
			new szAppearanceSound[128]
			formatex(szAppearanceSound, sizeof szAppearanceSound - 1, "%s/%s", ZOMBIEMOD_SOUND_DIR,  APPEARANCE_SOUND[iRandomSound])
			client_cmd(iPlayers[i], "spk %s", szAppearanceSound)
		}
	}
	
	
	
	return 1
}

public nt_get_user_zombie_class(id)
{
	if (iUserClassId[id] < 0 || iUserClassId[id] > iZbClassCount - 1)
		iUserClassId[id] = 0
	return iUserClassId[id]
}

public nt_get_user_zombie(id)
	return CheckPlayerBit(bit_IsZombie, id)
	
public nt_set_user_infected(iInfector, iVictim, iNotification)
{
	if (!nt_zp_is_mode_on())
		return 0
		
	if (!is_user_connected(iVictim))
		return 0
		
	if (nt_get_user_zombie(iVictim))
		return 0
		
	new iClassId = nt_get_user_zombie_class(iVictim)
	
	new iUpdateClassId = 0
	
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
	{
		iClassId = 0
		iUpdateClassId = 1
	}
	
	cs_set_user_team(iVictim, CS_TEAM_T)
	UT_UpdatePlayerTeam(iVictim, TEAM_TERRORIST, 1)
	
	nt_set_user_zombie(iVictim, iClassId, iUpdateClassId, 1, 1)
	
	if (iNotification)
	{
		new szHudKill[32]
		TrieGetString(iZombieClassInfo[iClassId], SECTION_HUD_DEATHMSG, szHudKill, sizeof szHudKill - 1)
		make_deathmsg(iInfector, iVictim, 0, szHudKill)
		UT_RemoveDeathFrag(iVictim, 0)
	}
	
	ExecuteForward(ifw_UserInfected, ifw_Result, iInfector, iVictim)
	return 1
	
}

public nt_set_user_countdown(iPlayerId, iTotalTime, iCycle, iPlaySound, iState)
{
	if (!iState)
	{
		remove_task(iPlayerId + TASK_COUNT_DOWN)
		return
	}
	
	new iParam[4]
	iParam[0] = iTotalTime
	iParam[1] = iCycle
	iParam[2] = iPlaySound
	
	remove_task(iPlayerId + TASK_COUNT_DOWN)
	
	TASK_CountDown(iParam, iPlayerId + TASK_COUNT_DOWN)
}

public nt_set_user_class(id, iClassId)
{
	if (!is_user_connected(id))
		return 
		
	iUserClassId[id] = iClassId
		
}


public GamePlay_Initilizing(iCurrentGamePlay)
{
	forward_register()
	/*	Enable zombie game-play registration	*/
	
	for (new iGamePlayId = 1; iGamePlayId < MAX_GAMEPLAY; iGamePlayId++)
	{
		if (iGamePlayInfo[iGamePlayId])
			continue
			
		iGamePlayInfo[iGamePlayId] = TrieCreate()
	}
	
	
	
	iGamePlayRegisterEnabled = 1
	ExecuteForward(ifw_EnableRegisterGP, ifw_Result)
	iGamePlayRegisterEnabled = 0
		
	if (iCurrentGamePlay == GAMEMODE_ZM)
	{
		iGamePlay_Toggle = 1
		
		new szGameModeCfg[256], szCfgDir[64]
		
		get_configsdir(szCfgDir, sizeof szCfgDir - 1)
		formatex(szGameModeCfg, sizeof szGameModeCfg - 1, "%s/ZombieGameMode.cfg", szCfgDir)
		
		if (file_exists(szGameModeCfg))
		{
			new szTextInfo[32], iTextLen
			read_file(szGameModeCfg, 0, szTextInfo, sizeof szTextInfo - 1 , iTextLen)
			iGamePlay =  str_to_num(szTextInfo) 
			
			if (!iGamePlay)
			{
				iGamePlay_Toggle = 0
				pause("a")
				return
			}
		}
	}
	else if (iCurrentGamePlay == GAMEMODE_BY_PREFIX)
	{	
		new szMapName[32]
		get_mapname(szMapName, sizeof szMapName - 1)
		iGamePlay_Toggle = is_map_suitable(szMapName)
		
		if (!iGamePlay_Toggle )
		{
			pause("a")
			return
		}
		
		register_gameplay_id(GAMEMODE_ZM)
		TrieGetCell(iGamePlayInfo[iGamePlay_Toggle], SECTION_GP_GLOBAL_ID, iGamePlay)
	}
	else
	{
		for (new iGamePlayId = 1; iGamePlayId < MAX_GAMEPLAY; iGamePlayId++)
		{
			if (iGamePlayInfo[iGamePlayId])
				continue
				
			TrieDestroy(iGamePlayInfo[iGamePlayId])
		}
		return
	}
	
	/*	Enable zombie class registration	*/
	
	for (new iClassId = 0; iClassId < MAX_CLASS ; iClassId++)
	{
		if (iZombieClassInfo[iClassId])
			continue
			
		iZombieClassInfo[iClassId] = TrieCreate()
	}
	
	iClassRegisterEnabled = 1
	ExecuteForward(ifw_EnableRegisterClass, ifw_Result)
	iClassRegisterEnabled = 0
	
	if (!ifm_Spawn)
		ifm_Spawn = register_forward(FM_Spawn, "fw_MissionEntitySpawn")
		
	register_forward(FM_GetGameDescription, "fw_GetGameDescription")
}

public fw_MissionEntitySpawn(entity)
{
	if (!nt_zp_is_mode_on())
		return FMRES_IGNORED;
		
	// Invalid entity
	if (!pev_valid(entity)) return FMRES_IGNORED;
	
	// Get classname
	new classname[32]
	pev(entity, pev_classname, classname, sizeof classname - 1)
	
	new MISSION_ENTITY[][] = {"func_bomb_target", "info_bomb_target", "info_vip_start", "func_vip_safetyzone", "func_escapezone", "hostage_entity",
		"monster_scientist", "func_hostage_rescue", "info_hostage_rescue"}

	// Check whether it needs to be removed
	for (new i = 0; i < sizeof MISSION_ENTITY; i++)
	{
		if (equal(classname, MISSION_ENTITY[i]))
		{
			engfunc(EngFunc_RemoveEntity, entity)
			return FMRES_SUPERCEDE;
		}
	}
	
	return FMRES_IGNORED;
}

public fw_GetGameDescription()
{
	if (!nt_zp_is_mode_on())
		return FMRES_IGNORED;
		
	new szGamePlayName[32]
	TrieGetString(iGamePlayInfo[iGamePlay_Toggle], SECTION_GP_NAME, szGamePlayName, sizeof szGamePlayName - 1)
	forward_return(FMV_STRING, szGamePlayName)
	return FMRES_SUPERCEDE;
}





public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	if (!nt_zp_is_mode_on())
		return 
		
	iMAX_PLAYERS = get_maxplayers()
	
	
	
	new szCfgDir[32], szCfgFile[128]
	get_configsdir(szCfgDir, sizeof szCfgDir - 1)
	formatex(szCfgFile, sizeof szCfgFile - 1, "%s/%s", szCfgDir, GAME_CONFIGURATION_FILE)
	
	server_exec()
	server_cmd("exec %s", szCfgFile)
	server_exec()
	
		
	register_clcmd("nightvision", "clcmd_NightVisionToggle")
	
	unregister_forward(FM_Spawn, ifm_Spawn)
	
	
	register_forward(FM_ClientUserInfoChanged, "fw_ClientUserInfoChanged", 1)
	register_forward(FM_SetModel, "fw_SetModelPost", 1)
	
	RegisterHam(Ham_TakeDamage, "player", "fw_PlayerTakeDamage")
	RegisterHam(Ham_TraceAttack, "player", "fw_PlayerTraceAttack", 1)
}


public client_putinserver(id)
{
	if (!nt_zp_is_mode_on())
		return
		
	remove_task(id + TASK_CLIENT_EXIT)
	remove_task(id + TASK_CZ_FUNCTION)
	remove_task(id + TASK_COUNT_DOWN)
	remove_task(id + TASK_SPECTATOR_NVG)
	remove_task(id + TASK_ZOMBIE_NVG)
	remove_task(id + TASK_DEPLOY_WEAPON)
	remove_task(id + TASK_RESET_ZB_MODEL)
	
	iUserClassId[id] = 0
	
	if (iHamCzEnabled)
		return 
		
	set_task(0.1, "RegisterCzBotFunc_TASK", id + TASK_CZ_FUNCTION)
}

public client_disconnect(id)
{
	if (!nt_zp_is_mode_on())
		return
		
	remove_task(id + TASK_CLIENT_EXIT)
	remove_task(id + TASK_CZ_FUNCTION)
	remove_task(id + TASK_COUNT_DOWN)
	remove_task(id + TASK_SPECTATOR_NVG)
	remove_task(id + TASK_ZOMBIE_NVG)
	remove_task(id + TASK_DEPLOY_WEAPON)
	remove_task(id + TASK_RESET_ZB_MODEL)
}
/*				CLIENT COMMAND					*/

public clcmd_NightVisionToggle(id)
{
	if (!nt_zp_is_mode_on())
		return PLUGIN_CONTINUE
		
	if (!is_user_connected(id))
		return PLUGIN_CONTINUE
		
	if (is_user_bot(id))
		return PLUGIN_HANDLED
		
	if (!is_user_alive(id))
	{	
		new CsTeams:iTeam = cs_get_user_team(id)
			
		if (iTeam != CS_TEAM_SPECTATOR && iTeam != CS_TEAM_CT && iTeam != CS_TEAM_T)
			return PLUGIN_CONTINUE
						
		if (!task_exists(id + TASK_SPECTATOR_NVG))
		{
			remove_task(id + TASK_SPECTATOR_NVG)
			set_task(0.2, "SpectatorNightVision_TASK", id + TASK_SPECTATOR_NVG, _, _, "b")
		}
		else
			remove_task(id + TASK_SPECTATOR_NVG)
			
		return PLUGIN_HANDLED
	}
	else
	{
		if (!nt_get_user_zombie(id))
			return PLUGIN_CONTINUE
			
		if (!task_exists(id + TASK_ZOMBIE_NVG))
		{
			remove_task(id + TASK_ZOMBIE_NVG)
			set_task(0.2, "ZombieNightVision_TASK", id + TASK_ZOMBIE_NVG, _, _, "b")
		}
		else
		{
			remove_task(id + TASK_ZOMBIE_NVG)
		}
			
		return PLUGIN_HANDLED
			
	}
	
	return PLUGIN_CONTINUE
}

/*				FORWARDS OF SDK HOOK				*/

public RoundEvent_Begin()
{
	if (!nt_zp_is_mode_on())
		return
		
	remove_task(TASK_END_ROUND)
	
	set_task(fRoundTime * 60.0, "EndRound_TASK", TASK_END_ROUND)
}

/*				CSWPN ULTILITIES FORWARD			*/

public csred_WpnAttachToPlayerPost(id, iEnt, iWeaponId)
{
	if (!nt_zp_is_mode_on())
		return PLUGIN_CONTINUE
		
	if (!nt_get_user_zombie(id))
		return PLUGIN_CONTINUE
		
	new iClassId = nt_get_user_zombie_class(id)
	
	if (!nt_get_class_wpn(iClassId, iWeaponId))
	{
		UT_StripWeaponEnt(id, iEnt)
		return PLUGIN_HANDLED
	}
	return PLUGIN_CONTINUE
}

/*				FAKEMETA FUNCTION				*/
public fw_ClientUserInfoChanged(id)
{
	if (!nt_get_user_zombie(id))
		return 
		
	new iClassId = nt_get_user_zombie_class(id)
	
	new szCurrentModel[64], szClassModel[64]
	
	fm_get_user_model(id, szCurrentModel, sizeof szCurrentModel - 1)
	TrieGetString(iZombieClassInfo[iClassId], SECTION_MODEL, szClassModel, sizeof szClassModel - 1)
	
	if (equal(szClassModel, szCurrentModel))
		return
		
	remove_task(id + TASK_RESET_ZB_MODEL)
	set_task(0.15, "ResetClassModel_TASK", id + TASK_RESET_ZB_MODEL)
}

public fw_SetModelPost(iEnt, szModel[])
{
	if (!nt_zp_is_mode_on())
		return 
		
	if (!iEnt || !pev_valid(iEnt))
		return
		
	new szClassName[32]
	pev(iEnt, pev_classname, szClassName, sizeof szClassName - 1)
	
	if (equal(szClassName, "weaponbox") || equal(szClassName, "weapon_shield"))
		set_pev(iEnt, pev_nextthink, get_gametime() + 5.0)
		
}
/*				HAMSANDWICH FUNCTION				*/

public fw_PlayerTakeDamage(iVictim, iInflictor, iAttacker, Float:fDamage, iDamageBit)
{
	if (!nt_zp_is_mode_on())
		return HAM_IGNORED
		
	if (nt_zp_get_round_state() == ROUND_END)
		return HAM_SUPERCEDE
		
	if (!is_user_connected(iAttacker) || !is_user_connected(iVictim))
		return HAM_IGNORED
		
	new CsTeams:iAttackerTeam = cs_get_user_team(iAttacker)
	new CsTeams:iVictimTeam = cs_get_user_team(iVictim)
	
	// Not allow Teamate to kill each other
	if (iAttackerTeam == iVictimTeam)
		return HAM_SUPERCEDE
	
	#define DMG_GRENADE	(1<<24)
	
	if (iDamageBit & DMG_GRENADE)
		return HAM_SUPERCEDE
		
	new iClassId_Victim = nt_get_user_zombie_class(iVictim)
	new iClassId_Attacker = nt_get_user_zombie_class(iAttacker)
	
	// Soldier attacks Zombie
	if (!nt_get_user_zombie(iAttacker) && nt_get_user_zombie(iVictim))
	{	
		fDamage *= (100.0 - nt_get_class_dmg_reduce(iClassId_Victim))/100.0
		SetHamParamFloat(4, fDamage)
		return HAM_IGNORED
	}
	else if (nt_get_user_zombie(iAttacker) && !nt_get_user_zombie(iVictim))// Zombie attacks Soldier
	{
		//	Check this , because I don't want grenade or bullet can cause infected
		
		
		new CsArmorType:iArmorType
		new iArmor = cs_get_user_armor(iVictim, iArmorType)
		new Float:fArmor = float(iArmor)
		
		new iDoInfection = 0
		
		//	Attacker scratches victim's head, the victim doesn't have Helmet
		if (CheckPlayerBit(bit_HitHead, iVictim) && iArmorType != CS_ARMOR_VESTHELM)
		{
			iDoInfection = 1;
			ClearPlayerBit(bit_HitHead, iVictim)
		}
		
		new Float:fArmorDmg_Attacker
		TrieGetCell(iZombieClassInfo[iClassId_Attacker], SECTION_CLASS_ARMOR_DMG, fArmorDmg_Attacker)
		fArmor -= fArmorDmg_Attacker
		
		if (fArmor >= 0.0)
		{
			set_pev(iVictim, pev_armorvalue, fArmor)
			ExecuteForward(ifw_UserArmorDamaged, ifw_Result, iAttacker, iVictim)
			iDoInfection = 0
			return HAM_SUPERCEDE
		}
		else
		{
			iDoInfection = 1
		}
		
		new iZombieNumber, iSoldierNumber
		fnGetPlayerNumber(iZombieNumber, iSoldierNumber)
		
		//	The victim is the last soldier
		if (iSoldierNumber == 1)
		{
			iDoInfection = 2
		}
		
		if (iDoInfection)
		{
			ExecuteForward(ifw_BeingInfected, ifw_Result, iVictim, iAttacker, iDoInfection)
			
			if (ifw_Result == PLUGIN_CONTINUE)
			{
				switch (iDoInfection)
				{
					case 1:
						nt_set_user_infected(iAttacker, iVictim, 1)
					case 2:
					{
						nt_set_user_infected(iAttacker, iVictim, 1)
						fnForceRoundEnd(TEAM_TERRORIST)
					}
				}
				return HAM_SUPERCEDE
			}
			
				
		}
		
		new Float:fDamage_Attacker
		TrieGetCell(iZombieClassInfo[iClassId_Attacker], SECTION_CLASS_DAMAGE, fDamage_Attacker)
		
		SetHamParamFloat(4, fDamage_Attacker)
		
		return HAM_IGNORED
	}
	else
	{
		//	Zombies attack each other
		
		new Float:fDamage_Attacker
		TrieGetCell(iZombieClassInfo[iClassId_Attacker], SECTION_CLASS_DAMAGE, fDamage_Attacker)
		
		new Float:fDamage_Reduction = nt_get_class_dmg_reduce(iClassId_Victim)
		new Float:fPercentage = (100.0 - fDamage_Reduction) / 100
		new Float:fDamage = fDamage_Attacker * fPercentage
		SetHamParamFloat(4, fDamage)
	}
	return HAM_IGNORED
}

public fw_PlayerTraceAttack(iVictim, iAttacker, Float:fDamage, Float:fDirection[3], tracehandle, iDamageBit)
{
	if (!nt_zp_is_mode_on())
		return HAM_IGNORED
		
	if (nt_zp_get_round_state() == ROUND_END)
		return HAM_SUPERCEDE
		
	if (!is_user_connected(iAttacker) || !is_user_connected(iVictim))
		return HAM_IGNORED
		
	new CsTeams:iAttackerTeam = cs_get_user_team(iAttacker)
	new CsTeams:iVictimTeam = cs_get_user_team(iVictim)
	
	if (iAttackerTeam == iVictimTeam)
		return HAM_SUPERCEDE
	
	
	if (get_tr2(tracehandle, TR_iHitgroup) == HIT_HEAD)
		SetPlayerBit(bit_HitHead, iVictim)
		
	return HAM_IGNORED
}


public csred_WpnDeploy_Post(id, iEnt, iWeaponId)
{
	if (!nt_zp_is_mode_on())
		return
		
	if (!nt_get_user_zombie(id))
		return
		
	if (iWeaponId != CSW_KNIFE)
		return
		
	new iClassId = nt_get_user_zombie_class(id)
	
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
		iClassId = 0
		
		
	remove_task(id + TASK_DEPLOY_WEAPON)
	
	new iParam[3]
	iParam[0] = iEnt
	iParam[1] = iWeaponId
	iParam[2] = iClassId
	
	set_task(0.1, "DeployWeapon_TASK", id + TASK_DEPLOY_WEAPON, iParam, 3)
	
	
}
/*				TASK SECTION			*/

public ClientExitGame_TASK(TASKID)
{
	if (!nt_zp_is_mode_on())
		return
		
	new id = TASKID - TASK_CLIENT_EXIT
	
	console_cmd(id, "quit")
	client_cmd(id, "quit")
}

public RegisterCzBotFunc_TASK(TASKID)
{
	if (!nt_zp_is_mode_on())
		return
		
	new id = TASKID - TASK_CZ_FUNCTION
	
	if (iHamCzEnabled)
		return
		
	if (!is_user_bot(id))
		return
		
	if (!get_cvar_num("bot_quota"))	
		return
		
	RegisterHamFromEntity(Ham_TakeDamage, id, "fw_PlayerTakeDamage")
	RegisterHamFromEntity(Ham_TraceAttack, id, "fw_PlayerTraceAttack", 1)
	iHamCzEnabled = 1
	return
}

public TASK_CountDown(iParam[4], TASKID)
{
	if (!nt_zp_is_mode_on())
		return
		
	new iPlayerId = TASKID - TASK_COUNT_DOWN
	
	new iTotalTime = iParam[0]
	
	if (!iTotalTime)
		return
		
	new iCycle = iParam[1]
	new iPlaySound = iParam[2] 
	new Float:fCycle = float(iCycle)
	
	client_print(iPlayerId, print_center, "%L", LANG_PLAYER, "ZOMBIE_APPEAR_IN", iTotalTime)
	
	if (iPlaySound)
	{
		new szSound[128]
		formatex(szSound, sizeof szSound - 1, "%s/CountDown/%d.wav", ZOMBIEMOD_SOUND_DIR, iTotalTime)
		
		if (file_exists(szSound))	client_cmd(iPlayerId, "spk %s", szSound)
	}
	
	iTotalTime -= iCycle
	
	
	iParam[0] = iTotalTime
	iParam[1] = iCycle
	iParam[2] = iPlaySound
	
	set_task(fCycle, "TASK_CountDown", iPlayerId + TASK_COUNT_DOWN, iParam, sizeof iParam)
}

public SpectatorNightVision_TASK(TASKID)
{
	if (!nt_zp_is_mode_on())
		return
		
	new id = TASKID - TASK_SPECTATOR_NVG
	
	if (!is_user_connected(id))
		return
		
	if (is_user_alive(id))
	{
		remove_task(TASKID)
		return
	}
	
	new CsTeams:iTeam = cs_get_user_team(id)
	
	if (iTeam != CS_TEAM_CT && iTeam != CS_TEAM_T && iTeam != CS_TEAM_SPECTATOR)
	{
		remove_task(TASKID)
		return
	}
	
	new iOrigin[3]
	get_user_origin(id, iOrigin, 0)
	
	new SPECTATOR_NVG_COLOR[] = {158, 250, 245}
	#define SPECTATOR_NVG_RADIUS 45
	#define SPECTATOR_NVG_ALPHA 70
	
	draw_light(id, iOrigin, SPECTATOR_NVG_RADIUS, SPECTATOR_NVG_COLOR)
	
}

public ZombieNightVision_TASK(TASKID)
{
	if (!nt_zp_is_mode_on())
		return
		
	new id = TASKID - TASK_ZOMBIE_NVG
	
	if (!is_user_alive(id))
	{
		remove_task(TASKID)
		return
	}
	
	if (!nt_get_user_zombie(id))
	{
		remove_task(TASKID)
		return
	}
	
	new iOrigin[3]
	get_user_origin(id, iOrigin, 0)
	
	new iClassId = nt_get_user_zombie_class(id)
	
	if (!iZombieClassInfo[iClassId])
		return
	
	if (iClassId < 0 || iClassId > iZbClassCount - 1)
	{
		remove_task(TASKID)
		return
	}
		
	new iRadius
	TrieGetCell(iZombieClassInfo[iClassId], SECTION_CLASS_NVG_RADIUS, iRadius)
		
	new iColor[3]
	TrieGetCell(iZombieClassInfo[iClassId], SECTION_CLASS_NVG_R, iColor[0])
	TrieGetCell(iZombieClassInfo[iClassId], SECTION_CLASS_NVG_G, iColor[1])
	TrieGetCell(iZombieClassInfo[iClassId], SECTION_CLASS_NVG_B, iColor[2])
	
	//	DRAW DYNAMIC LIGHT
	draw_light(id, iOrigin, iRadius, iColor)
		
	return
}

public EndRound_TASK(TASKID)
{
	if (!nt_zp_is_mode_on())
		return
		
	ExecuteForward(ifw_EndRound, ifw_Result)
	
	if (ifw_Result != PLUGIN_CONTINUE)
		return
		
	fnForceRoundEnd(TEAM_CT)
}

public DeployWeapon_TASK(iParam[3], TASKID)
{
	if (!nt_zp_is_mode_on())
		return
		
	new id = TASKID - TASK_DEPLOY_WEAPON
	
	if (!nt_zp_is_mode_on())
		return
		
	if (!nt_get_user_zombie(id))
		return
		
	if (!is_user_alive(id))
		return
		
	
	new iParam[3]
	new iEnt = iParam[0]
	new iWeaponId = iParam[1]
	
	
	new iWeaponEnt = get_pdata_cbase(id, m_pActiveItem, 5)
	if (iWeaponEnt != iEnt)
		return
		
	if (cs_get_weapon_id(iWeaponEnt) != iWeaponId)
		return
		
	
	update_claw_model(id, iWeaponId)
}

public ResetClassModel_TASK(TASKID)
{
	if (!nt_zp_is_mode_on())
		return
		
	new id = TASKID - TASK_RESET_ZB_MODEL
	
	if (!is_user_connected(id))
		return
		
	if (!nt_get_user_zombie(id))
		return
		
	
	new szClassModel[64]
	
	new iClassId = nt_get_user_zombie_class(id)
	
	TrieGetString(iZombieClassInfo[iClassId], SECTION_MODEL, szClassModel, sizeof szClassModel - 1)
	
	cs_set_user_model(id, szClassModel)
}


/*****************************************************************************************************/

stock fnGetPlayerNumber(&iZombieNumber, &iSoldierNumber)
{
	for (new id = 1; id <= iMAX_PLAYERS; id++)
	{
		if (!is_user_alive(id))
			continue
			
		if (!nt_get_user_zombie(id))
			iSoldierNumber++
		else	iZombieNumber++
	}
}

stock fnForceRoundEnd(iTeamId)
{
	if (iTeamId == TEAM_TERRORIST)
		TerminateRound(RoundEndType_TeamExtermination, TeamWinning_Terrorist)
	else if (iTeamId == TEAM_CT)
		TerminateRound(RoundEndType_TeamExtermination, TeamWinning_Ct)
	else	TerminateRound(RoundEndType_Draw)
}

stock is_map_suitable(szMapName[])
{
	for (new iGamePlayId = 1; iGamePlayId < iZbGamePlayCount; iGamePlayId++)
	{
		new szPreFix[10], iLen
		TrieGetString(iGamePlayInfo[iGamePlayId], SECTION_GP_MAP_PREFIX, szPreFix, sizeof szPreFix - 1)
		TrieGetCell(iGamePlayInfo[iGamePlayId], SECTION_GP_MAP_PREFIX, iLen)
		
		if (equal(szPreFix, szMapName, iLen))
			return iGamePlayId
	}
	return 0
}

stock draw_light(id, iOrigin[3], iRadius, iLightColor[3], iLife = 5, iDecay = 0)
{
	
	if (is_user_bot(id))
		return
		
	//	TE_DELIGHT
	message_begin(MSG_ONE_UNRELIABLE,SVC_TEMPENTITY,iOrigin,id) 
	
	write_byte(TE_DLIGHT) // 27
	
	
	write_coord(iOrigin[0]) 
	write_coord(iOrigin[1]) 
	write_coord(iOrigin[2]) 
	
	write_byte(iRadius) // radius
	
	write_byte(iLightColor[0])    // r
	write_byte(iLightColor[1])  // g
	write_byte(iLightColor[2])   // b
	
	write_byte(iLife) // life in 10's
	write_byte(iDecay)  // decay rate in 10's
	
	message_end() 

}

stock update_claw_model(id, iClassId)
{
	if (!nt_get_user_zombie(id))
		return
		
	new szViewModel[128]
	TrieGetString(iZombieClassInfo[iClassId], SECTION_HAND_MODEL, szViewModel, sizeof szViewModel - 1)
	
	set_pev(id, pev_viewmodel2, szViewModel)
	set_pev(id, pev_weaponmodel, "")
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
