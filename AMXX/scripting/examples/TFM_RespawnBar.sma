/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <hamsandwich>
#include <mmcl_util>
#include <player_api>

#define PLUGIN "RESPAWN BAR"
#define VERSION "1.0"
#define AUTHOR "Nguyen Duy Linh"


#define TASK_DRAW_BAR 2000
#define TASK_RESPAWN	4000

#define NUMBER_DIRECTORY "RespawnNumber"


/*			TRIE SECTION			*/
new Trie:iUserInfo[33]

/*			  TRIE KEY			*/
#define SECTION_COUNT_DOWN	"COUNT-DOWN"
#define SECTION_COUNT_NUMBER	"COUNT-NUMBER"

#define SECTION_TIME_SPAWN	"TIME-SPAWN"

#define SECTION_X_POS	"X_POS"
#define SECTION_Y_POS	"Y_POS"

/********************************************************/


#define HUD_NUMBER_PREFIX "Number"



#define DEFAULT_RESPAWN_TIME	5
#define HUD_DISPLAY_TIME -1.0

new ifw_DrawNumber, ifw_MakeSpawnTask

new iResult


public plugin_natives()
{
	register_native("_DrawRespawnNumber", "native_DrawRespawnNumber", 1)
	register_native("_MakeRespawnTask", "native_MakeRespawnTask", 1)
	register_native("_RemoveRespawnTask", "native_RemoveRespawnTask", 1)
	
	register_native("_ModifyTimeRespawn", "native_ModifyTimeRespawn", 1)
	register_native("_ModifyDrawingNumber", "native_ModifyDrawingNumber",1)
	
}

public native_ModifyTimeRespawn(id, Float:fTime)
{
	if (!is_user_connected(id))
		return
	
	set_float_to_key(id, SECTION_TIME_SPAWN, fTime)
}

public native_ModifyDrawingNumber(id, iTime)
{
	if (!is_user_connected(id))
		return
	
	set_int_to_key(id, SECTION_COUNT_NUMBER, iTime)
	
}
public native_MakeRespawnTask(id, Float:fTime, iDefault)
{
	if (!is_user_connected(id))
		return
	
	if (is_user_alive(id))
		return
	
	if (iDefault)
		fTime = float(DEFAULT_RESPAWN_TIME)
	/*
	ExecuteForward(ifw_MakeSpawnTask, iResult, id, fTime, iDefault)
	
	if (iResult == PLUGIN_HANDLED)
		fTime = get_float_from_key(id, SECTION_TIME_SPAWN)
	*/
	
	remove_task(id + TASK_RESPAWN)
	set_task(fTime, "TASK_PlayerRespawn", id + TASK_RESPAWN)
}

public native_RemoveRespawnTask(id)
	remove_task(id + TASK_RESPAWN)

public TASK_PlayerRespawn(TASKID)
{
	new id = TASKID - TASK_RESPAWN
	
	if (!is_user_connected(id))
		return
	
	if (is_user_alive(id))
		return
	
	ExecuteHamB(Ham_CS_RoundRespawn, id)
}

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_concmd("RespawnNumber/X_Pos", "fw_SetPos_X")
	register_concmd("RespawnNumber/Y_Pos", "fw_SetPos_Y")
	
	
	ifw_DrawNumber = CreateMultiForward("Respawn_DrawingNumber", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL, FP_CELL)
	ifw_MakeSpawnTask = CreateMultiForward("Respawn_MakingTask", ET_CONTINUE, FP_CELL, FP_FLOAT, FP_CELL)
}

public client_putinserver(id)
{
	remove_task(id + TASK_RESPAWN)
	
	if (is_user_bot(id))
		return
	
	if (!iUserInfo[id])
		iUserInfo[id] = TrieCreate()
	
}

public client_disconnect(id)
{
	if (iUserInfo[id])
		TrieDestroy(iUserInfo[id])
	
	remove_task(id + TASK_RESPAWN)
}

public fw_SetPos_X(id, level, cid)
{
	if (!cmd_access(id, level, cid, 2))
		return
	
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	
	set_float_to_key(id, SECTION_X_POS, str_to_float(szArg))
}

public fw_SetPos_Y(id, level, cid)
{
	if (!cmd_access(id, level, cid, 2))
		return
	
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	
	set_float_to_key(id, SECTION_Y_POS, str_to_float(szArg))
}

public csred_PlayerSpawnPost(id)
	native_DrawRespawnNumber(id, 0, 0, 0)

public native_DrawRespawnNumber(id, iToggle, iTime, iDefault)
{
	if (!is_user_connected(id))
		return
	
	if (is_user_bot(id))
		return
	
	if (!iToggle)
	{
		
		remove_task(id + TASK_DRAW_BAR)
		
		set_int_to_key(id, SECTION_COUNT_DOWN, 0)
		MMCL_RemoveImage(id, HUDTYPE_TGA, CHANNEL_RESPAWN_NUMBER_TGA)
		
		return
	}
	
	if (iDefault)	
		set_int_to_key(id, SECTION_COUNT_DOWN, DEFAULT_RESPAWN_TIME)
	else	set_int_to_key(id, SECTION_COUNT_DOWN, iTime)
	
	ExecuteForward(ifw_DrawNumber, iResult, id, iToggle, iTime, iDefault)
	
	
	if (iResult == PLUGIN_HANDLED)
	{
		new iNumber = get_int_from_key(id, SECTION_COUNT_NUMBER)
		set_int_to_key(id, SECTION_COUNT_DOWN, iNumber)
	}
	
	if (task_exists(id + TASK_DRAW_BAR))
		remove_task(id + TASK_DRAW_BAR)
	
	
	set_task(1.0, "Task_DrawRespawnBar", id + TASK_DRAW_BAR, _, _, "b")
}

public Task_DrawRespawnBar(TASKID)
{
	new id = TASKID - TASK_DRAW_BAR
	
	if (!is_user_connected(id))
	{
		remove_task(TASKID)
		return
	}
	
	if (is_user_bot(id))
	{
		remove_task(TASKID)
		return
	}
	
	
	new iCountDown = get_int_from_key(id, SECTION_COUNT_DOWN)
	iCountDown--
	set_int_to_key(id, SECTION_COUNT_DOWN, iCountDown)
	
	if (!iCountDown)
	{
		MMCL_RemoveImage(id, HUDTYPE_TGA, CHANNEL_RESPAWN_NUMBER_TGA)
		remove_task(TASKID)
		return
	}
	
	new szHud[128]
	
	new Float:fX = get_float_from_key(id, SECTION_X_POS)
	new Float:fY = get_float_from_key(id, SECTION_Y_POS)
	
	formatex(szHud, sizeof szHud - 1, "%s/%s/%s_%d.tga", TFM_TGA_DIRECTORY, NUMBER_DIRECTORY, HUD_NUMBER_PREFIX, iCountDown)
	
	
	if (!file_exists(szHud))
		return
	
	
	formatex(szHud, sizeof szHud - 1, "%s/%s/%s_%d", TFM_TGA_DIRECTORY, NUMBER_DIRECTORY, HUD_NUMBER_PREFIX, iCountDown)
	
	MMCL_DrawTGA(id, szHud,  255, 255, 255, 150, fX, fY, 1, 0, 0.0, 0.0, HUD_DISPLAY_TIME, CHANNEL_RESPAWN_NUMBER_TGA)
	
	
}

stock get_int_from_key(id, szKey[])
{
	if (is_user_bot(id))
		return 0
	
	if (!iUserInfo[id])
		return 0
	
	new iOutput
	TrieGetCell(iUserInfo[id], szKey, iOutput)
	return iOutput
}

stock set_int_to_key(id, szKey[], iInput)
{
	if (is_user_bot(id))
		return
	
	if (!iUserInfo[id])
		return
	
	TrieSetCell(iUserInfo[id], szKey, iInput)
}

stock set_float_to_key(id, szKey[], Float:fInput)
{
	if (is_user_bot(id))
		return
	
	if (!iUserInfo[id])
		return
	
	TrieSetCell(iUserInfo[id], szKey, fInput)
}

stock Float:get_float_from_key(id, szKey[])
{
	if (is_user_bot(id))
		return 0.0
	
	if (!iUserInfo[id])
		return 0.0
	
	new Float:fOutput
	TrieGetCell(iUserInfo[id], szKey, fOutput)
	return fOutput
}
