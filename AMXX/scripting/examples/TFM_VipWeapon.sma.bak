/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <cstrike>
#include <fakemeta_util>

#include <GamePlay_Included/Tools.inc>
#include <Item_Included/ArmorSystem>

#include <TFM_WPN>
#include <cswpn_ultilities>

#include <player_api>




#define PLUGIN "[TFM] Vip Weapon"
#define VERSION "1.0"
#define AUTHOR "Redplane"

new Trie:iVipWeaponInfo

#define SECTION_PRIMARY_WPN_ID	"PRIMARY_ID"
#define SECTION_PRIMARY_WPN_TYPE	"PRIMARY_TYPE"
#define SECTION_SECONDARY_WPN_ID	"SECONDARY_ID"
#define SECTION_SECONDARY_WPN_TYPE	"SECONDARY_TYPE"
#define SECTION_MELEE_ID	"MELEE_ID"
#define SECTION_MELEE_TYPE	"MELEE_TYPE"
#define SECTION_GRENADE_ID	"GRENADE_ID"
#define SECTION_GRENADE_TYPE	"GRENADE_TYPE"


#define TASK_GIVE_EQUIPMENT	2000

enum
{
	KEY_NORMAL = 1,
	KEY_MDL,
	KEY_SERIAL
}

#define VIP_EQUIPMENT_DIR	"VIP_WPN"

#define INT_INFO_ARMOR_TYPE	"INT_ARMOR_TYPE"
#define INT_INFO_ARMOR_ID	"INT_ARMOR_ID"
#define INT_INFO_ARMOR_AMOUNT	"INT_ARMOR_AMOUNT"

enum
{
	ARMORTYPE_NORMAL = 1,
	ARMORTYPE_MDL,
	ARMORTYPE_SERIAL
}

#define ARMORID_KEVLAR	1
#define ARMORID_VESTHELM 2

public plugin_init() 
{
	new iWeaponMode, iFightYard
	if (is_deathmatch_on(iWeaponMode, iFightYard) != CS_DM_AS)
	{
		pause("a")
		return
	}
	
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	if (!iVipWeaponInfo)
		iVipWeaponInfo = TrieCreate()
		
	new szCfgDir[64]
	new szInfo[32]
	new szEquipmentFile[128]
	
	get_mapname(szInfo, sizeof szInfo - 1)
	get_configsdir(szCfgDir, sizeof szCfgDir - 1)
	
	formatex(szEquipmentFile, sizeof szEquipmentFile - 1, "%s/%s/%s.redplane", szCfgDir, VIP_EQUIPMENT_DIR, szInfo)
	
	if (file_exists(szEquipmentFile))
	{
		for (new i = 0; i < file_size(szEquipmentFile, 1); i++)
		{
			new iTextLen
			read_file(szEquipmentFile, i, szInfo, sizeof szInfo - 1, iTextLen)
			
			if (equal(szInfo, "[primary]", 9))
			{
				replace(szInfo, sizeof szInfo - 1, "[primary]", "")
				set_pw_load_file(szInfo, "redplane", 1)
			}
			else if (equal(szInfo, "[secondary]", 11))
			{
				replace(szInfo, sizeof szInfo - 1, "[secondary]", "")
				set_sec_wpn_load_file(szInfo, "redplane", 1)
			}
			else if (equal(szInfo, "[melee]", 7))
			{
				replace(szInfo, sizeof szInfo - 1, "[melee]", "")
				set_melee_load_file(szInfo, "redplane", 1)
			}
		}
	}
	
	get_mapname(szInfo, sizeof szInfo - 1)
	formatex(szEquipmentFile, sizeof szEquipmentFile - 1, "%s/%s/%s.cfg", szCfgDir, VIP_EQUIPMENT_DIR, szInfo)
	
	enum
	{
		LINE_PRIMARY_WPN,
		LINE_SECONDARY_WPN,
		LINE_MELEE,
		LINE_GRENADE,
		LINE_ARMOR
	}
	
	if (!file_exists(szEquipmentFile))
	{
		TrieSetCell(iVipWeaponInfo, SECTION_PRIMARY_WPN_ID, UT_WorldModelToWeaponId("models/w_famas.mdl"))
		TrieSetCell(iVipWeaponInfo, SECTION_PRIMARY_WPN_TYPE, KEY_NORMAL)
		
		TrieSetCell(iVipWeaponInfo, SECTION_SECONDARY_WPN_ID, UT_WorldModelToWeaponId("models/w_deagle.mdl"))
		TrieSetCell(iVipWeaponInfo, SECTION_SECONDARY_WPN_TYPE, KEY_NORMAL)
		
		TrieSetCell(iVipWeaponInfo, SECTION_GRENADE_ID, UT_WorldModelToWeaponId("models/w_hegrenade.mdl"))
		TrieSetCell(iVipWeaponInfo, SECTION_GRENADE_TYPE, KEY_NORMAL)
		
		
	}
	else
	{
		new iTextLen
		read_file(szEquipmentFile, LINE_PRIMARY_WPN, szInfo, sizeof szInfo - 1, iTextLen)
		if (equal(szInfo, "[primary]", 9))
		{
			replace(szInfo, sizeof szInfo - 1, "[primary]", "")
			TrieSetCell(iVipWeaponInfo, SECTION_PRIMARY_WPN_ID, UT_WorldModelToWeaponId(szInfo))
			TrieSetCell(iVipWeaponInfo, SECTION_PRIMARY_WPN_TYPE, KEY_NORMAL)
			
		}
		else if (equal(szInfo, "[primary_mdl]", 13))
		{
			replace(szInfo, sizeof szInfo - 1, "[primary_mdl]", "")
			TrieSetCell(iVipWeaponInfo, SECTION_PRIMARY_WPN_ID, find_pw_by_model(szInfo))
			TrieSetCell(iVipWeaponInfo, SECTION_PRIMARY_WPN_TYPE, KEY_MDL)
		}
		else if (equal(szInfo, "[primary_ser]", 13))
		{
			replace(szInfo, sizeof szInfo - 1, "[primary_ser]", "")
			TrieSetCell(iVipWeaponInfo, SECTION_PRIMARY_WPN_ID, find_pw_by_serial(szInfo))
			TrieSetCell(iVipWeaponInfo, SECTION_PRIMARY_WPN_TYPE, KEY_SERIAL)
		}
		
		read_file(szEquipmentFile, LINE_SECONDARY_WPN, szInfo, sizeof szInfo - 1, iTextLen)
		if (equal(szInfo, "[secondary]", 11)) 
		{
			replace(szInfo, sizeof szInfo - 1, "[secondary]", "")
			TrieSetCell(iVipWeaponInfo, SECTION_SECONDARY_WPN_ID, UT_WorldModelToWeaponId(szInfo))
			TrieSetCell(iVipWeaponInfo, SECTION_SECONDARY_WPN_TYPE, KEY_NORMAL)
			
		}
		else if (equal(szInfo, "[secondary_mdl]", 15))
		{
			replace(szInfo, sizeof szInfo - 1, "[secondary_mdl]", "")
			TrieSetCell(iVipWeaponInfo, SECTION_SECONDARY_WPN_ID, find_sec_wpn_by_model(szInfo))
			TrieSetCell(iVipWeaponInfo, SECTION_SECONDARY_WPN_TYPE, KEY_MDL)
		}
		else if (equal(szInfo, "[secondary_ser]", 15))
		{
			replace(szInfo, sizeof szInfo - 1, "[secondary_ser]", "")
			TrieSetCell(iVipWeaponInfo, SECTION_SECONDARY_WPN_ID, find_sec_wpn_by_serial(szInfo))
			TrieSetCell(iVipWeaponInfo, SECTION_SECONDARY_WPN_TYPE, KEY_SERIAL)
		}	
		
		read_file(szEquipmentFile, LINE_MELEE, szInfo, sizeof szInfo - 1, iTextLen)
		if (equal(szInfo, "[melee_mdl]", 11)) 
		{
			replace(szInfo, sizeof szInfo - 1, "[melee_mdl]", "")
			TrieSetCell(iVipWeaponInfo, SECTION_MELEE_ID, find_melee_by_model(szInfo))
			TrieSetCell(iVipWeaponInfo, SECTION_MELEE_TYPE, KEY_MDL)
			
		}
		else if (equal(szInfo, "[melee_ser]", 11))
		{
			replace(szInfo, sizeof szInfo - 1, "[melee_ser]", "")
			TrieSetCell(iVipWeaponInfo, SECTION_MELEE_ID, find_melee_by_serial(szInfo))
			TrieSetCell(iVipWeaponInfo, SECTION_MELEE_TYPE, KEY_SERIAL)
		}
		
		read_file(szEquipmentFile, LINE_GRENADE, szInfo, sizeof szInfo - 1, iTextLen)
		if (equal(szInfo, "[grenade]", 9))
		{
			replace(szInfo, sizeof szInfo - 1, "[grenade]", "")
			TrieSetCell(iVipWeaponInfo, SECTION_GRENADE_ID, UT_WorldModelToWeaponId(szInfo))
			TrieSetCell(iVipWeaponInfo, SECTION_GRENADE_TYPE, KEY_NORMAL)
		}
		else if (equal(szInfo, "[grenade_mdl]", 13))
		{
			replace(szInfo, sizeof szInfo - 1, "[grenade_mdl]", "")
			TrieSetCell(iVipWeaponInfo, SECTION_GRENADE_ID, find_grenade_by_model(szInfo))
			TrieSetCell(iVipWeaponInfo, SECTION_GRENADE_TYPE, KEY_MDL)
		}
		else if (equal(szInfo, "[grenade_mdl]", 13))
		{
			replace(szInfo, sizeof szInfo - 1, "[grenade_mdl]", "")
			TrieSetCell(iVipWeaponInfo, SECTION_GRENADE_ID, find_grenade_by_serial(szInfo))
			TrieSetCell(iVipWeaponInfo, SECTION_GRENADE_TYPE, KEY_SERIAL)
		}
		
		read_file(szEquipmentFile, LINE_ARMOR, szInfo, sizeof szInfo - 1, iTextLen)
		if (equal(szInfo, "[armor]", 7))
		{
			replace(szInfo, sizeof szInfo - 1, "[armor]", "")
			
			new szArmorInfo[3], szArmorAmount[5]
			parse(szInfo, szArmorInfo, sizeof szArmorInfo - 1, szArmorAmount, sizeof szArmorAmount - 1)	
			
			TrieSetCell(iVipWeaponInfo, INT_INFO_ARMOR_TYPE, ARMORTYPE_NORMAL)
			TrieSetCell(iVipWeaponInfo, INT_INFO_ARMOR_ID, str_to_num(szArmorInfo)?ARMORID_VESTHELM:ARMORID_KEVLAR)
			TrieSetCell(iVipWeaponInfo, INT_INFO_ARMOR_AMOUNT, str_to_num(szArmorAmount))
		}
		else if (equal(szInfo, "[armor_mdl]", 11))
		{
			replace(szInfo, sizeof szInfo - 1, "[armor_mdl]", "")
			new szArmorInfo[128], szArmorAmount[5]
			parse(szInfo, szArmorInfo, sizeof szArmorInfo - 1, szArmorAmount, sizeof szArmorAmount - 1)	
			
			new iArmorId = find_armor_by_model(szArmorInfo)
			
			if (iArmorId > -1)
			{
				TrieSetCell(iVipWeaponInfo, INT_INFO_ARMOR_TYPE, ARMORTYPE_MDL)
				TrieSetCell(iVipWeaponInfo, INT_INFO_ARMOR_ID, iArmorId)
				TrieSetCell(iVipWeaponInfo, INT_INFO_ARMOR_AMOUNT, str_to_num(szArmorAmount))
			}
		}
		else if (equal(szInfo, "[armor_ser]", 11))
		{
			replace(szInfo, sizeof szInfo - 1, "[armor]", "")
			new szArmorInfo[128], szArmorAmount[5]
			parse(szInfo, szArmorInfo, sizeof szArmorInfo - 1, szArmorAmount, sizeof szArmorAmount - 1)	
			
			new iArmorId = find_armor_by_serial(szArmorInfo)
			
			if (iArmorId > -1)
			{
				TrieSetCell(iVipWeaponInfo, INT_INFO_ARMOR_TYPE, ARMORTYPE_SERIAL)
				TrieSetCell(iVipWeaponInfo, INT_INFO_ARMOR_ID, iArmorId)
				TrieSetCell(iVipWeaponInfo, INT_INFO_ARMOR_AMOUNT, str_to_num(szArmorAmount))
			}
			
		}
		
	}
	
	register_clcmd("drop", "clcmd_Drop")
}

public clcmd_Drop(id)
{
	if (!is_user_alive(id))
		return PLUGIN_CONTINUE
	
	if (!cs_get_user_vip(id))
		return PLUGIN_CONTINUE
		
	return PLUGIN_HANDLED
}

public csred_PlayerSpawnPost(id)
{
	if (!is_user_connected(id))
		return
		
	if (!cs_get_user_vip(id))
		return
		
	if (!iVipWeaponInfo)
		return
		
	fm_strip_user_weapons(id)
	remove_task(id + TASK_GIVE_EQUIPMENT)
	set_task(0.25, "GivePlayerWeapon_TASK", id + TASK_GIVE_EQUIPMENT)
	
	
}

public GivePlayerWeapon_TASK(TASKID)
{
	new id = TASKID - TASK_GIVE_EQUIPMENT
	
	if (!cs_get_user_vip(id))
		return
		
	cs_set_user_vip(id, 0)
	
	new iInfo_WpnType, iInfo_WpnId
	
	TrieGetCell(iVipWeaponInfo, SECTION_PRIMARY_WPN_TYPE, iInfo_WpnType)
	TrieGetCell(iVipWeaponInfo, SECTION_PRIMARY_WPN_ID, iInfo_WpnId)
	
	if (iInfo_WpnId != -1)
	{
		switch (iInfo_WpnType)
		{
			case KEY_NORMAL:
			{
				new szWeaponName[32]
				
				get_weaponname(iInfo_WpnId, szWeaponName, sizeof szWeaponName - 1)
				fm_give_item(id, szWeaponName)
				UT_SetUserBPA(id, iInfo_WpnId, UT_Get_CS_DefaultBpa(iInfo_WpnId))
				engclient_cmd(id, szWeaponName)
			}
			case KEY_MDL, KEY_SERIAL:
			{
				give_user_pw(id, iInfo_WpnId)
			}
		}
	}
	
	TrieGetCell(iVipWeaponInfo, SECTION_SECONDARY_WPN_TYPE, iInfo_WpnType)
	TrieGetCell(iVipWeaponInfo, SECTION_SECONDARY_WPN_ID, iInfo_WpnId)
	
	if (iInfo_WpnId != -1)
	{
		switch (iInfo_WpnType)
		{
			case KEY_NORMAL:
			{
				new szWeaponName[32]
				
				get_weaponname(iInfo_WpnId, szWeaponName, sizeof szWeaponName - 1)
				fm_give_item(id, szWeaponName)
				UT_SetUserBPA(id, iInfo_WpnId, UT_Get_CS_DefaultBpa(iInfo_WpnId))
				engclient_cmd(id, szWeaponName)
			}
			case KEY_MDL, KEY_SERIAL:
			{
				give_player_sec_wpn(id, iInfo_WpnId)
			}
		}
	}
	
	TrieGetCell(iVipWeaponInfo, SECTION_MELEE_TYPE, iInfo_WpnType)
	TrieGetCell(iVipWeaponInfo, SECTION_MELEE_ID, iInfo_WpnId)
	
	if (iInfo_WpnId != -1)
	{
		switch (iInfo_WpnType)
		{
			case KEY_MDL, KEY_SERIAL:
			{
				give_player_sec_wpn(id, iInfo_WpnId)
			}
			default:
			{
				fm_give_item(id, "weapon_knife")
				engclient_cmd(id, "weapon_knife")
			}
		}
	}
	else
	{
		fm_give_item(id, "weapon_knife")
		engclient_cmd(id, "weapon_knife")
	}
	TrieGetCell(iVipWeaponInfo, SECTION_GRENADE_TYPE, iInfo_WpnType)
	TrieGetCell(iVipWeaponInfo, SECTION_GRENADE_ID, iInfo_WpnId)
	
	if (iInfo_WpnId != -1)
	{
		switch (iInfo_WpnType)
		{
			case KEY_NORMAL:
			{
				new szWeaponName[32]
				
				get_weaponname(iInfo_WpnId, szWeaponName, sizeof szWeaponName - 1)
				fm_give_item(id, szWeaponName)
				engclient_cmd(id, szWeaponName)
			}
			case KEY_MDL, KEY_SERIAL:
				give_user_grenade(id, iInfo_WpnId)
		}
	}
	
	_equip_armor(id)
	fm_give_item(id, "weapon_knife")
	cs_set_user_vip(id)
}

stock _equip_armor(id)
{
		
	cs_set_user_armor(id, 0, CS_ARMOR_NONE)
	
	new iArmorType
	TrieGetCell(iVipWeaponInfo, INT_INFO_ARMOR_TYPE, iArmorType)
	
	new iArmorId 
	TrieGetCell(iVipWeaponInfo, INT_INFO_ARMOR_ID, iArmorId)
	
	if (iArmorType < ARMORTYPE_NORMAL || iArmorType > ARMORTYPE_SERIAL)
		return
		
	if (!is_user_alive(id))
		return
	
	new iArmorAmount 
	TrieGetCell(iVipWeaponInfo, INT_INFO_ARMOR_AMOUNT, iArmorAmount)
	
	
	if (iArmorType != ARMORTYPE_NORMAL)
	{
		if (get_armor_team(iArmorId) != ARMOR_TEAM_SOLDIER)
			return
				
		give_user_armor(id, iArmorId)
	}
	else
		cs_set_user_armor(id, iArmorAmount, (iArmorId < 1)?CS_ARMOR_KEVLAR:CS_ARMOR_VESTHELM)
	
}
