/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <csx>
#include <TFM_WPN>
#include <mmcl_util>
#include <cstrike>

#include <GamePlay_Included/Manager.inc>
#include <GamePlay_Included/IntegerConstant.inc>

#include <GamePlay_Included/TFM_ZombieMod.inc>
#include <GamePlay_Included/GamePlay_FFA.inc>
#include <GamePlay_Included/GamePlay_ESC.inc>
#include <fakemeta>


/********************************************************/

#define PLUGIN "ICON MARK"
#define VERSION "1.0"
#define AUTHOR "Nguyen Duy Linh"
#define MAX_ICON 32

/********************************************************/

/*			TRIE				*/
// Trie Info
new Trie:iUserInfo[33]

// Trie Key
#define SECTION_MARK_X_TGA	"MARK_X_TGA"
#define SECTION_MARK_Y_TGA	"MARK_Y_TGA"

#define SECTION_MARK_SPACE_TGA	"MARK_SPACE_TGA"

/********************************************************/

#define MARK_DISPLAY_TIME -1.0

/********************************************************/

enum
{
	ICON_NONE = 0,
	ICON_NORMAL,
	ICON_KNIFE,
	ICON_HEADSHOT,
	ICON_GRENADE,
	ICON_TEN,
	ICON_INFECT,
	ICON_ZOMBIE_KILL,
	ICON_FIFTY
}

	

#define ICONMARK_DIRECTORY "ICON_MARK"

#define MAX_SLOT	20


#define INT_INFO_MARK_COUNTER "INT_MARK_COUNTER"
#define INT_INFO_MARK_POSITION	"INT_MARK_POSITION"
#define INT_INFO_MARK_TEN_POSITION	"INT_MARK_TEN_POSITION"
#define INT_INFO_MARK_50_POSITION	"INT_MARK_50_POSITION"
#define INT_INFO_MARK_TEN_STAGE	"INT_MARK_TEN_STAGE"

#define PREFIX_MARK_SLOT	"PF_MARK_SLOT"

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
		
	register_concmd("TFM_HUD/IconMark_X", "TGA_MARK_X")
	register_concmd("TFM_HUD/IconMark_Y", "TGA_MARK_Y")
	register_concmd("TFM_HUD/IconMarkSpace", "TGA_MARK_SPACE")
	
	register_concmd("RDR_HUD/IconMark", "clcmd_RedrawIconMark")
	
	
}

public _cmdTestIconMark(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[3]
	read_argv(1, szArg, sizeof szArg - 1)
	
	new i = 0
	
	while (i < str_to_num(szArg))
	{
		fnUpdateIconMark(id, ICON_HEADSHOT)
		i++;
	}
}

/*			ICON MARK POS				*/

//		Sprite

//		TGA

public TGA_MARK_X(id, level, cid)
{
	if (!cmd_access(id, level, cid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_key(id, SECTION_MARK_X_TGA, str_to_float(szArg))
}

public TGA_MARK_Y(id, level, cid)
{
	if (!cmd_access(id, level, cid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_key(id, SECTION_MARK_Y_TGA, str_to_float(szArg))
}


/****************************************************************/

/*			  MARK SPACE				*/



public TGA_MARK_SPACE(id, level, cid)
{
	if (!cmd_access(id, level, cid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_key(id, SECTION_MARK_SPACE_TGA, str_to_float(szArg))
}
/****************************************************************/

public clcmd_RedrawIconMark(id)
	draw_icon_mark(id, 0)
/****************************************************************/

public client_putinserver(id)
{
	
		
	if (is_user_bot(id))
		return
		
	if (!iUserInfo[id])
		iUserInfo[id] = TrieCreate()
		
	set_int_to_key(id, INT_INFO_MARK_COUNTER , 0)
	set_int_to_key(id, INT_INFO_MARK_POSITION, 0)
	set_int_to_key(id, INT_INFO_MARK_TEN_POSITION, 0)
	set_int_to_key(id, INT_INFO_MARK_50_POSITION, 0)

	if (iUserInfo[id])
		return
		
	
}
	
public client_disconnect(id)
{
	
	if (is_user_bot(id))
		return
		
	if (!iUserInfo[id])
		return
		
	TrieDestroy(iUserInfo[id])
	
}


stock fnUpdateIconMark(id, iIconMarkId)
{
	if (!is_user_connected(id))
		return
		
	if (is_user_bot(id))
		return
	
	new iMarkCounter = get_int_from_key(id, INT_INFO_MARK_COUNTER)
	iMarkCounter++
	set_int_to_key(id, INT_INFO_MARK_COUNTER, iMarkCounter)
	
	
	new szKey[128]
	
	new iPosition = get_int_from_key(id, INT_INFO_MARK_POSITION)
	formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_MARK_SLOT, iPosition)
	set_int_to_key(id, szKey, iIconMarkId)
	
	iPosition++
	
	new iMarkTenStage = get_int_from_key(id, INT_INFO_MARK_TEN_STAGE)
	
	new i = iPosition - 1
	
	new iMarkTenPosition = get_int_from_key(id, INT_INFO_MARK_TEN_POSITION)
	
	if (iMarkCounter >= 10 * (iMarkTenStage/*iMarkTenPosition*/ + 1))
	{
		new iTenMarkPosition = iMarkTenPosition
		
		formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_MARK_SLOT, iTenMarkPosition)
		set_int_to_key(id, szKey, ICON_TEN)
		iMarkTenPosition++
		iPosition = iMarkTenPosition
		
		iMarkTenStage++
		set_int_to_key(id, INT_INFO_MARK_TEN_STAGE, iMarkTenStage)
		
		i = iMarkTenPosition
		
		while ( i < iMarkTenPosition + 10)
		{
			formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_MARK_SLOT, i)
			TrieDeleteKey(iUserInfo[id], szKey)
			
			MMCL_RemoveImage(id, HUDTYPE_TGA, CHANNEL_MARK_START_TGA + i)
			i++
		}
		i = iTenMarkPosition
	}
	
	
	new iMarkFiftyPosition = get_int_from_key(id, INT_INFO_MARK_50_POSITION)
	
	if (iMarkCounter >= 50 * (iMarkFiftyPosition + 1))
	{
		new iFiftyMarkPosition = iMarkFiftyPosition
		formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_MARK_SLOT, iFiftyMarkPosition)
		set_int_to_key(id, szKey, ICON_FIFTY)
		
		iMarkFiftyPosition++
		iMarkTenPosition = iMarkFiftyPosition
		iPosition = iMarkFiftyPosition
		
		i = iMarkFiftyPosition
		
		while ( i < iMarkFiftyPosition + 5)
		{
			formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_MARK_SLOT, i)
			TrieDeleteKey(iUserInfo[id], szKey)
			
			MMCL_RemoveImage(id, HUDTYPE_TGA, CHANNEL_MARK_START_TGA + i)
			i++
		}
		
		i = iFiftyMarkPosition
		
	}
	
	set_int_to_key(id, INT_INFO_MARK_POSITION, iPosition)
	set_int_to_key(id, INT_INFO_MARK_TEN_POSITION, iMarkTenPosition)
	set_int_to_key(id, INT_INFO_MARK_50_POSITION, iMarkFiftyPosition)
	
	
	
	set_int_to_key(id, INT_INFO_MARK_POSITION, iPosition)
	draw_icon_mark(id, i)
}

stock draw_icon_mark(id, iDrawFromChannel)
{
	if (!is_user_connected(id))
		return
		
	if (is_user_bot(id))	
		return
		
	new i = iDrawFromChannel
	new Float:fReduce = 0.0 + get_float_from_key(id, SECTION_MARK_SPACE_TGA)*i
	new Float:fX = get_float_from_key(id, SECTION_MARK_X_TGA)
	new Float:fY = get_float_from_key(id, SECTION_MARK_Y_TGA)
	new szFullHud[128]
	
	//client_print(id, print_center, "DRAW FROM %d to %d", i, get_int_from_key(id, INT_INFO_MARK_POSITION))
	new ICON_NAME[][] = {"none", "MARK_NORMAL", "MARK_KNIFE", "MARK_HEADSHOT", "MARK_GRENADE", 
			"MARK_10", "MARK_INFECT", "MARK_ZOMBIE_KILL", "MARK_50"}
			
	while (i < get_int_from_key(id, INT_INFO_MARK_POSITION))
	{	
		formatex(szFullHud, sizeof szFullHud - 1, "%s_%d", PREFIX_MARK_SLOT, i)
			
		new iMarkIconId = get_int_from_key(id, szFullHud)
		
		MMCL_RemoveImage(id, HUDTYPE_TGA, CHANNEL_MARK_START_TGA + i)
		formatex(szFullHud, sizeof szFullHud - 1, "%s/ICON_MARK/%s.tga", TFM_TGA_DIRECTORY, ICON_NAME[iMarkIconId])
			
		if (file_exists(szFullHud))
		{		
			formatex(szFullHud, sizeof szFullHud - 1, "%s/ICON_MARK/%s", TFM_TGA_DIRECTORY, ICON_NAME[iMarkIconId])
			MMCL_DrawTGA(id, szFullHud, 255, 255, 255, 255, fX - fReduce, fY, 1, 0, 0.0, 0.0, -1.0, CHANNEL_MARK_START_TGA + i)
			fReduce += get_float_from_key(id, SECTION_MARK_SPACE_TGA)
		}
		i++
	}
}

public client_death(iKiller, iVictim, iWeaponId, iHitPlace, TK)
{
	if (!is_user_connected(iKiller))
		return
		
	if (!is_user_connected(iVictim))
		return
			
	if (is_user_bot(iKiller))
		return
	
	//new iVictimZombie = is_user_zombie(iVictim) 
	
	if (TK)
	{
		if (FFA_get_game_state())
		{
			client_death(iKiller, iVictim, iWeaponId, iHitPlace, 0)
			return
		}
	}
	else
	{
		if (iHitPlace == HIT_HEAD)
		{
			fnUpdateIconMark(iKiller, ICON_HEADSHOT)
		}
		else
		{
			if (iWeaponId == CSW_KNIFE)
				fnUpdateIconMark(iKiller, ICON_KNIFE)
			else
			{
				if (iWeaponId != CSW_HEGRENADE)
					fnUpdateIconMark(iKiller, ICON_NORMAL)
				else	fnUpdateIconMark(iKiller, ICON_GRENADE)
			}
		}
	}
	return					
}

public PW_GrenadeDamage(iVictim, iAttacker, iPrimaryWpnId, iAliveStatus)
{
	if (iAliveStatus)
		return
		
	if (!is_user_connected(iVictim))
		return
		
	if (!is_user_connected(iAttacker))
		return
			
	if (is_user_bot(iAttacker))
		return
		
	fnUpdateIconMark(iAttacker, ICON_GRENADE)
}

/*
public MM_MeleeKilled(iKiller, iVictim, iHeadShot)
{
	new TK 
	if (cs_get_user_team(iKiller) == cs_get_user_team(iVictim))
		TK = 1
	if (!iHeadShot)
		client_death(iKiller, iVictim, CSW_KNIFE, HIT_GENERIC, TK)
	else	client_death(iKiller, iVictim, CSW_KNIFE, HIT_HEAD, TK)
	
	client_print(iKiller, print_chat, "KNIFE KILL")
}
*/

stock can_show_icon_mark()
{
	if (get_current_gameplay() == GAMEMODE_ESCAPE)
		return 0
		
	return 1
}

stock is_user_zombie(id)
{
	if (get_current_gameplay() != GAMEMODE_ZM)
		return 0
		
	return get_user_zombie(id)
}

stock set_float_to_key(id, szKey[], Float:fInput)
{
	if (is_user_bot(id))
		return
		
	if (!iUserInfo[id])
		return
		
	TrieSetCell(iUserInfo[id],szKey, fInput)
}

stock Float:get_float_from_key(id, szKey[])
{
	if (is_user_bot(id))
		return 0.0
		
	if (!iUserInfo[id])
		return 0.0
		
	new Float:fOutput
	TrieGetCell(iUserInfo[id],szKey, fOutput)
	return fOutput
}

stock set_int_to_key(id, szKey[], iInput)
{
	if (is_user_bot(id))
		return
		
	if (!iUserInfo[id])
		return
		
	TrieSetCell(iUserInfo[id],szKey, iInput)
}

stock get_int_from_key(id, szKey[])
{
	if (is_user_bot(id))
		return 0
		
	if (!iUserInfo[id])
		return 0
		
	new iOutput
	TrieGetCell(iUserInfo[id],szKey, iOutput)
	return iOutput
}

