/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <hamsandwich>
#include <TFM_WPN>
#include <cswpn_ultilities>

#include <mmcl_util>
#include <csx>

#include <GamePlay_Included/Tools.inc>

#define PLUGIN "[TFM] Damage Recorder"
#define VERSION "-[No Info]-"
#define AUTHOR "Nguyen Duy Linh"

#define MAX_PLAYERS 33
#define MAX_RECORD 128
#define MAX_LENGTH 128

#define TASK_CZ_FUNCTION 2000
#define TASK_DRAW_KILL_BOARD	3000


#define LIST_SHOWTIME -1.0
#define BOARD_TGA "BOARD_DAMAGE_RECORD"


new iMaxPlayers
new iHamCz = 0



#define MAX_LIST 10

#define PRIMARY_WEAPONS (1<<CSW_M3 | 1<<CSW_XM1014 | 1<<CSW_SCOUT | 1<<CSW_MAC10 | 1<<CSW_AUG | 1<<CSW_UMP45 | 1<<CSW_SG550 | 1<<CSW_GALIL | 1<<CSW_FAMAS | 1<<CSW_AWP | 1<<CSW_MP5NAVY | 1<<CSW_M249 | 1<<CSW_M4A1 | 1<<CSW_TMP | 1<<CSW_G3SG1 | 1<<CSW_SG552 | 1<<CSW_AK47 | 1<<CSW_P90)
#define SECONDARY_WEAPONS (1<<CSW_DEAGLE | 1<<CSW_USP | 1<< CSW_GLOCK18 | 1<<CSW_P228 | 1<<CSW_ELITE | 1<<CSW_FIVESEVEN)
#define GRENADES (1<<CSW_HEGRENADE)

#define is_primary_wpn(%1)      (PRIMARY_WEAPONS & (1<<%1))
#define is_secondary_wpn(%1)	    (SECONDARY_WEAPONS & (1<<%1))
#define is_grenade(%1)	(GRENADES & (1<<%1))

#define MAX_LENGTH 128


new bit_ListShowOn

#define SetPlayerBit(%1,%2)      (%1 |= (1<<(%2&31)))
#define ClearPlayerBit(%1,%2)    (%1 &= ~(1 <<(%2&31)))
#define CheckPlayerBit(%1,%2)    (%1 & (1<<(%2&31)))

/*				TRIE SECTION				*/
new Trie:iHudPosition[33]
new Trie:iDamageRecord[33]

/*				  TRIE KEY				*/

#define SECTION_VICTIM_LIST_X	"VICTIM_LIST_X"
#define SECTION_VICTIM_LIST_Y	"VICTIM_LIST_Y"

#define SECTION_KILLER_X	"KILLER_X"
#define SECTION_KILLER_Y	"KILLER_Y"

#define SECTION_BOARD_X_TGA	"BOARD_X_TGA"
#define SECTION_BOARD_Y_TGA	"BOARD_Y_TGA"

#define SECTION_ROW_SPACE "ROW_SPACE"


#define SECTION_WPN_HUD_X_TGA "WPN_HUD_X_TGA"
#define SECTION_WPN_HUD_Y_TGA "WPN_HUD_Y_TGA"



#define SECTION_SHOWN_HUD	"SHOWN_WEAPON_HUD"
#define SECTION_KILLER_NAME	"KILLER_NAME"

#define INT_INFO_LIST	"INFO_LIST"

#define PREFIX_VICTIM_SLOT "VICTIM_SLOT_"
#define PREFIX_VICTIM_LIST	"VICTIM_LIST_"
#define PREFIX_ALIVE_STATUS	"VICTIM_STATUS_"
#define PREFIX_DAMAGE_STORAGE	"DAMAGE_STORAGE_"

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_concmd("DamageRecord/List_X", "SPR_VICTIM_LIST_X")
	register_concmd("DamageRecord/List_Y", "SPR_VICTIM_LIST_Y")
	
	register_concmd("DamageRecord/Killer_X", "SPR_KILLER_X")
	register_concmd("DamageRecord/Killer_Y", "SPR_KILLER_Y")
	
	register_concmd("DamageRecord/Board_X", "TGA_BOARD_X")
	register_concmd("DamageRecord/Board_Y", "TGA_BOARD_Y")
	
	register_concmd("DamageRecord/RowSpace", "SPR_ROW_SPACE_X")
	
	
	register_concmd("KilledWeapon/HUD_X", "TGA_WPN_HUD_X")
	register_concmd("KilledWeapon/HUD_Y", "TGA_WPN_HUD_Y")
	
	register_concmd("ShowKilledList", "CmdShowKilled")
	//register_event("Damage", "fw_PlayerTakeDamage", "b", "2!0", "3=0", "4!0")
	iMaxPlayers = get_maxplayers()
	
	RegisterHam(Ham_Killed, "player", "fw_PlayerKilledPost", 1)
	RegisterHam(Ham_Spawn, "player", "fw_SpawnPost", 1)
	RegisterHam(Ham_TakeDamage, "player", "fw_TakeDamage", 1)
}


/*				VICTIM LIST				*/

public SPR_VICTIM_LIST_X(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg -1)
	set_float_to_key(iHudPosition[id], SECTION_VICTIM_LIST_X, str_to_float(szArg))
}

public SPR_VICTIM_LIST_Y(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg -1)
	set_float_to_key(iHudPosition[id], SECTION_VICTIM_LIST_Y, str_to_float(szArg))
}


/************************************************************************/

/*				KILLER POS				*/

public SPR_KILLER_X(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg -1)
	set_float_to_key(iHudPosition[id], SECTION_KILLER_X, str_to_float(szArg))
}

public SPR_KILLER_Y(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg -1)
	set_float_to_key(iHudPosition[id], SECTION_KILLER_Y, str_to_float(szArg))
}


/************************************************************************/

/*				DEATH BOARD				*/

//	Death Board [TGA]

public TGA_BOARD_X(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg -1)
	set_float_to_key(iHudPosition[id], SECTION_BOARD_X_TGA, str_to_float(szArg))
}

public TGA_BOARD_Y(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg -1)
	set_float_to_key(iHudPosition[id], SECTION_BOARD_Y_TGA, str_to_float(szArg))
}

/************************************************************************/

/*			       ROW SPACE				*/

public SPR_ROW_SPACE_X(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg -1)
	set_float_to_key(iHudPosition[id], SECTION_ROW_SPACE, str_to_float(szArg))
}

/************************************************************************/


//	Weapon Hud [TGA]

public TGA_WPN_HUD_X(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg -1)
	set_float_to_key(iHudPosition[id], SECTION_WPN_HUD_X_TGA, str_to_float(szArg))
}

public TGA_WPN_HUD_Y(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg -1)
	set_float_to_key(iHudPosition[id], SECTION_WPN_HUD_Y_TGA, str_to_float(szArg))
}

/************************************************************************/

public client_putinserver(id)
{
	
	set_task(0.1, "RegisterCzFunction", id + TASK_CZ_FUNCTION)
	
	if (is_user_bot(id))
		return
	
	if (!iHudPosition[id])
		iHudPosition[id] = TrieCreate()
		
	if (!iDamageRecord[id])
		iDamageRecord[id] = TrieCreate()
		
}

public client_disconnect(id)
{
	if (iHudPosition[id])
		TrieDestroy(iHudPosition[id])
		
	if (iDamageRecord[id])
		TrieDestroy(iDamageRecord[id])
		
}
public RegisterCzFunction(TASKID)
{
	new id = TASKID - TASK_CZ_FUNCTION
	if (!is_user_bot(id))
		return
		
	if (iHamCz)
	{
		if (is_user_alive(id))
			fw_SpawnPost(id)
		return
	}
		
	if (!get_cvar_num("bot_quota"))
		return
		
	
	RegisterHamFromEntity(Ham_TakeDamage, id, "fw_TakeDamage", 1)
	RegisterHamFromEntity(Ham_Spawn, id, "fw_SpawnPost", 1)
	RegisterHam(Ham_Killed, "player", "fw_PlayerKilledPost", 1)
	iHamCz = 1
	
	if (is_user_alive(id))
		fw_SpawnPost(id)
	
}
	

public CmdShowKilled(id)
{
	if (is_user_bot(id))
		return
	
	if (!is_user_connected(id))
		return
		
	if (is_user_alive(id))
		return
		
	if (CheckPlayerBit(bit_ListShowOn, id))
		draw_killed_list(id, 0)
	else	draw_killed_list(id)
}

public fw_PlayerTakeDamage(id)
{
	new iAttacker; iAttacker = get_user_attacker(id)
	new iDamage; iDamage = read_data(2)
	
	if (!is_user_connected(iAttacker))
		return
	
	if (is_user_bot(iAttacker))
		return
		
	new szKey[128]
	formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_VICTIM_SLOT, id)
	new iSlotId = get_int_from_key(iDamageRecord[iAttacker], szKey)
	
	formatex(szKey, sizeof szKey - 1, "%s_%d_%d", PREFIX_DAMAGE_STORAGE, id, iSlotId)
	new iDamageStorage = get_int_from_key(iDamageRecord[iAttacker], szKey) + iDamage
	set_int_to_key(iDamageRecord[id], szKey, iDamageStorage)
}

public fw_PlayerKilledPost(iVictim, iKiller)
{
	if (is_user_connected(iKiller))
		return
		
	UpdateVictimList(iVictim, iKiller, -1)
}

public client_death(iKiller, iVictim, iWpnIndex, iHitplace, iTK)
{
	if (!iKiller || !is_user_connected(iKiller))
		return
		
	if (!is_user_connected(iVictim))
		return
	
	if (iWpnIndex == CSW_HEGRENADE)
		GetKilledWeaponHud(iVictim, iKiller, CSW_HEGRENADE)
	else if (iWpnIndex == CSW_KNIFE)
		GetKilledWeaponHud(iVictim, iKiller, CSW_KNIFE)
	UpdateVictimList(iVictim, iKiller, iWpnIndex)
	
	
}

public GM_GrenadeDamage(iKiller, iVictim, iGrenadeId)
	GetKilledWeaponHud2(iVictim,  get_grenade_real_id(iGrenadeId), iGrenadeId, -1, -1)
	
public PW_GrenadeDamage(iVictim, iKiller, iPrimaryWpnId, iAliveStatus)
{
	if (iAliveStatus)
		return
	
	GetKilledWeaponHud2(iVictim,  get_pw_real_id(iPrimaryWpnId), -1, -1, iPrimaryWpnId)
}
	
stock UpdateVictimList(iVictim, iKiller, iWpnIndex)
{
	if (!is_user_connected(iVictim))
		return
		
	new iPlayers[32], iNumbers
	get_players(iPlayers, iNumbers)
	
	new szVictimName[32]
	get_user_name(iVictim, szVictimName, sizeof szVictimName - 1)
	
	if (is_user_connected(iKiller) && iKiller)
	{
		new szKillerName[32]
		get_user_name(iKiller, szKillerName, sizeof szKillerName - 1)
		set_string_to_key(iDamageRecord[iVictim], SECTION_KILLER_NAME, szKillerName)
		
		if (is_primary_wpn(iWpnIndex) || is_secondary_wpn(iWpnIndex))
			GetKilledWeaponHud(iVictim, iKiller, iWpnIndex)
	}
	else
		set_string_to_key(iDamageRecord[iVictim], SECTION_KILLER_NAME, "-[NO DATA]-")
		
	new szKey[128]
	
	for (new i = 0; i < iNumbers; i++)
	{
		new id = iPlayers[i]
		
		formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_VICTIM_SLOT, iVictim)
		new iSlotId = get_int_from_key(iDamageRecord[id], szKey)
		
		new iList = get_int_from_key(iDamageRecord[id], INT_INFO_LIST)
		
		if (iList > MAX_RECORD - 1)
			continue
		
		formatex(szKey, sizeof szKey - 1, "%s_%d_%d", PREFIX_DAMAGE_STORAGE, iVictim, iSlotId)
		new iDamage  = get_int_from_key(iDamageRecord[id], szKey)
		
		if (iDamage)
		{
			if (is_user_bot(id))
				continue
				
			if (id == iVictim)
				continue
			
			new szInfo[128]
			formatex(szInfo, sizeof szInfo - 1, "%s %d", szVictimName, iDamage)
			
			formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_VICTIM_LIST, iList)
			set_string_to_key(iDamageRecord[id], szKey, szInfo)
			
			formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_ALIVE_STATUS, iList)
			
			if (id == iKiller)
				set_int_to_key(iDamageRecord[id], szKey, 1)
			else	set_int_to_key(iDamageRecord[id] , szKey, 0)
			
			iSlotId++
			formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_VICTIM_SLOT, iVictim)
			set_int_to_key(iDamageRecord[id], szKey, iSlotId)
			
			iList++
			set_int_to_key(iDamageRecord[id], INT_INFO_LIST, iList)
		}
	}
	
	if (is_user_bot(iVictim))
		return
		
	for (new fCheck = 0; fCheck < iNumbers; fCheck++)
	{
		new iPlayer = iPlayers[fCheck]
		
		new iList = get_int_from_key(iDamageRecord[iVictim], INT_INFO_LIST)
		
		if (iList > MAX_RECORD - 1)
			break
			
		if (iVictim == iPlayer)
			continue
			
		formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_VICTIM_SLOT, iPlayer)
		new iSlotId = get_int_from_key(iDamageRecord[iVictim], szKey)
		
		formatex(szKey, sizeof szKey - 1, "%s_%d_%d", PREFIX_DAMAGE_STORAGE, iPlayer, iSlotId)
		new iDamage = get_int_from_key(iDamageRecord[iVictim], szKey)
		
		if (iDamage)
		{
			formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_ALIVE_STATUS, iList)
			new iAliveStatus = get_int_from_key(iDamageRecord[iVictim], szKey)
			
			if (iAliveStatus)
				continue
			
			new szPlayerName[32]
			get_user_name(iPlayer, szPlayerName, sizeof szPlayerName - 1)
			
			new szInfo[128]
			formatex(szInfo, sizeof szInfo - 1, "%s %d", szPlayerName,  iDamage)
			
			formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_VICTIM_LIST, iList)
			set_string_to_key(iDamageRecord[iVictim], szKey, szInfo)
			
			iSlotId++
			formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_VICTIM_SLOT, iPlayer)
			set_int_to_key(iDamageRecord[iVictim], szKey, iSlotId)
			
			iList++
			set_int_to_key(iDamageRecord[iVictim], INT_INFO_LIST, iList)
		}
	}
	
	remove_task(iVictim + TASK_DRAW_KILL_BOARD)
	set_task(1.0, "DrawKillList_TASK", iVictim + TASK_DRAW_KILL_BOARD)
	
	draw_killed_list(iVictim)
}

public DrawKillList_TASK(TASKID)
{
	new id = TASKID - TASK_DRAW_KILL_BOARD
	draw_killed_list(id)
}

public fw_SpawnPost(id)
{
	
	if (is_user_bot(id))
		return
		
	if (iDamageRecord[id])
		TrieDestroy(iDamageRecord[id])
		
	iDamageRecord[id] = TrieCreate()
	
	draw_killed_list(id, 0)
	remove_task(id + TASK_DRAW_KILL_BOARD)
}

public fw_TakeDamage(iVictim, inflictor, iAttacker, Float:fDamage, damagebit)
{
	if (!(1<= iAttacker <= iMaxPlayers))
		return
		
	if (is_user_bot(iAttacker))
		return
		
	if (!is_user_connected(iAttacker))
		return
	
	new szKey[128]
	formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_VICTIM_SLOT, iVictim)
	
	new iSlotId = get_int_from_key(iDamageRecord[iAttacker], szKey)
	
	formatex(szKey, sizeof szKey - 1, "%s_%d_%d", PREFIX_DAMAGE_STORAGE, iVictim, iSlotId)
	new iStorageDamage = get_int_from_key(iDamageRecord[iAttacker], szKey) + pev(iVictim, pev_dmg_take)
	set_int_to_key(iDamageRecord[iAttacker], szKey, iStorageDamage)
}

stock draw_killed_list(id, iToggle = 1)
{
	if (!is_user_connected(id))
		return
		
	if (is_user_bot(id))
		return
		
	remove_task(id + TASK_DRAW_KILL_BOARD)
	
	if (!iToggle)
	{
		MMCL_RemoveImage(id, HUDTYPE_TGA, CHANNEL_KILL_BOARD_TGA)
		MMCL_RemoveImage(id, HUDTYPE_TEXT, TEXT_DMG_RECORD_KILLER_NAME)
		MMCL_RemoveImage(id, HUDTYPE_TGA, CHANNEL_KILLED_WPN_TGA)
		
		
		for (new i = 0; i < MAX_LIST; i++)
			MMCL_RemoveImage(id, HUDTYPE_TEXT, i + TEXT_DMG_RECORD_START)
		
		ClearPlayerBit(bit_ListShowOn, id)
		
		return
	}
	
	new Float:fX
	new Float:fY
	new szPlayerName[32]
	
	get_float_from_key(iHudPosition[id], SECTION_KILLER_X, fX)
	get_float_from_key(iHudPosition[id], SECTION_KILLER_Y, fY)
	
	get_string_from_key(iDamageRecord[id], SECTION_KILLER_NAME, szPlayerName, sizeof szPlayerName - 1)
	MMCL_DrawText(id, szPlayerName, 255, 255, 0, fX, fY, 0, LIST_SHOWTIME, TEXT_DMG_RECORD_KILLER_NAME)
		
	new Float:fReduce = 0.0
	
	new iList = get_int_from_key(iDamageRecord[id], INT_INFO_LIST)
	
	if (iList > MAX_LIST -1)
		iList = MAX_LIST - 1
	
	get_float_from_key(iHudPosition[id], SECTION_VICTIM_LIST_X, fX)
	get_float_from_key(iHudPosition[id], SECTION_VICTIM_LIST_Y, fY)
	
	new szKey[128]
	
	new Float:fRowSpace
	get_float_from_key(iHudPosition[id], SECTION_ROW_SPACE, fRowSpace)
		
	for (new i = 0; i < iList; i++)
	{
		new Float:fFixedY = fY - fReduce
		
		formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_VICTIM_LIST, i)
		get_string_from_key(iDamageRecord[id], szKey, szPlayerName, sizeof szPlayerName - 1)
			
		formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_ALIVE_STATUS, iList)
		new iAliveStatus = get_int_from_key(iDamageRecord[id], szKey)
		
		if (iAliveStatus)
			MMCL_DrawText(id, szPlayerName, 41, 207, 3,  fX, fFixedY, 0, LIST_SHOWTIME, i + TEXT_DMG_RECORD_START)
		else	
			MMCL_DrawText(id, szPlayerName, 255, 255, 255, fX, fFixedY, 0, LIST_SHOWTIME, i + TEXT_DMG_RECORD_START)
		
		fReduce += fRowSpace
	}
	
	SetPlayerBit(bit_ListShowOn, id)
	
	new RealTGA[128]
	formatex(RealTGA, sizeof RealTGA - 1, "%s/%s.tga", TFM_TGA_DIRECTORY, BOARD_TGA)
		
		
	if (!file_exists(RealTGA))
		return
		
	formatex(RealTGA, sizeof RealTGA - 1, "%s/%s", TFM_TGA_DIRECTORY, BOARD_TGA)
	
	get_float_from_key(iHudPosition[id], SECTION_BOARD_X_TGA, fX)
	get_float_from_key(iHudPosition[id], SECTION_BOARD_Y_TGA, fY)

	
	MMCL_DrawTGA(id, RealTGA, 255, 255, 255, 255, fX, fY, 0, 0, 0.0, 0.0, -1.0, CHANNEL_KILL_BOARD_TGA)
	
	new szShownHud[64]
	get_string_from_key(iDamageRecord[id], SECTION_SHOWN_HUD, szShownHud, sizeof szShownHud - 1)
	ShowWpnHud(id, szShownHud, LIST_SHOWTIME, 255, 255, 255, 0)
	
	
}		
		
stock GetKilledWeaponHud(id, iKiller, iWeaponId)
{
	new iZombie = is_user_zombie(iKiller)
	
	new szShownHud[64]
	
	UT_Get_CS_Hud(iWeaponId, szShownHud, sizeof szShownHud - 1)
	
	if (iZombie)
	{
		new iClassId = get_user_zombie_class(iKiller)
		get_class_wpn_hud(iClassId, iWeaponId, szShownHud, sizeof szShownHud - 1)
		set_string_to_key(iDamageRecord[id], SECTION_SHOWN_HUD, szShownHud)
		return
	}
	if (iWeaponId == CSW_KNIFE)
	{
		new iMeleeId = get_user_melee(id)
		if (iMeleeId > -1)
			get_melee_hud(iMeleeId, szShownHud, sizeof szShownHud - 1)
	}
	else
	{
		if (is_primary_wpn(iWeaponId))
		{
			new iPrimaryWpnId = get_user_pw(iKiller)
			if (iPrimaryWpnId > -1)
			{
				get_pw_hud(iPrimaryWpnId , szShownHud, sizeof szShownHud - 1)
				
			}
			
			
		}
		else  if (is_secondary_wpn(iWeaponId))
		{
			new iSecondaryWpnId = get_user_sec_wpn(iKiller)
			if (iSecondaryWpnId > -1)
				get_sec_wpn_hud(iSecondaryWpnId , szShownHud, sizeof szShownHud - 1)	
			
			
		}
		
		
	}
	set_string_to_key(iDamageRecord[id], SECTION_SHOWN_HUD, szShownHud)
	
}

stock GetKilledWeaponHud2(id, iWeaponId, iGrenadeId, iMeleeId, iPrimaryWpnId)
{
	new szShownHud[64]
	UT_Get_CS_Hud(iWeaponId, szShownHud, sizeof szShownHud - 1)
	
	if (iWeaponId == CSW_KNIFE)
	{
		if (iMeleeId > -1)
			get_melee_hud(iMeleeId, szShownHud, sizeof szShownHud - 1)
		
	}
	else if (is_grenade(iWeaponId))
	{
		if (iGrenadeId> -1)
			get_grenade_hud(iGrenadeId , szShownHud, sizeof szShownHud - 1)
		
	}
	else if (is_primary_wpn(iWeaponId))
	{
		
		if (iPrimaryWpnId > -1)
		{
			get_pw_hud(iPrimaryWpnId , szShownHud, sizeof szShownHud - 1)
			
		}
		
	}
	
	set_string_to_key(iDamageRecord[id], SECTION_SHOWN_HUD, szShownHud)
}

public ShowWpnHud(id, szHUD[], Float:fDisplayTime, iRed, iGreen, iBlue, iEffect)
{
	if (is_user_bot(id))
		return
		
	if (!is_user_connected(id))
		return
		
	new szRealHud[128]
	
	
	
	
	formatex(szRealHud, sizeof szRealHud - 1, "%s/HUD_WPN/%s.tga", TFM_TGA_DIRECTORY, szHUD)
	
	if (!file_exists(szRealHud))
		return
			
	formatex(szRealHud, sizeof szRealHud - 1, "%s/HUD_WPN/%s", TFM_TGA_DIRECTORY, szHUD)	
	
	new Float:fX, Float:fY
	get_float_from_key(iHudPosition[id], SECTION_WPN_HUD_X_TGA, fX)
	get_float_from_key(iHudPosition[id], SECTION_WPN_HUD_Y_TGA, fY)
				
	MMCL_DrawTGA(id, szRealHud, 255, 255, 255, 255, fX, fY, 1, 0, 0.0, 0.0, -1.0, CHANNEL_KILLED_WPN_TGA)
}




stock set_float_to_key(Trie:iTrie, szKey[], Float:fInput)
{
	if (!iTrie)
		return
	
	TrieSetCell(iTrie, szKey, fInput)
}

stock get_float_from_key(Trie:iTrie, szKey[], &Float:fOutput)
{
	if (!iTrie)
		return
	
	if (!TrieKeyExists(iTrie, szKey))
		return
		
	fOutput = 0.0
	TrieGetCell(iTrie, szKey, fOutput)
}

stock get_string_from_key(Trie:iTrie, szKey[], szOutput[], iLen)
{
	if (!iTrie)
		return
	
	TrieGetString(iTrie, szKey, szOutput, iLen)
}

stock set_string_to_key(Trie:iTrie, szKey[], szInput[])
{
	if (!iTrie)
		return
	
	TrieSetString(iTrie, szKey, szInput)
}

stock set_int_to_key(Trie:iTrie, szKey[], iInput)
{
	if (!iTrie)
		return
		
	TrieSetCell(iTrie,szKey, iInput)
}

stock get_int_from_key(Trie:iTrie, szKey[])
{
		
	if (!iTrie)
		return 0
		
	if (!TrieKeyExists(iTrie, szKey))
		return 0
		
	new iOutput
	TrieGetCell(iTrie,szKey, iOutput)
	return iOutput
}
