/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <hamsandwich>
#include <fakemeta>
#include <cstrike>
#include <xs>
#include <celltrie>
#include <engine>
#include <cstrike_pdatas>
#include <fakemeta_util>
#include <cswpn_ultilities>

	

#define TASK_CZ_FUNCTION 2000

#define CONFIGURATION_FILE	"TFM_CS_WeaponInfo.ini"
		
		
new ifw_ItemDrop
new ifw_WpnAtkPre
new ifw_WpnAtkPost
new ifw_WpnSecAtkPre
new ifw_WpnSecAtkPost
new ifw_WpnReloadPre
new ifw_WpnReloadPost
new ifw_ItemPostFrame
new ifw_ItemDeployPre
new ifw_ItemDeployPost
new ifw_ItemAttachToPlayer
new ifw_ItemAttachToPlayerPost
new ifw_ItemHolster_Pre
new ifw_ItemHolster_Post
new ifw_RemovePlayerItem

new ifw_SendAnimPre
new ifw_SendAnimPost
new ifw_ShieldAttached
new ifw_ShieldTouched
new ifw_WeaponIdle_Pre
new ifw_WeaponIdle_Post
new ifw_WpnBoxThinkPre
new ifw_WpnBoxThinkPost
new ifw_WeaponPlayEvent
new ifw_WeaponTraceAttack



new ifw_Result



new gfw_PrecacheEvent
new gfw_EntitySpawn


new iMsg_CurWeapon, iMsg_WeaponList, iMsg_HalfLife_Crosshair
new iMsg_ItemPickUp

new iCSWPN_EVENT_BITSUM




new Trie:RegisteredClasses
new Trie:iBrushEntity


#define HIT_SHIELD 8

#define WEAPON_SOUND_DIR	"weapons/TFM_WPN/default"

new Trie:TRIE_WeaponInfo

#define TRIE_FIELD_NAME	"NAME" // Done
#define TRIE_FIELD_HUD	"HUD"	// Done
#define TRIE_FIELD_ANIM_EXT	"ANIM-EXT"	// Done
#define TRIE_FIELD_CLIP	"CLIP" // Done
#define TRIE_FIELD_BPA	"BPA" // Done
#define TRIE_FIELD_DEPLOYTIME	"DEPLOY-TIME" // Done
#define TRIE_FIELD_RELOADTIME	"RELOAD-TIME" // Done
#define TRIE_FIELD_ROF	"ROF" // Done
#define TRIE_FIELD_ROF_ADS	"ROF_ADS" // Done
#define TRIE_FIELD_SPEED	"SPEED" // Done
#define TRIE_FIELD_WEIGHT	"WEIGHT" // Done
#define TRIE_FIELD_COST		"COST" // Done
#define TRIE_FIELD_COST_TYPE	"COST-TYPE" // Done

#define TRIE_FIELD_ADS_STATE	"ADS-STATE"	// Done
#define TRIE_FIELD_ADS_FOV	"ADS-FOV"	// Done
#define TRIE_FIELD_SEMI_WPN	"SEMI-WPN"	// Done
#define TRIE_FIELD_INSERT_TIME	"INSERT_TIME"	// Done
#define TRIE_FIELD_AF_IS_TIME	"AF_IS_TIME"	// Done
#define TRIE_FIELD_RELOAD_TYPE	"RELOAD_TYPE"	// Done
#define TRIE_FIELD_CROSSHAIR	"CROSSHAIR"	// Done


stock const DEFAULT_WEAPON_SOUND[][] = 
{ 
	"", "p228-1.wav", "","scout_fire-1.wav","HEGRENADE","xm1014-1.wav","C4", "mac10-1.wav", "aug-1.wav",
	"SMOKEGRENADE","elite_fire.wav","fiveseven-1.wav","ump45-1.wav","sg550-1.wav","galil-1.wav",
	"famas.wav","usp_unsil-1.wav","glock18-1.wav","awp1.wav","mp5-1.wav","m249-1.wav","m3-1.wav",
	"m4a1_unsil-1.wav","tmp-1.wav","g3sg1-1.wav","FLASHBANG","deagle-1.wav","sg552-1.wav",
	"ak47-1.wav","KNIFE" ,"p90-1.wav"
}				

stock const Float:Default_KbPower[] = 
{
	-1.0, 6.125/*P228*/, -1.0, 15.65/*Styer Scout*/, -1.0, 12.25 /*XM1014*/, -1.0, 8.3 /*MAC10*/,
	12.72/*Styer Aug*/, -1.0, 4.495/*Dual Elite*/,4.65/*FN 57*/,8.34/*UMP45*/,11.35/*SG550*/,
	12.55/*Galil*/, 12.0 /*Famas*/,4.162/*HK USP*/,3.422/*Glock18*/,
	15.6855/*AWP*/,8.015/*MP5 NAVY*/,13.52/*M249*/,10.40/*M3*/,12.7542/*M4A1*/,
	8.1924/*TMP*/,18.0/*HK G3SG1*/,-1.0, 9.475/*Desert Eagle*/, 12.15/*SG552*/,13.0/*AK47*/,-1.0,8.350 /*FN P90*/
}

stock const Default_KbDistance[] = 
{
	-1, 410/*P228*/,-1, 700/*Styer Scout*/, -1, 450/*XM1014*/,-1, 405/*MAC10*/, 545/*Styer Aug*/,-1, 400/*Dual Elite*/,
	450/*FN 57*/, 505/*UMP45*/ ,735/*SG550*/, 550/*Galil*/,577/*Famas*/,415/*HK USP*/,400/*Glock 18*/,700/*AWP*/,422/*MP5 NAVY*/,
	550/*M249*/,420/*M3*/,550/*M4A1*/,420/*TMP*/,600/*HK G3SG1*/,-1,538/*Desert Eagle*/,503/*SG552*/,
	520/*AK47*/,-1,	412/*FN P90*/
}




new iMAX_PLAYERS

new iWeaponSoundIndex[CSW_P90 + 1][2]

#define pev_iDeployed	pev_iuser1






#define MAX_WEAPON 32
new iCSWPN_BPA[33][MAX_WEAPON]


#define SetBit(%1,%2)      (%1[%2>>5] |= (1<<(%2 & 31)))
#define ClearBit(%1,%2)    (%1[%2>>5] &= ~(1<<(%2 & 31)))
#define CheckBit(%1,%2)    (%1[%2>>5] & (1<<(%2 & 31)))  

new iBulletID




new iHamCZ = 0


public plugin_natives()
{
	register_native("UT_MakeWpnPrimAtk", "_MakeWpnPrimAtk", 1)
	register_native("UT_MakeWpnSecAtk", "_MakeWpnSecAtk", 1)
	register_native("UT_MakeWpnReload", "_MakeWpnReload", 1)
	register_native("UT_SendCurWeaponMsg", "_SendCurWeaponMsg", 1)
	register_native("UT_UpdateWpnList", "_UpdateWpnList", 1)
	register_native("UT_HL_Crosshair_Toggle", "_HL_Crosshair_Toggle", 1)
	register_native("UT_CS_Crosshair_Toggle", "_CS_Crosshair_Toggle", 1)
	
	register_native("UT_Get_CS_FireSound", "_Get_CS_FireSound", 1)
	register_native("UT_Get_CS_Reload_Time", "_Get_CS_Reload_Time", 1)
	register_native("UT_Get_CS_Speed", "_Get_CS_Speed", 1)
	register_native("UT_Get_CS_Weight", "_Get_CS_Weight", 1)
	register_native("UT_Get_CS_StartAdsTime", "_Get_CS_StartAdsTime", 1)
	register_native("UT_Get_CS_EndAdsTime", "_Get_CS_EndAdsTime", 1)
	register_native("UT_Get_CS_ROF", "_Get_CS_ROF", 1)
	register_native("UT_Get_CS_Name", "_Get_CS_Name", 1)
	register_native("UT_Get_CS_ADS_State", "_Get_CS_ADS_State", 1)
	register_native("UT_Get_CS_SemiWpn", "_Get_CS_SemiWpn", 1)
	register_native("UT_Get_CS_ADS_FOV", "_Get_CS_ADS_FOV", 1)
	register_native("UT_Get_CS_Accuracy", "_Get_CS_Accuracy", 1)
	register_native("UT_Get_CS_ROF_ADS", "_Get_CS_ROF_ADS", 1)
	register_native("UT_Get_CS_Recoil_Ads", "_Get_CS_Recoil_Ads", 1)
	register_native("UT_Get_CS_Hud", "_Get_CS_Hud", 1)
	register_native("UT_Get_CS_Cost", "_Get_CS_Cost", 1)
	register_native("UT_Get_CS_CostType", "_Get_CS_CostType", 1)
	register_native("UT_Get_CS_DeployTime", "_Get_CS_DeployTime", 1)
	register_native("UT_Get_CS_Start_IS",	"_Get_CS_Start_IS", 1)
	register_native("UT_Get_CS_Finish_IS",	"_Get_CS_Finish_IS", 1)
	register_native("UT_Get_CS_ReloadType", "_Get_CS_ReloadType", 1)
	register_native("UT_Get_CS_Crosshair", "_Get_CS_Crosshair", 1)
	register_native("UT_WorldModelToWeaponId", "_WorldModelToWeaponId", 1)
	register_native("UT_WeaponIdToWorldModel", "_WeaponIdToWorldModel", 1)
	
	
	register_native("UT_PlayWeaponAnim", "_PlayWeaponAnim", 1)
	
	register_native("Get_CSWPN_StandIdle", "_CSWPN_StandIdle", 1)
	register_native("Get_CSWPN_StandShoot", "_CSWPN_StandShoot", 1)
	register_native("Get_CSWPN_StandReload", "_CSWPN_StandReload", 1)
	
	register_native("Get_CSWPN_CrouchIdle", "_CSWPN_CrouchIdle", 1)
	register_native("Get_CSWPN_CrouchShoot", "_CSWPN_CrouchShoot", 1)
	register_native("Get_CSWPN_CrouchReload", "_CSWPN_CrouchReload", 1)
	
	register_native("Get_CSWPN_Anim_Shoot1", "_CSWPN_Anim_Shoot1", 1)
	register_native("Get_CSWPN_Anim_Shoot2", "_CSWPN_Anim_Shoot1", 1)
	register_native("Get_CSWPN_Anim_Shoot3", "_CSWPN_Anim_Shoot1", 1)
	
	register_native("Get_CSWPN_Anim_Draw", "_CSWPN_Anim_Draw", 1)
	register_native("Get_CSWPN_Anim_Reload", "_CSWPN_Anim_Reload", 1)
	register_native("Get_CSWPN_Anim_Idle", "_CSWPN_Anim_Idle", 1)
	
	register_native("Get_CSWPN_MaxAnimation", "_CSWPN_MaxAnimation", 1)
	
	register_native("UT_DropPrimaryWeapon", "_DropPlayerPrimWeapon", 1)
	register_native("UT_StripPrimaryWeapon", "_StripPlayerPrimWeapon", 1)
	register_native("UT_DropSecondaryWeapon", "_DropPlayerSecWeapon", 1)
	register_native("UT_StripPlayerWeapon", "_StripPlayerWeapon", 1)
	register_native("UT_StripSecondaryWeapon", "_StripSecondaryWeapon", 1)
	register_native("UT_StripWeaponEnt", "_StripWeaponEnt", 1)
	
	register_native("UT_Get_CS_DefaultClip", "_Get_CS_DefaultClip", 1)
	register_native("UT_Get_CS_DefaultBpa", "_Get_CS_DefaultBpa", 1)
	register_native("UT_GiveDamageToEntity", "_GiveDamageToEntity", 1)
	
	register_native("UT_CreateShotgunBullet", "CreateShotgunBullet", 1)
	register_native("UT_CreateBullet", "CreateBullet", 1)
	
	register_native("UT_SetUserBPA", "_SetUserBPA", 1)
	register_native("UT_GetUserBPA", "_GetUserBPA", 1)
	
	register_native("UT_IsBombTargetedEnt", "_IsBombTargetedEnt", 1)
	register_native("UT_Get_CS_SoundIndex", "_Get_CS_SoundIndex", 1)
	register_native("UT_DrawPickUpHud", "_DrawPickUpHud", 1)
	register_native("UT_GetWeaponExtension", "_GetWeaponExtension", 1)
	register_native("UT_SetPlayerSequence", "_SetPlayerSequence", 1)
	register_native("UT_GetPlayerSequence", "_GetPlayerSequence", 1)
	
	register_native("UT_Get_CS_WpnModel", "_Get_CS_WPNModel", 1)
	
	register_native("UT_IsBrushEnt", "_IsBrushEnt", 1)
	register_native("UT_MeleeAttack", "native_SlashMelee", 1)
	
	register_native("UT_GiveUserWeapon", "_GiveUserWeapon", 1)
}

public _GetWeaponExtension(iWeaponId, iIsShield, szExtension[], iLen)
{
	param_convert(3)
	
	if (!is_valid_weapon(iWeaponId))
	{
		formatex(szExtension, iLen, "dummy")
		return 0
	}
	
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_CLIP)
	
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
	{
		new DEFAULT_ANIM_EXTENSION[][] = 
		{
			"onehanded", "onehanded"/*P228*/, "onehanded", "rifle"/*Styer Scout*/, "grenade"/*HE GRENADE*/, "shotgun"/*XM1014*/,
			"c4"/*C4*/,"onehanded"/*MAC10*/,"carbine"/*Styer Aug*/, "grenade"/*SMOKE GRENADE*/,"dualpistols"/*Dual Elite*/,
			"onehanded"/*FN 57*/,"carbine"/*UMP45*/,"rifle"/*SG550*/,"rifle"/*Galil*/,"carbine"/*Famas*/,"onehanded"/*HK USP*/,
			"onehanded"/*Glock 18*/, "rifle"/*AWP*/,"mp5"/*MP5*/, "m249"/*M249*/,"shotgun"/*M3*/,"rifle"/*M4A1*/,
			"onehanded"/*TMP*/,"mp5"/*G3SG1*/, "grenade"/*Flashbang*/,"onehanded"/*Desert Eagle*/, "mp5"/*SG552*/,
			"rifle"/*AK47*/,"knife"/*KNIFE*/, "carbine" /*FN P90*/
		}
			
			
		#define EXTENSION_SHIELD_PISTOL "shieldgun"
		#define EXTENSION_SHIELD_KNIFE	"shieldknife"
		#define EXTENSION_SHIELD_GREN	"shieldgren"
		#define EXTENSION_SHIELD	"shield"
	
		
		
		if (!iIsShield)
		{
			formatex(szExtension, iLen, DEFAULT_ANIM_EXTENSION[iWeaponId])
			return 1
		}
		
		if (is_secondary_wpn(iWeaponId))
		{
			formatex(szExtension, iLen, EXTENSION_SHIELD_PISTOL)
			return 1
		}
		
		if (iWeaponId == CSW_KNIFE)
		{
			formatex(szExtension, iLen, EXTENSION_SHIELD_KNIFE)
			return 1
		}
		
		if (iWeaponId == CSW_FLASHBANG || iWeaponId == CSW_HEGRENADE || iWeaponId == CSW_SMOKEGRENADE)
		{
			formatex(szExtension, iLen, EXTENSION_SHIELD_GREN)
			return 1
		}
		
		formatex(szExtension, iLen, EXTENSION_SHIELD)
		return 1
	}
	
	TrieGetString(TRIE_WeaponInfo, szKey, szExtension, iLen)
	return 1
}

public _SetPlayerSequence(id, szSequence[])
{
	param_convert(2)
	set_pdata_string(id, 492*4, szSequence, -1, 5)
}

public _GetPlayerSequence(id, szSequence[], iLen)
{
	param_convert(2)
	get_pdata_string(id, 492*4, szSequence, iLen, 0, 5)
}

public _Get_CS_WPNModel(iWeaponId, szOutput[], iLen)
{
	if (!is_valid_weapon(iWeaponId))
		return
	
	new DEFAULT_CSWPN_MODEL[][] = 
	{
		"", "p228"/*P228*/, "", "scout"/*Styer Scout*/, "hegrenade"/*HE GRENADE*/, "xm1014"/*M249*/,
		"c4"/*C4*/,"mac10"/*MAC10*/,"aug"/*Styer Aug*/, "smokegrenade"/*SMOKE GRENADE*/,
		"elite"/*Dual Elite*/,"fiveseven"/*FN 57*/,"ump45"/*UMP45*/,"sg550"/*SG550*/,
		"galil"/*Galil*/,"famas"/*Famas*/,"usp"/*HK USP*/,
		"glock18"/*Glock 18*/, "awp"/*AWP*/,"mp5"/*MP5*/, "m249"/*M249*/,
		"m3"/*M3*/,"m4a1"/*M4A1*/,
		"tmp"/*TMP*/,"g3sg1"/*G3SG1*/, "flashbang"/*Flashbang*/,
		"deagle"/*Desert Eagle*/, "sg552"/*SG552*/,
		"ak47"/*AK47*/,"knife"/*KNIFE*/, "p90" /*FN P90*/
	}
	
	param_convert(2)
	formatex(szOutput, iLen, DEFAULT_CSWPN_MODEL[iWeaponId])
	return
	
}

public _IsBrushEnt(szClassName[])
{
	param_convert(1)
	
	if (TrieKeyExists(iBrushEntity, szClassName))
		return 1
		
	return 0
}

public _DrawPickUpHud(id, szItemHud[], iEngineMsg)
{
	if (!is_user_alive(id) || is_user_bot(id))
		return
		
	if (iEngineMsg)
	{
		emessage_begin(MSG_ONE_UNRELIABLE, iMsg_ItemPickUp, _, id)
		ewrite_string(szItemHud)
		emessage_end()
		return
	}
	
	message_begin(MSG_ONE_UNRELIABLE, iMsg_ItemPickUp, _, id)
	write_string(szItemHud)
	message_end()
}

public _Get_CS_SoundIndex(iWeaponId, iSpecial)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return 0
		
	if (iSpecial)
	{
		if (iWeaponId == CSW_USP || iWeaponId == CSW_GLOCK18 || iWeaponId == CSW_FAMAS || iWeaponId == CSW_M4A1)
			return iWeaponSoundIndex[iWeaponId][1]
	}
	
	return iWeaponSoundIndex[iWeaponId][0] 
}

public _IsBombTargetedEnt(iEnt)
{		
	if (!is_Ent_Breakable(iEnt))
		return 1
		
	return 0
}

public _SetUserBPA(id, iWeaponId, iBpa)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90 || iWeaponId == CSW_KNIFE || iWeaponId == 2)
		return
	
	if (iWeaponId == CSW_HEGRENADE || iWeaponId == CSW_FLASHBANG || iWeaponId == CSW_SMOKEGRENADE)
		return
		
	iCSWPN_BPA[id][iWeaponId] = iBpa
	cs_set_user_bpammo(id, iWeaponId, iBpa)
}

public _GetUserBPA(id, iWeaponId)
{
	if (iWeaponId == CSW_KNIFE || iWeaponId == 2)
		return 0
		
	return iCSWPN_BPA[id][iWeaponId]
}

public CreateShotgunBullet(id, iWeaponEnt, cShots, Float:flSpread, DMG_TYPE, Float:fDamage, Float:fPropertyDistance)
{
	new Float:vecSrc[3], Float:vecOrigin[3], Float:vecViewOfs[3];

	pev(id, pev_origin, vecOrigin);
	pev(id, pev_view_ofs, vecViewOfs);

	xs_vec_add(vecOrigin, vecViewOfs, vecSrc);

	new Float:vecVAngle[3], Float:vecPunchAngle[3], Float:vecTemp[3], Float:vecDirShooting[3];

	pev(id, pev_v_angle, vecVAngle);
	pev(id, pev_punchangle, vecPunchAngle);
	xs_vec_add(vecVAngle, vecPunchAngle, vecTemp);

	engfunc(EngFunc_MakeVectors, vecTemp);
	global_get(glb_v_forward, vecDirShooting);

	new Float:vecSpread[3];
	vecSpread[0] = flSpread;
	vecSpread[1] = flSpread;
	vecSpread[2] = flSpread;
	
	#define SHOT_DISTANCE_POSSIBLE 2048.0
	
	FireBulletsPlayer(iWeaponEnt, cShots, vecSrc, vecDirShooting, vecSpread, SHOT_DISTANCE_POSSIBLE, fDamage, id, DMG_TYPE, fPropertyDistance)
}

public CreateBullet(id, iWeaponEnt, Float:flSpread, DMG_TYPE, Float:fDamage, Float:fPropertyDistance)
{
	new Float:vecSrc[3], Float:vecOrigin[3], Float:vecViewOfs[3];

	pev(id, pev_origin, vecOrigin);
	pev(id, pev_view_ofs, vecViewOfs);

	xs_vec_add(vecOrigin, vecViewOfs, vecSrc);

	new Float:vecVAngle[3], Float:vecPunchAngle[3], Float:vecTemp[3], Float:vecDirShooting[3];

	pev(id, pev_v_angle, vecVAngle);
	pev(id, pev_punchangle, vecPunchAngle);
	xs_vec_add(vecVAngle, vecPunchAngle, vecTemp);

	engfunc(EngFunc_MakeVectors, vecTemp);
	global_get(glb_v_forward, vecDirShooting);

	new Float:vecSpread[3];
	vecSpread[0] = flSpread;
	vecSpread[1] = flSpread;
	vecSpread[2] = flSpread;

	FireBullets3(iWeaponEnt, vecSrc, vecDirShooting, SHOT_DISTANCE_POSSIBLE, vecSpread,  fDamage, id, DMG_TYPE, fPropertyDistance)
		
}

public _Get_CS_DefaultClip(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 0
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_CLIP)
	
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
	{
		
		new const DEFAULT_WEAPON_AMMO[] = 
		{
			-1, 13/*P228*/,	-1, 10/*Styer Scout*/,-1, 7/*XM1014*/,-1, 30/*MAC10*/, 30/*Styer Aug*/,-1, 30/*Dual Elite*/,
			20/*FN 57*/,25/*UMP45*/,20/*SG550*/,35/*Galil*/, 25/*Famas*/,12/*HK USP*/, 20/*Glock 18*/, 10/*AWP*/,
			30/*MP5 Navy*/, 100/*M249*/, 8/*M3*/, 30/*M4A1*/,30/*TMP*/,20/*HK G3SG1*/, -1, 7/*Desert Eagle*/,
			30/*SG552*/, 30/*AK47*/,-1, 50/*FN P90*/
		}
	
		return DEFAULT_WEAPON_AMMO[iWeaponId]
	}
	
	TrieGetCell(TRIE_WeaponInfo, szKey, iWeaponId)
	return iWeaponId
}

public _Get_CS_DefaultBpa(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 0
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_BPA)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
	{
		
		new const DEFAULT_WEAPON_BPA[] = 
		{
			-1, 52/*P228*/, -1, 20/*Styer Scout*/, -1, 21 /*XM1014*/,-1, 90/*MAC10*/, 60/*Styer Aug*/, -1,
			60/*Dual Elite*/, 60/*FN 57*/, 100/*UMP45*/, 60/*SG550*/, 70/*Galil*/, 75/*Famas*/, 48/*HK USP*/,
			60/*Glock 18*/, 20/*AWP*/, 90/*MP5 Navy*/, 100/*M249*/, 24/*M3*/, 60/*M4A1*/, 90 /*TMP*/,
			40/*HK G3SG1*/, -1, 28/*Desert Eagle*/, 60/*SG552*/,60 /*AK47*/, -1, 100/*FN P90*/
		}
	
		return DEFAULT_WEAPON_BPA[iWeaponId]
	}
	
	TrieGetCell(TRIE_WeaponInfo, szKey, iWeaponId)
	return iWeaponId
}

public _GiveDamageToEntity(iEntity, iDmgInflictor, iId, Float:fDamage, iDMG_TYPE)
	ExecuteHamB(Ham_TakeDamage, iEntity, iDmgInflictor, iId, fDamage, iDMG_TYPE)
	
public _CSWPN_MaxAnimation(iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return 0
		
	new CSWPN_MAX_ANIMATION[] =
	{
		0, 6, 0, 4, 3, 6, 3, 5, 5, 3, 15, 5,
		5, 4, 5, 5, 15, 12, 5, 5, 4, 6, 13, 5,
		4, 3, 5, 5, 5, 7 , 5
	}

	return CSWPN_MAX_ANIMATION[iWeaponId]
}

public _CSWPN_StandIdle(iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return 0
		
	new const SEQUENCE_STAND_IDLE[] =
	{
		0, 19 , 0, 33 , 56 , 51 , 62 , 19 , 13 ,
		56 , 26 , 19 , 13 , 33 , 80 , 19, 19 ,
		19 , 33 , 39 , 51 , 45 , 33 , 19 ,
		39 , 56 , 19 , 39 , 80 , 75 , 13 
	
	}

	return SEQUENCE_STAND_IDLE[iWeaponId]
}

public _CSWPN_StandShoot(iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return 0
		
	new const SEQUENCE_STAND_SHOOT[] =
	{
		0, 20 , 0, 34 , 57 , 52 , 63 , 20 , 14 ,
		57 , 27 , 20 , 14 , 34 , 81 , 20, 20 ,
		20 , 34 , 40 , 52 , 46 , 34 , 20 ,
		40 , 57 , 20 , 40 , 81 , 76 , 14 
	
	}

	return SEQUENCE_STAND_SHOOT[iWeaponId]
}

public _CSWPN_StandReload(iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return 0
		
	new const SEQUENCE_STAND_RELOAD[] =
	{
		0, 21 , 0, 35 , 58 , 53 , 64 , 21 , 15 ,
		58 , 28 , 21 , 15 , 35 , 82 , 21, 21 ,
		21 , 35 , 41 , 53 , 47 , 35 , 21 ,
		41 , 58 , 21 , 41 , 82 , 75 , 15 
	
	}

	return SEQUENCE_STAND_RELOAD[iWeaponId]
}

public _CSWPN_CrouchIdle(iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return 0
		
	new const SEQUENCE_CROUCH_IDLE[] =
	{
		0, 16 , 0, 30 , 58 , 48 , 60 , 16 , 10 , 58 , 22 ,
		16 , 10 , 30 , 77 , 10 , 16 , 16 , 30 , 36 ,
		48 , 42 , 30 , 16 , 36 , 58 , 16 , 36 , 77 ,
		73 , 10 
	}

	return SEQUENCE_CROUCH_IDLE[iWeaponId]
}

public _CSWPN_CrouchShoot(iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return 0
		
	new const SEQUENCE_CROUCH_SHOOT[] =
	{
		0, 17 , 0, 31 , 59 , 49 , 61 , 17 , 11 , 59 , 23 ,
		17 , 11 , 31 , 78 , 11 , 17 , 17 , 31 , 37 ,
		49 , 43 , 31 , 17 , 37 , 59 , 17 , 37, 78 ,
		74 , 11 
	}

	return SEQUENCE_CROUCH_SHOOT[iWeaponId]
}

public _CSWPN_CrouchReload(iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return 0
		
	new const SEQUENCE_CROUCH_RELOAD[] =
	{
		0, 18 , 0, 32 , 60 , 50 , 62 , 18 , 12 , 60 , 24 ,
		18 , 12 , 32 , 79 , 12 , 18 , 18 , 32 , 38 ,
		50 , 44 , 32 , 18 , 38 , 60 , 18 , 38, 79 ,
		73 , 12 
	}

	return SEQUENCE_CROUCH_RELOAD[iWeaponId]
}

public _WorldModelToWeaponId(const szWorldModel[])
{
	param_convert(1)
	
	new CSWPN_DEFAULT_MODEL[][] =
	{
		"", "models/w_p228.mdl", "", "models/w_scout.mdl",
		"models/w_hegrenade.mdl", "models/w_xm1014.mdl", "models/w_c4.mdl", "models/w_mac10.mdl",
		"models/w_aug.mdl", "models/w_smokegrenade.mdl", "models/w_elite.mdl", "models/w_fiveseven.mdl",
		"models/w_ump45.mdl", "models/w_sg550.mdl", "models/w_galil.mdl", "models/w_famas.mdl",
		"models/w_usp.mdl", "models/w_glock18.mdl", "models/w_awp.mdl", "models/w_mp5.mdl",
		"models/w_m249.mdl", "models/w_m3.mdl", "models/w_m4a1.mdl", "models/w_tmp.mdl",
		"models/w_g3sg1.mdl","models/w_flashbang.mdl", "models/w_deagle.mdl","models/w_sg552.mdl",
		"models/w_ak47.mdl","models/w_knife.mdl" ,
		"models/w_p90.mdl"
	}

	for (new i = 0; i < sizeof CSWPN_DEFAULT_MODEL; i++)
	{
		//server_print("%s compares with %s", szWorldModel, CSWPN_DEFAULT_MODEL[i])
		if (equal(szWorldModel, CSWPN_DEFAULT_MODEL[i]))
			return i
	}
	return 0
}

public _WeaponIdToWorldModel(iWeaponId, szWorldModel[], iLen)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90 || iWeaponId == 2)
		return 0
	
	new CSWPN_DEFAULT_MODEL[][] =
	{
		"", "models/w_p228.mdl", "", "models/w_scout.mdl",
		"models/w_hegrenade.mdl", "models/w_xm1014.mdl", "models/w_c4.mdl", "models/w_mac10.mdl",
		"models/w_aug.mdl", "models/w_smokegrenade.mdl", "models/w_elite.mdl", "models/w_fiveseven.mdl",
		"models/w_ump45.mdl", "models/w_sg550.mdl", "models/w_galil.mdl", "models/w_famas.mdl",
		"models/w_usp.mdl", "models/w_glock18.mdl", "models/w_awp.mdl", "models/w_mp5.mdl",
		"models/w_m249.mdl", "models/w_m3.mdl", "models/w_m4a1.mdl", "models/w_tmp.mdl",
		"models/w_g3sg1.mdl","models/w_flashbang.mdl", "models/w_deagle.mdl","models/w_sg552.mdl",
		"models/w_ak47.mdl","models/w_knife.mdl" ,
		"models/w_p90.mdl"
	}
	
	param_convert(2)
	formatex(szWorldModel, iLen, CSWPN_DEFAULT_MODEL[iWeaponId])
	return 1
}

public _Get_CS_Name(iWeaponId, szOutput[], iLen)
{
	if (!is_valid_weapon(iWeaponId))
		return 0
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_NAME)
	
	param_convert(2)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
	{
		new const DEFAULT_WEAPON_NAME[][] = 
		{	
			"NULL",	 "P228 Compact"/*P228*/,"NULL", "Styer Scout"/*Styer Scout*/, "H.E Grenade"/*HE Grenade*/,"XM1014"/*XM1014*/,
			"C4 Plastic Bomb"/*C4*/, "MAC 10"/*MAC 10*/, "Styer Aug"/*Styer Aug*/, "Smoke Grenade"/*Smoke Grenade*/,
			"Dual Elite"/*Dual Elite*/,"FN 57"/*FN 57*/, "UMP45"/*UMP45*/,
			"Sig 550"/*SG550*/,"IMI Galil"/*Galil*/,"Famas - Clairon"/*FAMAS*/,
			"HK USP"/*HK USP*/, "Glock 18"/*Glock 18*/, "AWP"/*AWP*/ ,"HK MP5 Navy"/*MP5 Navy*/,
			"M249 - Para Machine"/*M249*/,"M3 - Super Beneli"/*M3*/, "M4A1 - Carbine"/*M4A1*/,
			"TMP - Machine Pistol"/*TMP*/, "H&K G3SG1"/*G3SG1*/,
			"Flash Grenade", "Desert Eagle"/*Desert Eagle*/, "SIG SG552"/*SG552*/,
			"AK47"/*AK47*/, "Combat Knife",	"FN P90"/*FN P90*/
		}
		
		
		formatex(szOutput, iLen, DEFAULT_WEAPON_NAME[iWeaponId])
		return 1
	}
	
	TrieGetString(TRIE_WeaponInfo, szKey, szOutput, iLen)
	return 1
}

public _Get_CS_ADS_State(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 0
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_ADS_STATE)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
		return 0
		
	TrieGetCell(TRIE_WeaponInfo, szKey, iWeaponId)
	
	if (iWeaponId < 0)
		iWeaponId = 0
		
	return iWeaponId
	
}

public _Get_CS_SemiWpn(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 0
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_SEMI_WPN)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
	{
		if (is_secondary_wpn(iWeaponId))
			return 1
	
		return 0
	}
	
	TrieGetCell(TRIE_WeaponInfo, szKey, iWeaponId)
	
	if (iWeaponId < 0)
		iWeaponId = 0
		
	
		
	return iWeaponId
}

public _Get_CS_ADS_FOV(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 90
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_ADS_FOV)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
		return 90
		
	TrieGetCell(TRIE_WeaponInfo, szKey, iWeaponId)
	
	if (iWeaponId < 1 || iWeaponId > 90)
		iWeaponId = 90
		
	return iWeaponId
	
}

public Float:_Get_CS_Accuracy(iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90 || iWeaponId == 2)
		return 0.0
		
	new Float:CSWPN_DEFAULT_ACCURACY[] =
	{
		0.0, 0.68/*P228*/, 0.0, 0.0/*Styer Scout*/,
		0.0 /*He Grenade*/, 0.0/*XM1014*/, 0.0/*C4*/, 1.115/*MAC10*/,
		1.25/*Styer Aug*/, 0.0/*Smoke Grenade*/, 0.63/*Dual Elite*/, 0.66/*Five Seven*/,
		1.15/*UMP45*/, 0.0/*SG550*/, 1.05/*IMI Galil*/, 0.955/*Famas - Clairon*/,
		0.67/*HK USP*/, 0.66/*Glock 18*/, 0.0/*AWP*/, 1.25/*HK MP5*/,
		1.2225/*M249*/, 0.0/*M3*/, 1.15/*M4A1*/, 1.2/*TMP*/,
		0.0/*HK G3SG1*/,0.0/*FLASH BANG*/, 0.715/*Desert Eagle*/,1.35/*Sig 552*/,
		1.156/*AK47*/,0.0/*Knife*/ ,1.225/*FN P90*/
	}
	
	return CSWPN_DEFAULT_ACCURACY[iWeaponId]
}




public Float:_Get_CS_ROF(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 0.0
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_ROF)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
	{
		
		new const Float:Default_WeaponFireRate[] =
		{
			-1.0, 0.17/*P228*/, -1.0, 1.4/*Styer Scout*/, -1.0, 0.2/*XM1014*/, -1.0, 0.0524/*MAC10*/, 0.08/*Styer AUG*/,-1.0,
			0.13/*Dual Elite*/, 0.165/*FN 57*/, 0.0923/*UMP45*/, 0.32/*SG550*/, 0.08/*GALIL*/, 0.07/*FAMAS*/,
			0.145/*HK USP*/, 0.12/*GLOCK18*/, 1.72/*AWP*/, 0.075/*MP5 NAVY*/, 0.077/*M249*/, 0.2/*M3*/, 0.085/*M4A1*/,
			0.066/*TMP*/, 0.35/* HK G3SG1*/, -1.0, 0.2/* Desert Eagle*/, 0.0857/*SG552*/, 0.1/*AK47*/,
			-1.0, 0.0667 /*FN P90*/
		}
	
		return Default_WeaponFireRate[iWeaponId]
	}
	
	new Float:flROF
	TrieGetCell(TRIE_WeaponInfo, szKey, flROF)
	return flROF
}

public Float:_Get_CS_ROF_ADS(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 0.0
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_ROF_ADS)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
	{
		new const Float:Default_WeaponFireRate[] =
		{
			-1.0, 0.2/*P228*/, -1.0, 1.4/*Styer Scout*/, -1.0, 0.2/*XM1014*/, -1.0, 0.0524/*MAC10*/, 0.08/*Styer AUG*/,-1.0,
			0.13/*Dual Elite*/, 0.215/*FN 57*/, 0.0923/*UMP45*/, 0.32/*SG550*/, 0.08/*GALIL*/, 0.07/*FAMAS*/,
			0.2/*HK USP*/, 0.16/*GLOCK18*/, 1.72/*AWP*/, 0.075/*MP5 NAVY*/, 0.077/*M249*/, 0.2/*M3*/, 0.085/*M4A1*/,
			0.066/*TMP*/, 0.35/* HK G3SG1*/, -1.0, 0.4/* Desert Eagle*/, 0.0857/*SG552*/, 0.1/*AK47*/,
			-1.0, 0.0667 /*FN P90*/
		}
	
		return Default_WeaponFireRate[iWeaponId]
	}
	
	new Float:flROF
	TrieGetCell(TRIE_WeaponInfo, szKey, flROF)
	return flROF
}

public Float:_Get_CS_Recoil_Ads(iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90 || iWeaponId == 2)
		return 1.0
		
	new const Float:Default_Recoil_Ads[] =
	{
		-1.0, 1.25/*P228*/, -1.0, 4.0/*Styer Scout*/, -1.0, 0.85/*XM1014*/, -1.0, 0.85/*MAC10*/, 0.85/*Styer AUG*/,-1.0,
		1.0/*Dual Elite*/, 1.3/*FN 57*/, 0.85/*UMP45*/, 1.35/*SG550*/, 0.85/*GALIL*/, 0.85/*FAMAS*/,
		1.2/*HK USP*/, 1.33/*GLOCK18*/, 5.0/*AWP*/, 0.85/*MP5 NAVY*/, 0.85/*M249*/, 0.85/*M3*/, 0.85/*M4A1*/,
		0.85/*TMP*/, 1.25/* HK G3SG1*/, -1.0, 1.75/* Desert Eagle*/, 0.85/*SG552*/, 0.85/*AK47*/,
		-1.0, 0.85 /*FN P90*/
	}
	
	return Default_Recoil_Ads[iWeaponId]
}

public _Get_CS_Hud(iWeaponId, szHud[], iLen)
{
	if (!is_valid_weapon(iWeaponId))
		return 
		
	param_convert(2)
	
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_HUD)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
	{
		new const DEFAULT_WEAPON_HUD[][] = { "","SIG-P228"/*P288*/, "","Styer-Scout"/*Styer Scout*/,
				"HEGRENADE"/*He Grenade*/, "XM1014-Beneli"/*XM1014*/,"C4"/*C4*/,
				"MAC10"/*MAC10*/,"Styer-AUG-A1"/*Styer Aug*/,"SMOKEGRENADE"/*Smoke Grenade*/,
				"Dual-Berettas"/*Dual Berreta*/,"FN-FiveSeven"/*FN 57*/,
				"UMP45"/*UMP45*/,"SIG-SG550"/*Sig 550*/,"IMI-GALIL"/*IMI GALIL*/,
				"FAMAS"/*Famas*/,"HK-USP"/*HK USP*/,"GLOCK18"/*Glock 18*/,
				"ArticWarfaceMagnum"/*AWP*/,"MP5-NAVY"/*MP5 NAVY*/,
				"FN-M249"/*FN M249*/,"M3-SuperBeneli"/*M3*/,"M4A1-Carbine"/*M4*/,
				"TacticalMachinePistol"/*TMP*/,"HK-G3SG1"/*G3SG1*/,"FLASHBANG"/*Flash bang*/,
				"DESERT-EAGLE"/*Desert Eagle*/,"SIG-SG552/*SG 522*/","AK-47"/*AK47*/,
				"KNIFE"/*KNIFE*/ ,"FN-P90" /*FN P90*/
			}
		
		formatex(szHud, iLen, DEFAULT_WEAPON_HUD[iWeaponId])
		return
	}
	
	TrieGetString(TRIE_WeaponInfo, szKey, szHud, iLen)
}

public _Get_CS_Cost(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 0
	
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_COST)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
	{
		new Default_Cost[] =
		{
			-1, 600/*P228*/, -1, 2750/*Styer Scout*/, 500, 3000/*XM1014*/, -1/*C4*/, 1400/*MAC10*/, 3500/*Styer AUG*/,300/*Smoke Grenade*/,
			800/*Dual Elite*/, 750/*FN 57*/, 1700/*UMP45*/, 4200/*SG550*/, 2000/*GALIL*/, 2250/*FAMAS*/,
			500/*HK USP*/, 400/*GLOCK18*/, 4750/*AWP*/, 1500/*MP5 NAVY*/, 5750/*M249*/, 1700/*M3*/, 0/*3100M4A1*/,
			1250/*TMP*/, 5000/* HK G3SG1*/, 400/*Flashbang*/, 650/* Desert Eagle*/, 3500/*SG552*/, 2500/*AK47*/,
			-1/*KNIFE*/, 2350 /*FN P90*/
		}
		return Default_Cost[iWeaponId]
	}
	
	TrieGetCell(TRIE_WeaponInfo, szKey, iWeaponId)
	return iWeaponId
}

public _Get_CS_CostType(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 0
	
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_COST_TYPE)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
	{
		return 1 // Cost GP
	}
	
	TrieGetCell(TRIE_WeaponInfo, szKey, iWeaponId)
	return iWeaponId
}

public Float:_Get_CS_DeployTime(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 1.5
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_DEPLOYTIME)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))	
	{
		new Float:Default_DeployTime[] =
		{
			1.5, 1.5/*P228*/, 1.5, 1.5/*Styer Scout*/, 1.5/*HE GRENADE*/, 1.5/*XM1014*/, 1.5/*C4*/, 1.5/*MAC10*/, 1.5/*Styer AUG*/,1.5/*Smoke Grenade*/,
			1.5/*Dual Elite*/, 1.5/*FN 57*/, 1.5/*UMP45*/, 1.5/*SG550*/, 1.5/*GALIL*/, 1.5/*FAMAS*/,
			1.5/*HK USP*/, 1.5/*GLOCK18*/, 1.5/*AWP*/, 1.5/*MP5 NAVY*/, 1.5/*M249*/, 1.5/*M3*/, 1.5/*M4A1*/,
			1.5/*TMP*/, 1.5/* HK G3SG1*/, 1.5/*Flashbang*/, 1.5/* Desert Eagle*/, 1.5/*SG552*/, 1.5/*AK47*/,
			1.5/*KNIFE*/, 1.5 /*FN P90*/
		}
		return Default_DeployTime[iWeaponId]
	}
	
	new Float:flDeployTime
	TrieGetCell(TRIE_WeaponInfo, szKey, flDeployTime)
	return flDeployTime
}

public Float:_Get_CS_Start_IS(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 1.5
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_INSERT_TIME)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))	
	{
		#define M3_INSERT_AMMO_TIME 0.5
		#define XM1014_INSERT_AMMO_TIME 0.5
		
		if (iWeaponId == CSW_M3)
			return M3_INSERT_AMMO_TIME
		else if (iWeaponId == CSW_XM1014)
			return XM1014_INSERT_AMMO_TIME
		return 0.5
	}
	
	new Float:flInsertTime
	TrieGetCell(TRIE_WeaponInfo, szKey, flInsertTime)
	return flInsertTime
}

public Float:_Get_CS_Finish_IS(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 1.5
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_AF_IS_TIME)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))	
	{
		#define M3_FINISH_RELOAD_TIME 1.0
		#define XM1014_FINISH_RELOAD_TIME 1.0
		
		if (iWeaponId == CSW_M3)
			return M3_FINISH_RELOAD_TIME
		else if (iWeaponId == CSW_XM1014)
			return XM1014_FINISH_RELOAD_TIME
			
		return 0.5
	}
	
	new Float:flInsertTime
	TrieGetCell(TRIE_WeaponInfo, szKey, flInsertTime)
	return flInsertTime
}

public _Get_CS_ReloadType(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 0
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_RELOAD_TYPE)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))	
	{
		
		if (iWeaponId == CSW_M3)
			return 1
		else if (iWeaponId == CSW_XM1014)
			return 1
			
		return 0
	}
	
	new iType
	TrieGetCell(TRIE_WeaponInfo, szKey, iType)
	return iType
}

public _Get_CS_Crosshair(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 0
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_CROSSHAIR)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
		return 1
	
	
	new iType
	TrieGetCell(TRIE_WeaponInfo, szKey, iType)
	return iType
}

public _DropPlayerPrimWeapon(index)
{
	new weapons[32], num
	
	if (!is_user_connected(index))
		return
		
	get_user_weapons(index, weapons, num)
	
	engclient_cmd(index, "drop", "weapon_shield")
			
	for (new i = 0; i < num; i++) 
	{
		if (!is_primary_wpn(weapons[i]))
			continue
			
		new szWeaponName[32]
		get_weaponname(weapons[i], szWeaponName, sizeof szWeaponName - 1)
		engclient_cmd(index, "drop", szWeaponName)
	}
}

public _StripPlayerPrimWeapon(index)
{
	new weapons[32], num
	
	if (!is_user_connected(index))
		return
		
	get_user_weapons(index, weapons, num)
	
	_StripPlayerWeapon(index, "weapon_shield")
			
	for (new i = 0; i < num; i++) 
	{
		if (!is_primary_wpn(weapons[i]))
			continue
			
		new szWeaponName[32]
		get_weaponname(weapons[i], szWeaponName, sizeof szWeaponName - 1)
		_StripPlayerWeapon(index, szWeaponName)
	}
}

public _DropPlayerSecWeapon(index)
{
	new weapons[32], num
	
	if (!is_user_connected(index))
		return
		
	get_user_weapons(index, weapons, num)
			
	for (new i = 0; i < num; i++) 
	{
		if (!is_secondary_wpn(weapons[i]))
			continue
			
		new szWeaponName[32]
		get_weaponname(weapons[i], szWeaponName, sizeof szWeaponName - 1)
		engclient_cmd(index, "drop", szWeaponName)
	}
} 

public _StripPlayerWeapon(id, szWeaponName[])
{
	param_convert(2)
	HamStripPlayerWeapon(id, szWeaponName)
	
}
public _StripSecondaryWeapon(id)
{
	HamStripPlayerWeapon(id, "weapon_usp")
	HamStripPlayerWeapon(id, "weapon_glock18")
	HamStripPlayerWeapon(id, "weapon_deagle")
	HamStripPlayerWeapon(id, "weapon_p228")
	HamStripPlayerWeapon(id, "weapon_elite")
	HamStripPlayerWeapon(id, "weapon_fiveseven")
}

public _Get_CS_FireSound(iWeaponId, iInSpecial, szOutput[], iLen)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return
		
	if (iWeaponId == CSW_KNIFE)
		return
		
	if (iWeaponId == 2 || iWeaponId == CSW_HEGRENADE || iWeaponId == CSW_SMOKEGRENADE || iWeaponId == CSW_FLASHBANG)
		return
		
	
	param_convert(3)
	
	if (iInSpecial)
	{
		#define GLOCK_BURST_SOUND "glock18-2.wav"
		#define USP_SILENT_SOUND "usp1.wav"
		#define FAMAS_BURST_SOUND "famas-burst.wav"
		#define M4A1_SILENT_SOUND "m4a1-1.wav"
		
		if (iWeaponId == CSW_M4A1)
			formatex(szOutput, iLen, M4A1_SILENT_SOUND)
		else if (iWeaponId == CSW_USP)
			formatex(szOutput, iLen, USP_SILENT_SOUND)
		else if (iWeaponId == CSW_FAMAS)
			formatex(szOutput, iLen, FAMAS_BURST_SOUND)
		else if (iWeaponId == CSW_GLOCK18)
			formatex(szOutput, iLen, GLOCK_BURST_SOUND)
	}
	
	formatex(szOutput, iLen, DEFAULT_WEAPON_SOUND[iWeaponId])
}
	

	
public Float:_Get_CS_Reload_Time(iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return 0.0
	
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_RELOADTIME)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
	{
		new const Float:CSWPN_RELOAD_TIME[CSW_P90+1] = 
		{
			0.00, 2.70/*P228*/, 0.00, 2.00/*Styer Scout*/, 0.00, 0.55/*XM1014*/,   0.00, 3.15/*MAC10*/, 3.30/*Styer AUG*/, 0.00, 
			4.50/*Dual Elite*/, 2.70/*FN 57*/, 2.5/*UMP45*/, 3.35/*SG550*/, 2.45/*GALIL*/, 3.30/*FAMAS*/,   
			2.9/*HK USP*/, 2.20/*GLOCK18*/, 2.50/*AWP*/, 2.63/*MP5 NAVY*/, 4.70/*M249*/, 
				 0.55/*M3*/, 3.05/*M4A1*/, 2.12/*TMP*/, 3.50/* HK G3SG1*/, 0.00,   2.20/* Desert Eagle*/, 3.00/*SG552*/, 
				 2.45/*AK47*/, 0.00, 3.40/*FN P90*/
		}
		return CSWPN_RELOAD_TIME[iWeaponId]
	}
	
	new Float:flReloadTime
	TrieGetCell(TRIE_WeaponInfo, szKey, flReloadTime)
	return flReloadTime
}

public Float:_Get_CS_Speed(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 0.0
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_SPEED)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
	{
		new const Float:DEFAULT_DSPEED[] = {0.0, 0.0 /*P228*/, 0.0, 20.8 /*Styer Scout*/, 0.0, 17.0 /*XM1014*/, 30.0 /*C4*/, 12.25 /*MAC10*/, 
					25.0 /*Styer Aug*/, 0.0, 0.0, 
					0.0, 16.25 /*UMP45*/, 33.25 /*SG550*/, 24.25 /*Galil*/, 21.75/*Famas*/, 0.0, 0.0, 
					36.20 /*AWP*/, 11.4 /*MP5 NAVY*/, 38.5 /*M249*/, 22.175 /*M3*/,
					24.185/*M4A1*/, 13.45 /*TMP*/, 34.5/*G3SG1*/, 0.0, 0.0, 23.75 /*SG552*/, 25.25 /*AK47*/, 
					0.0/*KNIFE*/, 13.25/*FN P90*/, 0.0, 0.0}
					
		return DEFAULT_DSPEED[iWeaponId]
	}
	
	new Float:flSpeed
	TrieGetCell(TRIE_WeaponInfo, szKey, flSpeed)
	return flSpeed
}

public Float:_Get_CS_Weight(iWeaponId)
{
	if (!is_valid_weapon(iWeaponId))
		return 0.0
		
	new szKey[64]
	formatex(szKey, sizeof szKey - 1, "%d_%s", iWeaponId, TRIE_FIELD_WEIGHT)
	
	if (!TRIE_WeaponInfo || !TrieKeyExists(TRIE_WeaponInfo, szKey))
	{
		new const Float:DEFAULT_WEIGHT[] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
					0.0, 0.08, 0.0, 0.0, 0.0, 0.0, 0.075, 0.0, 0.085, 0.0, 0.0, 0.0, 0.0865, 0.0,
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
					
		return DEFAULT_WEIGHT[iWeaponId]
	}
	
	new Float:flWeight
	TrieGetCell(TRIE_WeaponInfo, szKey, flWeight)
	return flWeight
}

public Float:_Get_CS_StartAdsTime(iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return 0.0
		
	new const Float:Default_StartAdsTime[] = 
	{
		-1.0, 0.25/*P228*/, -1.0/**/, 0.25/*Styer Scout*/, -1.0, 0.25/*XM1014*/,	-1.0, 0.25/*MAC10*/, 0.33/*Styer Scout*/,
		-1.0, 0.25/*Dual Elite*/, 0.25/*FN 57*/, 0.25/*UMP45*/,	 0.25/*SG550*/, 0.25/*Galil*/, 0.25/*Famas*/,
		0.25/*USP*/, 0.25/*GLOCK18*/, 0.34/*AWP*/, 0.25/*MP5 NAVY*/, 0.25/*M249*/, 0.25/*M3*/, 0.25/*M4A1*/,
		0.25/*TMP*/, 0.25/*HK G3SG1*/, -1.0, 0.25/*Desert Eagle*/, 0.25/*SG552*/, 0.25/*AK47*/, -1.0, 0.25/*FN P90*/
	}

	return Default_StartAdsTime[iWeaponId]
}

public Float:_Get_CS_EndAdsTime(iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return 0.0
		
	new const Float:Default_EndAdsTime[] = 
	{
		-1.0, 0.25/*P228*/, -1.0/**/, 0.25/*Styer Scout*/, -1.0, 0.25/*XM1014*/,	-1.0, 0.25/*MAC10*/, 0.33/*Styer Scout*/,
		-1.0, 0.25/*Dual Elite*/, 0.25/*FN 57*/, 0.25/*UMP45*/,	 0.25/*SG550*/, 0.25/*Galil*/, 0.25/*Famas*/,
		0.25/*USP*/, 0.25/*GLOCK18*/, 0.34/*AWP*/, 0.25/*MP5 NAVY*/, 0.25/*M249*/, 0.25/*M3*/, 0.25/*M4A1*/,
		0.25/*TMP*/, 0.25/*HK G3SG1*/, -1.0, 0.25/*Desert Eagle*/, 0.25/*SG552*/, 0.25/*AK47*/, -1.0, 0.25/*FN P90*/
	}
	return Default_EndAdsTime[iWeaponId]
}


public _HL_Crosshair_Toggle(id, iToggle, iEngineMessage)
{
	if (!IsValidPlayer(id))
		return
		
	if (!is_user_alive(id))
		return
		
	if (is_user_bot(id))
		return
		
	
	if (iEngineMessage)
	{
		emessage_begin(MSG_ONE_UNRELIABLE, iMsg_HalfLife_Crosshair, _, id)
		ewrite_byte(iToggle)
		emessage_end()
		return
	}
	message_begin(MSG_ONE_UNRELIABLE, iMsg_HalfLife_Crosshair, _, id)
	write_byte(iToggle)
	message_end()
	
	
	return
}

public _CS_Crosshair_Toggle(id, iToggle, iEngineMessage)
{
	if (!IsValidPlayer(id))	
		return
		
	if (!is_user_alive(id))
		return
		
	if (is_user_bot(id))
		return
	
	
	new iHudState = get_pdata_int(id, m_iHideHUD, 5)
	
	new HUD_CS_CROSSHAIR_HIDE = (1<<6)
	
	if (iToggle)
	{
		if (iHudState & HUD_CS_CROSSHAIR_HIDE)
			iHudState &=~ HUD_CS_CROSSHAIR_HIDE
		
		if (iEngineMessage)
		{
			set_pdata_int(id, m_iClientHideHUD, 0)
			set_pdata_int(id, m_iHideHUD , iHudState, 5)
			
			if (is_user_alive(id))
				set_pdata_cbase(id, m_pClientActiveItem, FM_NULLENT)
		}
		else
			set_pdata_int(id, m_iHideHUD, iHudState, 5)
	}
	else
	{
		if (!(iHudState & HUD_CS_CROSSHAIR_HIDE))
			iHudState |= HUD_CS_CROSSHAIR_HIDE
			
		set_pdata_int(id, m_iHideHUD , iHudState, 5)
	}
	
}


public _MakeWpnPrimAtk(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return
		
	ExecuteHamB(Ham_Weapon_PrimaryAttack, iEnt)
}

public _MakeWpnSecAtk(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return
		
	ExecuteHamB(Ham_Weapon_SecondaryAttack, iEnt)
}

public  _MakeWpnReload(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return
		
	ExecuteHamB(Ham_Weapon_Reload, iEnt)
	
}

public _SendCurWeaponMsg(id, iStatus, iWeaponId, iClip, iEngineMessage)
{
	if (!is_user_connected(id))
		return
		
	if (!is_user_alive(id))
		return
		
	if (iEngineMessage)
	{
		emessage_begin(MSG_ONE_UNRELIABLE, iMsg_CurWeapon, _, id)
		ewrite_byte(iStatus)
		ewrite_byte(iWeaponId)
		ewrite_byte(iClip)
		emessage_end()
		return
	}
	message_begin(MSG_ONE_UNRELIABLE, iMsg_CurWeapon, _, id)
	write_byte(iStatus)
	write_byte(iWeaponId)
	write_byte(iClip)
	message_end()
}
	
public _UpdateWpnList(id, iCsWpnId, iClip, szWpnClass[], iMaxBp ,iSendCurWeaponMsg)
{
	param_convert(4)
	if (!IsValidPlayer(id))
		return
		
	update_hud_WeaponList(id, iCsWpnId, iClip, szWpnClass, iMaxBp ,iSendCurWeaponMsg)
}

public _CSWPN_Anim_Shoot1(iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return 0
		
	new const CSWPN_ANIMATION_SHOOT1[] = 
	{ 
		0, 1, 0, 1, 2, 1, 3,
		3, 3, 2, 2, 1,
		3, 1, 3, 3,
		9, 3,
		1, 3, 1, 8,
		8, 3,
		1, 2,
		1, 3, 3,
		0 , 3
	}

	return CSWPN_ANIMATION_SHOOT1[iWeaponId]
}

public _CSWPN_Anim_Shoot2(iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return 0
		
	new const CSWPN_ANIMATION_SHOOT2[] = 
	{ 
		0, 2, 0, 2, 2, 2, 3,
		4, 4, 2, 8, 2,
		4, 2, 4, 4,
		10, 4,
		2, 4, 2, 9,
		9, 4,
		2, 2,
		2, 4, 4,
		0 , 4
	}
	

	return CSWPN_ANIMATION_SHOOT2[iWeaponId]
}

public _CSWPN_Anim_Shoot3(iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return 0
		
	new const CSWPN_ANIMATION_SHOOT3[] = 
	{ 
		0, 3, 0, 2, 2, 2, 3,
		5, 5, 2, 8, 2,
		5, 2, 5, 5,
		11, 5,
		3, 5, 2, 10,
		10, 5,
		2, 2,
		2, 5, 5,
		0 , 5
	}

	return CSWPN_ANIMATION_SHOOT3[iWeaponId]
}


public _PlayWeaponAnim(id, iAnim)
{
	if (!is_user_alive(id))
		return
		
	set_pev(id, pev_weaponanim, iAnim)
	
	message_begin(MSG_ONE_UNRELIABLE, SVC_WEAPONANIM, _, id)
	write_byte(iAnim)
	write_byte(pev(id, pev_body))
	message_end()
	
	new iWeaponEnt = get_pdata_cbase(id, m_pActiveItem, 5)
	
	if (!iWeaponEnt || !pev_valid(iWeaponEnt))
		return
		
	ExecuteHamB(Ham_Weapon_SendWeaponAnim, iWeaponEnt, iAnim, 0, pev(id, pev_body))
	
}





public _CSWPN_Anim_Draw(iWeaponId, iSilencer, iHasShield)
{
	if (!is_valid_weapon(iWeaponId))
		return 0
		
	
	
	new const DEFAULT_DRAW_ANIM[] = {0, 5 /*P228*/, 0, 4 /*Styer Scout*/, 3/*HE GRENADE*/, 6 /*XM1014*/, 1 /*C4*/, 2 /*MAC10*/, 
				2 /*Styer Aug*/, 3/* SMOKE GRENADE */, 15 /*Dual Elite*/, 
					5/*FN 57*/, 2 /*UMP45*/, 4 /*SG550*/, 2 /*Galil*/, 2/*Famas*/, 14/*HK USP*/, 8/*Glock 18*/, 
					5 /*AWP*/, 2 /*MP5 NAVY*/, 4 /*M249*/, 6 /*M3*/,
					12/*M4A1*/, 2 /*TMP*/, 4/*G3SG1*/, 3/*SMOKE GRENADE*/, 5/*Desert Eagle*/, 2 /*SG552*/, 2 /*AK47*/, 
					3/*KNIFE*/, 2/*FN P90*/}
		
	if (iHasShield)
	{
		if (iWeaponId == CSW_KNIFE)
			return 3
			
		if (is_secondary_wpn(iWeaponId) && iWeaponId != CSW_ELITE)
			return 5
				
		if (is_grenade(iWeaponId))
			return 3
	}
	if (iSilencer)
	{
		if (iWeaponId == CSW_USP)
			return DEFAULT_DRAW_ANIM[iWeaponId] - 8
			
		if (iWeaponId == CSW_M4A1)
			return DEFAULT_DRAW_ANIM[iWeaponId] - 7
	}
		
		
	return DEFAULT_DRAW_ANIM[iWeaponId]
	
}


public _CSWPN_Anim_Reload(iWeaponId, iSilencer, iShield)
{
	if (!is_valid_weapon(iWeaponId))
		return 0
		
	
	new const CSWPN_RELOAD_ANIMATION[CSW_P90+1] = {
		-1,  5, -1, 3, -1,  5,   -1, 1, 1, -1, 14, 
			4,  1, 3,  1,  1,   13, 7, 4,  1,  3, 
			5, 11, 1,  3, -1,    4, 1, 1, -1,  1}
			
	if (iShield)
		return 4
			
	if (iSilencer)
	{
		if (iWeaponId == CSW_M4A1)
			return CSWPN_RELOAD_ANIMATION[iWeaponId] - 7
		if (iWeaponId == CSW_USP)
			return CSWPN_RELOAD_ANIMATION[iWeaponId] - 8
	}
		
	return CSWPN_RELOAD_ANIMATION[iWeaponId]
	
}

public _CSWPN_Anim_Idle(iWeaponId, bool:bSilencer)
{
	if (!is_valid_weapon(iWeaponId))
		return 0
		
	if (!bSilencer)
	{
		if (iWeaponId == CSW_USP)
			return 8
			
		if (iWeaponId == CSW_M4A1)
			return 7
	}
	
	return 0
}



public plugin_precache()
{
	if (!RegisteredClasses)
		RegisteredClasses = TrieCreate()
	
	if (!iBrushEntity)
		iBrushEntity = TrieCreate()
	
	
	
	TrieSetCell(RegisteredClasses, "player", 1)
	RegisterHam(Ham_TraceAttack, "player", "globalTraceAttack")
	
	TrieSetCell(RegisteredClasses, "worldspawn", 1)
	RegisterHam(Ham_TraceAttack, "worldspawn", "globalTraceAttack")
	
	TrieSetCell(RegisteredClasses, "weaponbox", 1)
	RegisterHam(Ham_TraceAttack, "weaponbox", "globalTraceAttack")
	
	new const BRUSH_ENTITY_LIST[][] = {
	"func_breakable",
	"func_bomb_target",
	"func_button",
	"func_conveyor",
	"func_door",
	"func_ladder",
	"func_pushable",
	"func_recharge",
	"func_tank"
	}

	for (new iBrushEntityId = 0; iBrushEntityId < sizeof BRUSH_ENTITY_LIST - 1; iBrushEntityId++)
	{
		if (TrieKeyExists(iBrushEntity, BRUSH_ENTITY_LIST[iBrushEntityId]))
			continue
			
		TrieSetCell(iBrushEntity, BRUSH_ENTITY_LIST[iBrushEntityId], 1)
	}
	
	gfw_EntitySpawn = register_forward(FM_Spawn,"fw_EntitySpawn")
	gfw_PrecacheEvent = register_forward(FM_PrecacheEvent, "fw_PrecacheEventPost", 1)
	
	
}


public plugin_init() {
	
	new PLUGIN[] = "Weapon Ultilities"
	new VERSION[] = "1.0"
	new AUTHOR[] = "Nguyen Duy Linh"

	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	unregister_forward(FM_PrecacheEvent, gfw_PrecacheEvent, 1)
	unregister_forward(FM_Spawn, gfw_EntitySpawn)
	
	load_weapon_file_info()
	
	iBulletID = engfunc(EngFunc_DecalIndex, "{shot2")
	
	ifw_ItemDrop = CreateMultiForward("csred_ItemDrop_Pre", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL)
	ifw_WpnAtkPre = CreateMultiForward("csred_WpnPrimAtk_Pre", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL)
	ifw_WpnAtkPost = CreateMultiForward("csred_WpnPrimAtk_Post", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL)
	ifw_WpnSecAtkPre = CreateMultiForward("csred_WpnSecAtk_Pre", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL)
	ifw_WpnSecAtkPost = CreateMultiForward("csred_WpnSecAtk_Post", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL)
	ifw_WpnReloadPre = CreateMultiForward("csred_WpnReload_Pre", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL)
	ifw_WpnReloadPost = CreateMultiForward("csred_WpnReload_Post", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL)
	ifw_ItemPostFrame = CreateMultiForward("csred_WpnPostFrame", ET_IGNORE, FP_CELL, FP_CELL, FP_CELL)
	
	ifw_ItemDeployPre = CreateMultiForward("csred_WpnDeploy_Pre", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL)
	ifw_ItemDeployPost = CreateMultiForward("csred_WpnDeploy_Post", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL)
	ifw_ItemAttachToPlayer = CreateMultiForward("csred_WpnAttachToPlayer", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL)
	ifw_ItemAttachToPlayerPost = CreateMultiForward("csred_WpnAttachToPlayerPost", ET_IGNORE, FP_CELL, FP_CELL, FP_CELL)
	
	ifw_SendAnimPre = CreateMultiForward("WU_WpnPlayAnim_Pre", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL, FP_CELL)
	ifw_SendAnimPost = CreateMultiForward("WU_WpnPlayAnim_Post", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL, FP_CELL)
	ifw_ShieldAttached = CreateMultiForward("csred_ShieldAttached", ET_CONTINUE, FP_CELL, FP_CELL)
	ifw_ShieldTouched = CreateMultiForward("csred_ShieldTouched", ET_CONTINUE, FP_CELL, FP_CELL)
	
	ifw_WeaponIdle_Pre = CreateMultiForward("csred_WpnIdle_Pre", ET_IGNORE, FP_CELL, FP_CELL, FP_CELL)
	ifw_WeaponIdle_Post = CreateMultiForward("csred_WpnIdle_Post", ET_IGNORE, FP_CELL, FP_CELL, FP_CELL)
	
	ifw_WpnBoxThinkPre = CreateMultiForward("csred_WpnBoxThink_Pre", ET_IGNORE, FP_CELL, FP_CELL)
	ifw_WpnBoxThinkPost = CreateMultiForward("csred_WpnBoxThink_Post", ET_IGNORE, FP_CELL, FP_CELL)
	
	ifw_ItemHolster_Pre = CreateMultiForward("csred_WpnHolster_Pre", ET_IGNORE, FP_CELL, FP_CELL)
	ifw_ItemHolster_Post = CreateMultiForward("csred_WpnHolster_Post", ET_IGNORE, FP_CELL, FP_CELL)
	
	ifw_RemovePlayerItem = CreateMultiForward("TFM_RemovePlayItem_Pre", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL)
	
	ifw_WeaponPlayEvent = CreateMultiForward("csred_EventPlaying", ET_IGNORE, FP_CELL, FP_CELL, FP_CELL, FP_CELL)
	ifw_WeaponTraceAttack = CreateMultiForward("csred_WeaponTraceAttack", ET_CONTINUE, FP_CELL, FP_CELL, FP_FLOAT, FP_FLOAT, FP_FLOAT, FP_FLOAT, FP_CELL, FP_CELL)
	
	iMsg_CurWeapon = get_user_msgid("CurWeapon")
	iMsg_WeaponList = get_user_msgid("WeaponList")
	iMsg_ItemPickUp = get_user_msgid("ItemPickup")
	iMsg_HalfLife_Crosshair = get_user_msgid("Crosshair")
	
	iMAX_PLAYERS = get_maxplayers()
	
	register_event("CurWeapon", "Event_CurWeapon", "b", "1=1")
	
	
	register_forward(FM_PlaybackEvent, "fw_PlaybackEventPost", 1)
	
	for (new i = CSW_P228; i < CSW_P90 + 1; i++)
	{
		if (i == 2)
			continue
			
		new szWeaponName[32]
		get_weaponname(i, szWeaponName, sizeof szWeaponName - 1)
		
		if (!is_grenade(i))
			RegisterHam(Ham_CS_Item_CanDrop, szWeaponName, "fw_SetWeaponCanDrop")
		RegisterHam(Ham_Weapon_PrimaryAttack, szWeaponName, "fw_WeaponPrimaryAtk_Pre")
		RegisterHam(Ham_Weapon_PrimaryAttack, szWeaponName, "fw_WeaponPrimaryAtk_Post", 1)
		RegisterHam(Ham_Weapon_SecondaryAttack, szWeaponName, "fw_SecondaryAtk_Pre")
		RegisterHam(Ham_Weapon_SecondaryAttack, szWeaponName, "fw_SecondaryAtk_Post", 1)
		RegisterHam(Ham_Weapon_Reload, szWeaponName, "fw_WeaponReload_Pre")
		RegisterHam(Ham_Weapon_Reload, szWeaponName, "fw_WeaponReload_Post", 1)
		RegisterHam(Ham_Weapon_WeaponIdle, szWeaponName, "fw_WeaponIdle_Pre")
		RegisterHam(Ham_Weapon_WeaponIdle, szWeaponName, "fw_WeaponIdle_Post", 1)
		RegisterHam(Ham_Item_PostFrame, szWeaponName, "fw_ItemPostFrame")
		RegisterHam(Ham_Item_Deploy, szWeaponName, "fw_ItemDeploy_Pre")
		RegisterHam(Ham_Item_Deploy, szWeaponName, "fw_ItemDeploy_Post", 1)
		RegisterHam(Ham_Item_AttachToPlayer, szWeaponName, "fw_ItemAttachToPlayer")
		RegisterHam(Ham_Item_AttachToPlayer, szWeaponName, "fw_ItemAttachToPlayerPost", 1)
		RegisterHam(Ham_Weapon_SendWeaponAnim, szWeaponName, "fw_WeaponSendAnim_Pre")
		RegisterHam(Ham_Weapon_SendWeaponAnim, szWeaponName, "fw_WeaponSendAnim_Post")
		RegisterHam(Ham_Item_Holster, szWeaponName, "fw_ItemHolster_Pre")
		RegisterHam(Ham_Item_Holster, szWeaponName, "fw_ItemHolster_Post", 1)
		
		
		
	}
	//RegisterHam(Ham_Item_AttachToPlayer, "weapon_shield", "fw_ShieldAttachToPlayer")
	RegisterHam(Ham_RemovePlayerItem, "player", "fw_RemovePlayerWpn")
		
	//RegisterHam(Ham_Touch, "weapon_shield", "fw_PlayerTouchShield")
	
	//RegisterHam(Ham_Think, "weaponbox", "fw_WpnBoxThinkPre")
	//RegisterHam(Ham_Think, "weaponbox", "fw_WpnBoxThinkPost", 1)
	
	//register_forward(FM_PlayerPostThink, "fw_PlayerPostThink")
	
	for (new iSoundPos = 0; iSoundPos < sizeof DEFAULT_WEAPON_SOUND; iSoundPos ++)
	{
		new szSound[256]
		formatex(szSound, sizeof szSound - 1, "sound/%s/%s", WEAPON_SOUND_DIR, DEFAULT_WEAPON_SOUND[iSoundPos])
		
		if (!file_exists(szSound))
			continue
		formatex(szSound, sizeof szSound - 1, "%s/%s", WEAPON_SOUND_DIR, DEFAULT_WEAPON_SOUND[iSoundPos])
			
		iWeaponSoundIndex[iSoundPos][0] = engfunc(EngFunc_PrecacheSound, szSound)
		
	}
	
	//	USP SILENCER SOUND
	
	new szExtraSound[256]
	formatex(szExtraSound, sizeof szExtraSound - 1, "sound/%s/%s", WEAPON_SOUND_DIR, USP_SILENT_SOUND)
	
	if (file_exists(szExtraSound))
	{
		formatex(szExtraSound, sizeof szExtraSound - 1, "%s/%s", WEAPON_SOUND_DIR, USP_SILENT_SOUND)
		iWeaponSoundIndex[CSW_USP][1] = engfunc(EngFunc_PrecacheSound, szExtraSound)
	}
	//	GLOCK BURST SOUND
	
	formatex(szExtraSound, sizeof szExtraSound - 1, "sound/%s/%s", WEAPON_SOUND_DIR, GLOCK_BURST_SOUND)
	
	if (file_exists(szExtraSound))
	{
		formatex(szExtraSound, sizeof szExtraSound - 1, "%s/%s", WEAPON_SOUND_DIR, GLOCK_BURST_SOUND)
		iWeaponSoundIndex[CSW_GLOCK18][1] = engfunc(EngFunc_PrecacheSound, szExtraSound)
	}
	//	M4A1 SILENCER SOUND
	
	formatex(szExtraSound, sizeof szExtraSound - 1, "sound/%s/%s", WEAPON_SOUND_DIR, M4A1_SILENT_SOUND)
	
	if (file_exists(szExtraSound))
	{
		formatex(szExtraSound, sizeof szExtraSound - 1, "%s/%s", WEAPON_SOUND_DIR, M4A1_SILENT_SOUND)
		iWeaponSoundIndex[CSW_M4A1][1] = engfunc(EngFunc_PrecacheSound, szExtraSound)
	}
	//	FAMAS BURST SOUND
	
	formatex(szExtraSound, sizeof szExtraSound - 1, "sound/%s/%s", WEAPON_SOUND_DIR, FAMAS_BURST_SOUND)
	
	if (file_exists(szExtraSound))
	{
		formatex(szExtraSound, sizeof szExtraSound - 1, "%s/%s", WEAPON_SOUND_DIR, FAMAS_BURST_SOUND)
		iWeaponSoundIndex[CSW_FAMAS][1] = engfunc(EngFunc_PrecacheSound, szExtraSound)
	}
}

public fw_WpnBoxThinkPre(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return
		
	new id = pev(iEnt, pev_owner)
	
	ExecuteForward(ifw_WpnBoxThinkPre, ifw_Result, id, iEnt)
}

public fw_WpnBoxThinkPost(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return
	
	new id = pev(iEnt, pev_owner)
	
	
	ExecuteForward(ifw_WpnBoxThinkPost, ifw_Result, id, iEnt)
}

public client_putinserver(id)
{
	for (new i = 0; i < MAX_WEAPON ; i++)
	{
		iCSWPN_BPA[id][i] = 0
	}
	set_task(0.1 , "Task_RegisterCZ_Function", id + TASK_CZ_FUNCTION)
}

public Task_RegisterCZ_Function(TASKID)
{
	new id = TASKID - TASK_CZ_FUNCTION
	
	if (iHamCZ)
		return
		
	if (!is_user_connected(id))
		return
		
	if (!is_user_bot(id))
		return
	
	if (!get_cvar_num("bot_quota"))
		return
		
	RegisterHamFromEntity(Ham_TraceAttack, id, "globalTraceAttack")
	iHamCZ = 1
	
}

public client_disconnect(id)
	remove_task(id + TASK_CZ_FUNCTION)
	
public fw_WeaponIdle_Pre(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return
		
	new id = pev(iEnt, pev_owner)
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ExecuteForward(ifw_WeaponIdle_Pre, ifw_Result, id, iEnt, iWeaponId)
}

public fw_WeaponIdle_Post(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return
		
	new id = pev(iEnt, pev_owner)
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ExecuteForward(ifw_WeaponIdle_Post, ifw_Result, id, iEnt, iWeaponId)
}

public fw_ShieldAttachToPlayer(iEnt, id)
{
	if (!iEnt || !pev_valid(iEnt))
		return HAM_IGNORED
		
	ExecuteForward(ifw_ShieldAttached, ifw_Result, id, iEnt)
	if (ifw_Result == PLUGIN_HANDLED)
		return HAM_SUPERCEDE
		
	return HAM_IGNORED
}

public fw_PlayerTouchShield(iEnt, id)
{
	if (!iEnt || !pev_valid(iEnt))
		return HAM_IGNORED
		
	ExecuteForward(ifw_ShieldTouched, ifw_Result, id, iEnt)
	if (ifw_Result == PLUGIN_HANDLED)
		return HAM_SUPERCEDE
		
	return HAM_IGNORED
}

public fw_SetWeaponCanDrop(iEnt)
{
	if (!pev_valid(iEnt))
		return HAM_IGNORED
	
	new id = pev(iEnt, pev_owner)
	
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ExecuteForward(ifw_ItemDrop, ifw_Result, id, iEnt, iWeaponId)
	
	if (ifw_Result == PLUGIN_HANDLED)
	{
		SetHamReturnInteger(0)
		return HAM_SUPERCEDE
	}
	return HAM_IGNORED
}

public fw_WeaponPrimaryAtk_Pre(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return HAM_IGNORED
		
	new id = pev(iEnt, pev_owner)
	
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ExecuteForward(ifw_WpnAtkPre, ifw_Result, id, iEnt, iWeaponId)
	
	if (ifw_Result == PLUGIN_HANDLED)
		return HAM_SUPERCEDE
		
	return HAM_IGNORED
}

public fw_WeaponPrimaryAtk_Post(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return HAM_IGNORED
	
	new id = pev(iEnt, pev_owner)
	
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ExecuteForward(ifw_WpnAtkPost, ifw_Result, id, iEnt, iWeaponId)
	
	if (ifw_Result == PLUGIN_HANDLED)
		return HAM_SUPERCEDE
		
	return HAM_IGNORED
}

public fw_SecondaryAtk_Pre(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return HAM_IGNORED
	
	new id = pev(iEnt, pev_owner)
	
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ExecuteForward(ifw_WpnSecAtkPre, ifw_Result, id, iEnt, iWeaponId)
	
	if (ifw_Result == PLUGIN_HANDLED)
		return HAM_SUPERCEDE
		
	return HAM_IGNORED
}

public fw_SecondaryAtk_Post(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return HAM_IGNORED
	
	new id = pev(iEnt, pev_owner)
	
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ExecuteForward(ifw_WpnSecAtkPost, ifw_Result, id, iEnt, iWeaponId)
	
	if (ifw_Result == PLUGIN_HANDLED)
		return HAM_SUPERCEDE
		
	return HAM_IGNORED
}

public fw_WeaponReload_Pre(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return HAM_IGNORED
		
	new id = pev(iEnt, pev_owner)
	
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ExecuteForward(ifw_WpnReloadPre, ifw_Result, id, iEnt, iWeaponId)
	
	return ifw_Result
}

public fw_WeaponReload_Post(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return HAM_IGNORED
		
	new id = pev(iEnt, pev_owner)
	
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ExecuteForward(ifw_WpnReloadPost, ifw_Result, id, iEnt, iWeaponId)
	
		
	return ifw_Result
}

public fw_ItemPostFrame(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return 
		
	new id = pev(iEnt, pev_owner)
	
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ExecuteForward(ifw_ItemPostFrame, ifw_Result, id, iEnt, iWeaponId)
	
		
}

public fw_ItemDeployPre(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return HAM_IGNORED
		
	new id = pev(iEnt, pev_owner)
	
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ExecuteForward(ifw_ItemDeployPre, ifw_Result, id, iEnt, iWeaponId)
		
	if (ifw_Result == PLUGIN_HANDLED)
		return HAM_SUPERCEDE
		
	return HAM_IGNORED
}

public fw_ItemDeploy_Pre(iEnt)
{
	if (!pev_valid(iEnt))
		return HAM_IGNORED
	
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	
	new id = pev(iEnt, pev_owner)
	
	if (is_user_connected(id))
	{	
	
		if (is_secondary_wpn(iWeaponId) || is_primary_wpn(iWeaponId))
			_SetUserBPA(id, iWeaponId, _GetUserBPA(id, iWeaponId))
	}
	
	ExecuteForward(ifw_ItemDeployPre, ifw_Result, id, iEnt, iWeaponId)
	
	if (ifw_Result == PLUGIN_HANDLED)
		return HAM_SUPERCEDE
		
	return HAM_IGNORED
}

public fw_ItemDeploy_Post(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return HAM_IGNORED
		
	new id = pev(iEnt, pev_owner)
	
	if (!IsValidPlayer(id))
		return HAM_IGNORED
		
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ExecuteForward(ifw_ItemDeployPost, ifw_Result, id, iEnt, iWeaponId)
		
	if (ifw_Result == PLUGIN_HANDLED)
		return HAM_SUPERCEDE
	
	set_pev(iEnt, pev_iDeployed, 1)
	
	//if (IsARifle(iWeaponId) || IsAPistol(iWeaponId))
	//	cs_set_user_bpammo(id, iWeaponId, iCSWPN_BPA[id][iWeaponId])
	return HAM_IGNORED
}

public fw_ItemAttachToPlayer(iEnt, id)
{
	if (!iEnt || !pev_valid(iEnt))
		return HAM_IGNORED
		
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ExecuteForward(ifw_ItemAttachToPlayer, ifw_Result, id, iEnt, iWeaponId)
	
	if (ifw_Result != PLUGIN_CONTINUE)
		return HAM_SUPERCEDE
		
	return HAM_IGNORED
}

public fw_ItemAttachToPlayerPost(iEnt, id)
{
	if (!iEnt || !pev_valid(iEnt))
		return 
		
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ExecuteForward(ifw_ItemAttachToPlayerPost, ifw_Result, id, iEnt, iWeaponId)
}

public fw_ItemHolster_Pre(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return
		
	new id = pev(iEnt, pev_owner)
	
	if (!is_user_connected(id))
		return
		
	ExecuteForward(ifw_ItemHolster_Pre, ifw_Result, id, iEnt)
}

public fw_ItemHolster_Post(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return
		
	new id = pev(iEnt, pev_owner)
	
	if (!is_user_connected(id))
		return
		
	set_pev(iEnt, pev_iDeployed, 0)
	
	ExecuteForward(ifw_ItemHolster_Post, ifw_Result, id, iEnt)
}

public fw_RemovePlayerWpn(id, iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return HAM_IGNORED
		
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ExecuteForward(ifw_RemovePlayerItem, ifw_Result, id, iEnt, iWeaponId)
	
	set_pev(iEnt, pev_iDeployed, 0)
	//if (ifw_Result != PLUGIN_CONTINUE)
	//	return HAM_SUPERCEDE
		
	return HAM_IGNORED
}

public fw_WeaponSendAnim_Pre(iEnt, iAnim, iLocal, iBody)
{
	if (!iEnt || !pev_valid(iEnt))
		return HAM_IGNORED
		
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	new id = pev(iEnt, pev_owner)
	ExecuteForward(ifw_SendAnimPre, ifw_Result, id, iEnt, iWeaponId, iAnim)
	
	if (ifw_Result == PLUGIN_HANDLED)
		return HAM_SUPERCEDE
		
	return HAM_IGNORED
}

public fw_WeaponSendAnim_Post(iEnt, iAnim, iLocal, iBody)
{
	if (!iEnt || !pev_valid(iEnt))
		return HAM_IGNORED
		
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	new id = pev(iEnt, pev_owner)
	ExecuteForward(ifw_SendAnimPost, ifw_Result, id, iEnt, iWeaponId, iAnim)
	
	if (ifw_Result == PLUGIN_HANDLED)
		return HAM_SUPERCEDE
		
	return HAM_IGNORED
}

public fw_PrecacheEventPost(iType, szEvent[])
{
	new const CSWPN_EVENT[][] = 
	{
		"events/usp.sc", "events/glock18.sc", "events/deagle.sc", "events/p228.sc",
		"events/elite_left.sc","events/elite_right.sc","events/fiveseven.sc","events/m3.sc","events/xm1014.sc",
		"events/mp5n.sc","events/tmp.sc","events/p90.sc","events/mac10.sc",
		"events/ump45.sc","events/galil.sc","events/famas.sc","events/ak47.sc","events/sg552.sc",
		"events/m4a1.sc","events/aug.sc","events/scout.sc","events/awp.sc","events/g3sg1.sc",
		"events/sg550.sc","events/m249.sc"
	}

	for (new i = 0; i < sizeof CSWPN_EVENT; ++i) 
	{
		if (equal(szEvent, CSWPN_EVENT[i])) 
		{
			iCSWPN_EVENT_BITSUM |= (1<<get_orig_retval())
			//forward_return(FMV_CELL, 0)
			//return FMRES_SUPERCEDE
		}
	}

        return FMRES_IGNORED
}

public fw_PlaybackEventPost(iFlags, id, iEventId)
{
	if (!is_user_connected(id))
		return FMRES_IGNORED
		
	if (!is_user_alive(id))
		return FMRES_IGNORED
		
	//if (is_user_bot(id))
	//	return
		
	if (!(iCSWPN_EVENT_BITSUM & (1<<iEventId)))
                return FMRES_IGNORED
	
	
	new iWeaponId = get_user_weapon(id)
	
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90)
		return FMRES_IGNORED
		
	new szWeaponName[32]
	get_weaponname(iWeaponId, szWeaponName, 31)
	
	new iWeaponEnt = find_ent_by_owner(-1, szWeaponName, id)
	
	if (!iWeaponEnt)
		return FMRES_IGNORED
	
	ExecuteForward(ifw_WeaponPlayEvent, ifw_Result, id, iWeaponId, iEventId, iWeaponEnt)
	return FMRES_SUPERCEDE
	
}

public Event_CurWeapon(id)
{
	if (!is_user_connected(id))
		return
		
	if (!is_user_alive(id))
		return
		
	new iEnt = get_pdata_cbase(id, m_pActiveItem, 5)
	
	if (!iEnt || !pev_valid(iEnt))
		return
		
	if (pev(iEnt, pev_iDeployed))
		return
		
	ExecuteHamB(Ham_Item_Deploy, iEnt)
}

public fw_EntitySpawn(iEnt)
{
	if(!iEnt || !pev_valid(iEnt))
		return
		
	new szClassName[32]
	pev(iEnt ,pev_classname,szClassName, sizeof szClassName - 1)
		
	if(!TrieKeyExists(RegisteredClasses,szClassName))
	{
		RegisterHam(Ham_TraceAttack,szClassName,"globalTraceAttack")
		TrieSetCell(RegisteredClasses, szClassName, true)
	
	}
}

public globalTraceAttack(iVictim, iAttacker, Float:fDamage, Float:fDirection[3], tracehandle, damagebits)
{
	if (!is_user_connected(iAttacker))
		return
		
	ExecuteForward(ifw_WeaponTraceAttack , ifw_Result, iVictim, iAttacker, fDamage, fDirection[0], fDirection[1], fDirection[2], tracehandle, damagebits)
	
	return
}


public update_hud_WeaponList(id, iCsWpnId, iCsWpnClip, WpnClass[], iMaxBp ,iSendMsg)
{
	new /*sWeaponName[32],*/ iPriAmmoId, iPriAmmoMax, iSecAmmoId, iSecAmmoMax, iSlotId, iNumberInSlot, iWeaponId, iFlags
	//format(sWeaponName, charsmax(sWeaponName), "%s", WpnClass)    
	iPriAmmoId = -1
	iPriAmmoMax = -1
	iSecAmmoId = -1 //CSWPN_AMMOID[iCsWpnId]
	iSecAmmoMax = iMaxBp
	iNumberInSlot = get_cswpn_position(iCsWpnId)
	iWeaponId = iCsWpnId
	get_cswpn_slotid_flags(iCsWpnId, iSlotId, iFlags)

	send_message_WeaponList(id, WpnClass, iPriAmmoId, iPriAmmoMax, iSecAmmoId, iSecAmmoMax, iSlotId, iNumberInSlot, iWeaponId, iFlags)
	if (iSendMsg)
		_SendCurWeaponMsg(id, 1, iWeaponId, iCsWpnClip, 0)
}



stock send_message_WeaponList(id, const sWeaponName[], iPriAmmoID, iPriAmmoMax, iSecAmmoID, iSecAmmoMax, iSlotId, iNumberInSlot, iWeaponId, iFlags)
{
	if (!IsValidPlayer(id))
		return
		
	if (is_user_bot(id))
		return
		
	message_begin(MSG_ONE_UNRELIABLE, iMsg_WeaponList , _, id)
	write_string(sWeaponName)
	write_byte(iPriAmmoID)
	write_byte(iPriAmmoMax)
	write_byte(iSecAmmoID)
	write_byte(iSecAmmoMax)
	write_byte(iSlotId)
	write_byte(iNumberInSlot)
	write_byte(iWeaponId)
	write_byte(iFlags)
	message_end()
}  

stock get_cswpn_position(cswpn)
{
	new iPosition
    
	switch (cswpn)
	{
		case CSW_P228: iPosition = 3
		case CSW_SCOUT: iPosition = 9
		case CSW_HEGRENADE: iPosition = 1
		case CSW_XM1014: iPosition = 12
		case CSW_C4: iPosition = 3
		case CSW_MAC10: iPosition = 13
		case CSW_AUG: iPosition = 14
		case CSW_SMOKEGRENADE: iPosition = 3
		case CSW_ELITE: iPosition = 5
		case CSW_FIVESEVEN: iPosition = 6
		case CSW_UMP45: iPosition = 15
		case CSW_SG550: iPosition = 16
		case CSW_GALIL: iPosition = 17
		case CSW_FAMAS: iPosition = 18
		case CSW_USP: iPosition = 4
		case CSW_GLOCK18: iPosition = 2
		case CSW_AWP: iPosition = 2
		case CSW_MP5NAVY: iPosition = 7
		case CSW_M249: iPosition = 4
		case CSW_M3: iPosition = 5
		case CSW_M4A1: iPosition = 6
		case CSW_TMP: iPosition = 11
		case CSW_G3SG1: iPosition = 3
		case CSW_FLASHBANG: iPosition = 2
		case CSW_DEAGLE: iPosition = 1
		case CSW_SG552: iPosition = 10
		case CSW_AK47: iPosition = 1
		case CSW_KNIFE: iPosition = 1
		case CSW_P90: iPosition = 8
		default: iPosition = 0
	}
	return iPosition
}

stock get_cswpn_slotid_flags(iCsWpn, &iSlotId, &iFlags)
{
	new iCsWpnType = get_cswpn_type(iCsWpn)
	switch (iCsWpnType)
	{
		case 1:
		{
			iSlotId = 0
			iFlags = 0
		}
		case 2:
		{
			iSlotId = 1
			iFlags = 0
		}
		case 3:
		{
			iSlotId = 2
			iFlags = 0
		}
		case 4:
		{    
			iSlotId = 3
			iFlags = 24
		}
		case 5:
		{    
			iSlotId = 4
			iFlags = 24
		}
	}
}

stock get_cswpn_type(cswpn)
{
	new iType
	switch (cswpn)
	{
		case CSW_M3, CSW_XM1014, CSW_MAC10, CSW_UMP45, CSW_MP5NAVY, CSW_TMP, CSW_P90, CSW_SCOUT, CSW_AUG, CSW_SG550, CSW_GALIL, CSW_FAMAS, CSW_AWP, CSW_M4A1, CSW_G3SG1, CSW_SG552, CSW_AK47, CSW_M249:
		{
			iType = 1
		}
		case CSW_P228, CSW_ELITE, CSW_FIVESEVEN, CSW_USP, CSW_GLOCK18, CSW_DEAGLE:
		{
			iType = 2
		}
		case CSW_KNIFE:
		{
			iType = 3
		}
		case CSW_HEGRENADE,  CSW_FLASHBANG, CSW_SMOKEGRENADE:
		{
			iType = 4
		}
		case CSW_C4:
		{
			iType = 5
		}
		default:
		{
			iType = 0
		}
	}
	return iType
}

stock IsValidPlayer(id)
{
	if (!(1 <= id <= iMAX_PLAYERS))
		return 0
		
	return is_user_connected(id)
}

public _StripWeaponEnt(id, iEnt)
{
	if (!iEnt)
		return 0
		
	new wId = cs_get_weapon_id(iEnt)
	new iTmp;
	if(get_user_weapon(id, iTmp, iTmp) == wId) ExecuteHamB(Ham_Weapon_RetireWeapon, iEnt);
	
	if(!ExecuteHamB(Ham_RemovePlayerItem, id, any:iEnt)) return 0;
	
	ExecuteHamB(Ham_Item_Kill, iEnt);
	set_pev(id, pev_weapons, pev(id, pev_weapons) & ~(1<<wId));
	
	return 1;
}

stock HamStripPlayerWeapon(id, szWeaponName[])
{
	if(!equal(szWeaponName,"weapon_",7)) return 0;
	
	new wId = get_weaponid(szWeaponName);
	if(!wId) return 0;
	
	new wEnt;
	while((wEnt = engfunc(EngFunc_FindEntityByString, wEnt, "classname", szWeaponName)) && pev(wEnt, pev_owner) != id) {}
	if(!wEnt) return 0;
	
	new iTmp;
	if(get_user_weapon(id, iTmp, iTmp) == wId) ExecuteHamB(Ham_Weapon_RetireWeapon, wEnt);
	
	if(!ExecuteHamB(Ham_RemovePlayerItem, id, any:wEnt)) return 0;
	
	ExecuteHamB(Ham_Item_Kill, wEnt);
	set_pev(id, pev_weapons, pev(id, pev_weapons) & ~(1<<wId));
	
	return 1;
}

public FireBulletsPlayer (iWeaponEnt, cShots, Float:vecSrc[3], Float:vecDirShooting[3], Float:vecSpread[3], Float:flDistance, Float:fDamage, pevAttacker , DMG_TYPE, Float:fPropertyDistance)
{
	new tr = create_tr2()
	
	new Float:vecRight[3], Float:vecUp[3];
	global_get( glb_v_right, vecRight );
	global_get( glb_v_up, vecUp );

	new Float:x, Float:y/* , Float:z; */

	new Float:vecDir[3], Float:vecEnd[3], Float:vecTemp1[3], Float:vecTemp2[3];
		
	for ( new iShot = 1; iShot <= cShots; iShot++ )
	{
		//Use player's random seed.
		// get circular gaussian spread
		x = random_float( -0.5, 0.5 ) + random_float( -0.5, 0.5 );
		y = random_float( -0.5, 0.5 ) + random_float( -0.5, 0.5 );
       
		xs_vec_mul_scalar( vecRight, x * vecSpread[0], vecTemp1 );
		xs_vec_mul_scalar( vecUp, y * vecSpread[1], vecTemp2 );
	
		xs_vec_add( vecDirShooting, vecTemp1, vecDir );
		xs_vec_add( vecDir, vecTemp2, vecDir );

     
		xs_vec_mul_scalar( vecDir, flDistance, vecTemp1 );
		xs_vec_add( vecSrc, vecTemp1, vecEnd );
		
		
		engfunc( EngFunc_TraceLine, vecSrc, vecEnd, DONT_IGNORE_MONSTERS, pevAttacker/*pentIgnore*/, tr );
		
		new Float:fDirection[3], Float:fAngles[3]
		
		pev(pevAttacker, pev_angles, fAngles) 
		angle_vector(fAngles, ANGLEVECTOR_FORWARD, fDirection) 
     

		xs_vec_mul_scalar(fDirection, SHOT_DISTANCE_POSSIBLE, vecEnd) 
	
		
		new Float:fOrigin[3], Float:fAttackerOrigin[3]
		pev(pevAttacker, pev_origin, fAttackerOrigin)
		
		get_tr2(tr, TR_vecEndPos, fOrigin)
		
		new Float:flFraction;
		get_tr2( tr, TR_flFraction, flFraction );
		
		if(flFraction != 1.0)
		{
			new pEntity = get_tr2( tr, TR_pHit );

			if ( fDamage)
			{
				
				new Float:fRealDistance = vector_distance(fAttackerOrigin, fOrigin)
				
				if (fRealDistance > fPropertyDistance)
					fDamage *= (fPropertyDistance / fRealDistance)
				if ( pev_valid(pEntity) )
				{
					new iCanDoDMG = 1
					
					new szClassName[32]
					pev(pEntity, pev_classname, szClassName, sizeof szClassName - 1)
					
					if (!is_Ent_Breakable(pEntity) && !is_user_connected(pEntity))
						iCanDoDMG = 0
					
					
					ExecuteHamB(Ham_TraceAttack, pEntity, pevAttacker, fDamage, fDirection, tr, DMG_TYPE)
					if (get_tr2(tr, TR_iHitgroup) != HIT_SHIELD)
						if (iCanDoDMG)
							ExecuteHamB( Ham_TakeDamage, pEntity, any:pevAttacker, any:pevAttacker, any:fDamage, any:DMG_TYPE )
					
					
				
				}
				
				new iOrigin[3]
				FVecIVec(fOrigin, iOrigin)
				
				if (!IsValidPlayer(pEntity))
				{
					//if (pEntity)
					//	CreateBulletHole_Entity(iOrigin, pEntity, iDecal)
					//else	
					CreateBulletHole_World(iOrigin, iBulletID, pevAttacker)
				}
				free_tr2(tr)
				
			} 
		}
		
		
	}
	return 1;
}

public FireBullets3(iWeaponEnt, Float:vecSrc[3], Float:vecDirShooting[3], Float:flDistance, Float:vecSpread[3], Float:fDamage, pevAttacker , DMG_TYPE, Float:fPropertyDistance)
{
	new tr = create_tr2()
	
	new Float:vecRight[3], Float:vecUp[3];
	global_get( glb_v_right, vecRight );
	global_get( glb_v_up, vecUp );

	new Float:x, Float:y/* , Float:z; */

	new Float:vecDir[3], Float:vecEnd[3], Float:vecTemp1[3], Float:vecTemp2[3];
		
	
	//Use player's random seed.
	// get circular gaussian spread
	x = random_float( -0.5, 0.5 ) + random_float( -0.5, 0.5 );
	y = random_float( -0.5, 0.5 ) + random_float( -0.5, 0.5 );
       
	xs_vec_mul_scalar( vecRight, x * vecSpread[0], vecTemp1 );
	xs_vec_mul_scalar( vecUp, y * vecSpread[1], vecTemp2 );
	
	xs_vec_add( vecDirShooting, vecTemp1, vecDir );
	xs_vec_add( vecDir, vecTemp2, vecDir );

     
	xs_vec_mul_scalar( vecDir, flDistance, vecTemp1 );
	xs_vec_add( vecSrc, vecTemp1, vecEnd );
		
		
	engfunc( EngFunc_TraceLine, vecSrc, vecEnd, DONT_IGNORE_MONSTERS, pevAttacker/*pentIgnore*/, tr );
		
	new Float:fDirection[3], Float:fAngles[3]
		
	pev(pevAttacker, pev_angles, fAngles) 
	angle_vector(fAngles, ANGLEVECTOR_FORWARD, fDirection) 
     

	xs_vec_mul_scalar(fDirection, SHOT_DISTANCE_POSSIBLE, vecEnd) 
	
		
	new Float:fOrigin[3], Float:fAttackerOrigin[3]
	pev(pevAttacker, pev_origin, fAttackerOrigin)
		
	get_tr2(tr, TR_vecEndPos, fOrigin)
		
	new Float:flFraction;
	get_tr2( tr, TR_flFraction, flFraction );
		
	if(flFraction != 1.0)
	{
		new pEntity = get_tr2( tr, TR_pHit );

		if ( fDamage)
		{
				
			new Float:fRealDistance = vector_distance(fAttackerOrigin, fOrigin)
				
			if (fRealDistance > fPropertyDistance)
				fDamage *= (fPropertyDistance / fRealDistance)
			if ( pev_valid(pEntity) )
			{
				new iCanDoDMG = 1
				
				new szClassName[32]
				pev(pEntity, pev_classname, szClassName, sizeof szClassName - 1)
					
				if (!is_Ent_Breakable(pEntity) && !is_user_connected(pEntity))
					iCanDoDMG = 0
					
					
				ExecuteHamB(Ham_TraceAttack, pEntity, pevAttacker, fDamage, fDirection, tr, DMG_TYPE)
				if (get_tr2(tr, TR_iHitgroup) != HIT_SHIELD)
				{
					if (iCanDoDMG)
						ExecuteHamB( Ham_TakeDamage, pEntity, any:pevAttacker, any:pevAttacker, any:fDamage, any:DMG_TYPE )
				}
					
				
			}
				
			new iOrigin[3]
			FVecIVec(fOrigin, iOrigin)
				
			if (!IsValidPlayer(pEntity))
			{
				//if (pEntity)
				//	CreateBulletHole_Entity(iOrigin, pEntity, iDecal)
				//else	
				CreateBulletHole_World(iOrigin, iBulletID, pevAttacker)
			}
			free_tr2(tr)
				
		} 
	}
		
	return 1;
}

stock CreateBulletHole_Entity(iOrigin[3], iTarget, iDecal)
{
	/*
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_DECAL)
	write_coord(iOrigin[0])
	write_coord(iOrigin[1])
	write_coord(iOrigin[2])
	write_byte(iDecal)
	write_short(iTarget)
	message_end()
	*/
	
	
}

public native_SlashMelee(iPlayer,  iStab, Float:fDamage, Float:fRange, iDamageBit, iCreateSpark, szWallSound[], szBodySound[])
{
	param_convert(7)
	param_convert(8)
	
	new iTrace;
	
	new iDidHit;
	new iEntity;
	new iHitWorld;
	
	
	new Float: vecSrc[3];
	new Float: vecEnd[3];
	new Float: vecAngle[3];
	new Float: vecRight[3];
	new Float: vecForward[3];
	
	new Float: flFraction;
	
	iTrace = create_tr2();
	
	pev(iPlayer, pev_v_angle, vecAngle);
	engfunc(EngFunc_MakeVectors, vecAngle);
	
	GetGunPosition(iPlayer, vecSrc);
	
	global_get(glb_v_right, vecRight);
	global_get(glb_v_forward, vecForward);
	
	if (!iStab)
	{
		xs_vec_mul_scalar(vecForward, fRange, vecForward);
		xs_vec_add(vecForward, vecSrc, vecEnd);
	}
	else
	{
		xs_vec_mul_scalar(vecRight, 6.0, vecRight);
		xs_vec_mul_scalar(vecForward, fRange, vecForward);
		
		xs_vec_add(vecRight, vecForward, vecForward);
		xs_vec_add(vecForward, vecSrc, vecEnd);
	}
	
	engfunc(EngFunc_TraceLine, vecSrc, vecEnd, DONT_IGNORE_MONSTERS, iPlayer, iTrace);
	get_tr2(iTrace, TR_flFraction, flFraction);
	
	if (flFraction >= 1.0)
	{
		//engfunc(EngFunc_TraceHull, vecSrc, vecEnd, DONT_IGNORE_MONSTERS, HULL_HEAD, iPlayer, iTrace);
		
		new Float:flVectorEnd[3]
		
		pev(iPlayer, pev_v_angle, flVectorEnd)
		angle_vector(flVectorEnd, ANGLEVECTOR_FORWARD, flVectorEnd)
		xs_vec_mul_scalar(flVectorEnd, fRange, flVectorEnd)
		xs_vec_add(vecSrc, flVectorEnd, flVectorEnd)
		engfunc(EngFunc_TraceHull, vecSrc, flVectorEnd, DONT_IGNORE_MONSTERS, HULL_HEAD, iPlayer, iTrace)
		
		get_tr2(iTrace, TR_flFraction, flFraction);
		
		if (flFraction < 1.0)
		{
			#define Instance(%0) ((%0 == -1) ? 0 : %0)
			new iHit = Instance(get_tr2(iTrace, TR_pHit));
			
			if (!iHit || ExecuteHamB(Ham_IsBSPModel, iHit))
			{
				new Float:VEC_DUCK_HULL_MIN[3]	=	{ -16.0, -16.0, -18.0 }
				new Float:VEC_DUCK_HULL_MAX[3]	=	{ 16.0,  16.0,  32.0 }
				
				FindHullIntersection(vecSrc, iTrace, VEC_DUCK_HULL_MIN	, VEC_DUCK_HULL_MAX, iPlayer);
			}
			
			get_tr2(iTrace, TR_vecEndPos, vecEnd);
		}
	}
	
	get_tr2(iTrace, TR_flFraction, flFraction);
	
	if (flFraction >= 1.0)
	{
		
	}
	else
	{
		
		iDidHit = true;
		iEntity = Instance(get_tr2(iTrace, TR_pHit));
		
		new iEyeOrigin[3], Float:fEyeOrigin[3]
		
		get_user_origin(iPlayer, iEyeOrigin, 1)
		IVecFVec(iEyeOrigin, fEyeOrigin)
		
		new Float:fVictimOrigin[3]
		
		new iHitgroup = 0
		iHitWorld = 1
		
		if (pev_valid(iEntity))
		{
				
			pev(iEntity, pev_origin, fVictimOrigin)
			
			GetCenter(iEntity, vecSrc);
			GetCenter(iPlayer, vecEnd);
		       
			xs_vec_sub(vecEnd, vecSrc, vecEnd);
			xs_vec_normalize(vecEnd, vecEnd);
		       
			pev(iEntity, pev_angles, vecAngle);
			engfunc(EngFunc_MakeVectors, vecAngle);
		       
			global_get(glb_v_forward, vecForward);
			xs_vec_mul_scalar(vecEnd, -1.0, vecEnd);
		       
			if (xs_vec_dot(vecForward, vecEnd) > 0.3)
			{
				// flDamage = 10000.0
			}
			
			
			iHitgroup = get_tr2(iTrace, TR_iHitgroup)
			
			if (iHitgroup == HIT_HEAD)
				fDamage *= 1.5;
			else if (iHitgroup == HIT_SHIELD)
				fDamage = 0.0
				
			new iIsPlayer = 0
			
			if (ExecuteHamB(Ham_IsPlayer, iEntity))
			{
				iHitWorld = 0
				iIsPlayer = 1
				set_pdata_int(iPlayer,  m_iAnimationInCaseDie, iHitgroup, 5)
			}
			
			new Float:fDistance = get_distance_f(fEyeOrigin, fVictimOrigin)
			
			new Float:fVecForward[3]
			global_get(glb_v_forward, fVecForward)
			
			new Float:fTmpDmg = (fDamage / fRange) * fDistance
			
			ExecuteHamB(Ham_TraceAttack, iEntity, iPlayer, fTmpDmg, fVecForward, iTrace, iDamageBit)
			
			new iDamageCanBeExecuted = 0
			
			if (iIsPlayer)
			{
				
				if (cs_get_user_team(iPlayer) == cs_get_user_team(iEntity))
				{
					if (get_cvar_num("mp_friendlyfire"))
						iDamageCanBeExecuted = 1
				}
				else	iDamageCanBeExecuted = 1
			}
			else
			{
				if (is_Ent_Breakable(iEntity))
					iDamageCanBeExecuted = 1
			}
			
			if (iDamageCanBeExecuted)
			{
				ExecuteHamB(Ham_TakeDamage, iEntity, iPlayer, iPlayer, fTmpDmg, iDamageBit);
				client_cmd(iPlayer, "spk %s", szBodySound)
			}
			
		}
			
		if (iHitWorld)
		{
			client_cmd(iPlayer, "spk %s", szWallSound)
			
			if (iCreateSpark)
			{
				new iVecEnd[3]
				get_tr2(iTrace, TR_vecEndPos, vecEnd)
				FVecIVec(vecEnd, iVecEnd)
				emessage_begin(MSG_BROADCAST, SVC_TEMPENTITY)
				ewrite_byte(TE_SPARKS)
				ewrite_coord(iVecEnd[0])
				ewrite_coord(iVecEnd[1])
				ewrite_coord(iVecEnd[2]) 
				emessage_end()
			}
		}
	}

	free_tr2(iTrace);
	return iDidHit;
}

public _GiveUserWeapon(id, iWeaponId, iGiveBpa)
{
	if (!is_user_alive(id))
		return 0
		
	if (!is_valid_weapon(iWeaponId))
		return 0
	
	if (iWeaponId == CSW_C4 || iWeaponId == CSW_KNIFE)
		return 0
		
	new szClassName[32]
	get_weaponname(iWeaponId, szClassName, sizeof szClassName - 1)
	
	if (is_primary_wpn(iWeaponId))
		_DropPlayerPrimWeapon(id)	
	else if (is_secondary_wpn(iWeaponId))
		_DropPlayerSecWeapon(id)
	else if (is_grenade(iWeaponId))
	{
		engclient_cmd(id, "drop", szClassName)
		_StripPlayerWeapon(id, szClassName)
	}
	
	new iEnt = fm_give_item(id, szClassName)
	
	if (!pev_valid(iEnt))
		return 0
	
	if (iGiveBpa)
		_SetUserBPA(id, iWeaponId, _Get_CS_DefaultBpa(iWeaponId))
		
	engclient_cmd(id, szClassName)
	client_cmd(id, szClassName)
	return 1
}

stock CreateBulletHole_World(iOrigin[3], iDecal, iAttacker)
{
	emessage_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	ewrite_byte(TE_WORLDDECAL)
	ewrite_coord(iOrigin[0])
	ewrite_coord(iOrigin[1])
	ewrite_coord(iOrigin[2])
	ewrite_byte(iDecal)
	emessage_end()
	
	emessage_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	ewrite_byte(TE_GUNSHOTDECAL)
	ewrite_coord(iOrigin[0])
	ewrite_coord(iOrigin[1])
	ewrite_coord(iOrigin[2])
	ewrite_short(iAttacker)
	ewrite_byte(iDecal)
	emessage_end()
}

stock is_Ent_Breakable(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return 0
	
	if ((entity_get_float(iEnt, EV_FL_health) > 0.0) && (entity_get_float(iEnt, EV_FL_takedamage) > 0.0) && !(entity_get_int(iEnt, EV_INT_spawnflags) & SF_BREAK_TRIGGER_ONLY))
		return 1
	
	return 0
}

stock GetGunPosition(const iPlayer, Float: vecResult[3])
{
	new Float: vecViewOfs[3];
	
	pev(iPlayer, pev_origin, vecResult);
	pev(iPlayer, pev_view_ofs, vecViewOfs);
    
	xs_vec_add(vecResult, vecViewOfs, vecResult);
} 
 
stock GetCenter(const iEntity, Float: vecSrc[3])
{
        new Float: vecAbsMax[3];
        new Float: vecAbsMin[3];
       
        pev(iEntity, pev_absmax, vecAbsMax);
        pev(iEntity, pev_absmin, vecAbsMin);
       
        xs_vec_add(vecAbsMax, vecAbsMin, vecSrc);
        xs_vec_mul_scalar(vecSrc, 0.5, vecSrc);
}

FindHullIntersection(const Float: vecSrc[3], &iTrace, const Float: vecMins[3], const Float: vecMaxs[3], const iEntity)
{
	new i, j, k;
	new iTempTrace;
	
	new Float: vecEnd[3];
	new Float: flDistance;
	new Float: flFraction;
	new Float: vecEndPos[3];
	new Float: vecHullEnd[3];
	new Float: flThisDistance;
	new Float: vecMinMaxs[2][3];
	
	flDistance = 999999.0;
	
	xs_vec_copy(vecMins, vecMinMaxs[0]);
	xs_vec_copy(vecMaxs, vecMinMaxs[1]);
	
	get_tr2(iTrace, TR_vecEndPos, vecHullEnd);
	
	xs_vec_sub(vecHullEnd, vecSrc, vecHullEnd);
	xs_vec_mul_scalar(vecHullEnd, 2.0, vecHullEnd);
	xs_vec_add(vecHullEnd, vecSrc, vecHullEnd);
	
	engfunc(EngFunc_TraceLine, vecSrc, vecHullEnd, DONT_IGNORE_MONSTERS, iEntity, (iTempTrace = create_tr2()));
	get_tr2(iTempTrace, TR_flFraction, flFraction);
	
	if (flFraction < 1.0)
	{
		free_tr2(iTrace);
		
		iTrace = iTempTrace;
		return;
	}
	
	for (i = 0; i < 2; i++)
	{
		for (j = 0; j < 2; j++)
		{
			for (k = 0; k < 2; k++)
			{
				vecEnd[0] = vecHullEnd[0] + vecMinMaxs[i][0];
				vecEnd[1] = vecHullEnd[1] + vecMinMaxs[j][1];
				vecEnd[2] = vecHullEnd[2] + vecMinMaxs[k][2];
				
				engfunc(EngFunc_TraceLine, vecSrc, vecEnd, DONT_IGNORE_MONSTERS, iEntity, iTempTrace);
				get_tr2(iTempTrace, TR_flFraction, flFraction);
				
				if (flFraction < 1.0)
				{
					get_tr2(iTempTrace, TR_vecEndPos, vecEndPos);
					xs_vec_sub(vecEndPos, vecSrc, vecEndPos);
					
					if ((flThisDistance = xs_vec_len(vecEndPos)) < flDistance)
					{
						free_tr2(iTrace);
						
						iTrace = iTempTrace;
						flDistance = flThisDistance;
					}
				}
			}
		}
	}
}

stock load_weapon_file_info()
{
	if (!TRIE_WeaponInfo)
		TRIE_WeaponInfo = TrieCreate()
		
	// Build customization file path
	new path[64]
	get_configsdir(path, charsmax(path))
	
	formatex(path, charsmax(path), "%s/%s", path, CONFIGURATION_FILE)
	
	// File not present
	if (!file_exists(path))
		return;
	
	// Set up some vars to hold parsing info
	new linedata[1024], key[64], value[960]
	
	// Open customization file for reading
	new file = fopen(path, "rt")
	
	new iWeaponId = -1;
	
	
	while (file && !feof(file))
	{
		// Read one line at a time
		fgets(file, linedata, charsmax(linedata))
		
		// Replace newlines with a null character to prevent headaches
		replace(linedata, charsmax(linedata), "^n", "")
		
		// Blank line or comment
		if (!linedata[0] || linedata[0] == ';') continue;
		
		if (linedata[0] == '[')
		{			
			replace(linedata, sizeof linedata - 1, "[", "")
			replace(linedata, sizeof linedata - 1, "]", "")
			
			iWeaponId = get_weaponid(linedata)
			continue;
		}
		
		if (!is_valid_weapon(iWeaponId))
			continue
			
		// Get key and value(s)
		strtok(linedata, key, charsmax(key), value, charsmax(value), '=')
		
		// Trim spaces
		trim(key)
		
		
		if (equal(key, "NAME"))	
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_NAME)
			TrieSetString(TRIE_WeaponInfo, key, value)
		}
		else if (equal(key, "HUD"))	
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_HUD)
			TrieSetString(TRIE_WeaponInfo, key, value)
		}
		else if (equal(key, "ANIM-EXT"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_ANIM_EXT)
			TrieSetString(TRIE_WeaponInfo, key, value)
			
		}
		else if (equal(key, "CLIP"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_CLIP)
			TrieSetCell(TRIE_WeaponInfo, key, str_to_num(value))
		}
		else if (equal(key, "BPA"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_BPA)
			TrieSetCell(TRIE_WeaponInfo, key, str_to_num(value))
		}
		else if (equal(key, "RELOAD_TYPE"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_RELOAD_TYPE)
			TrieSetCell(TRIE_WeaponInfo, key, str_to_num(value))
		}
		else if (equal(key, "DEPLOY_TIME"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_DEPLOYTIME)
			TrieSetCell(TRIE_WeaponInfo, key, str_to_float(value))
		}
		else if (equal(key, "RELOAD_TIME"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_RELOADTIME)
			TrieSetCell(TRIE_WeaponInfo, key, str_to_float(value))
		}
		else if (equal(key, "ROF"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_ROF)
			TrieSetCell(TRIE_WeaponInfo, key, str_to_float(value))
		}
		else if (equal(key, "ROF_ADS"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_ROF_ADS)
			TrieSetCell(TRIE_WeaponInfo, key, str_to_float(value))
		}
		else if (equal(key, "INSERT_TIME"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_INSERT_TIME)
			TrieSetCell(TRIE_WeaponInfo, key, str_to_float(value))
		}
		else if (equal(key, "AFTER_INSERT_TIME"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_AF_IS_TIME)
			TrieSetCell(TRIE_WeaponInfo, key, str_to_float(value))
		}
		else if (equal(key, "SPEED"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_SPEED)
			TrieSetCell(TRIE_WeaponInfo, key, str_to_float(value))
		}
		else if (equal(key, "WEIGHT"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_WEIGHT)
			TrieSetCell(TRIE_WeaponInfo, key, str_to_float(value))
		}
		else if (equal(key, "COST"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_COST)
			TrieSetCell(TRIE_WeaponInfo, key, str_to_num(value))
		}
		else if (equal(key, "CROSSHAIR"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_CROSSHAIR)
			if (str_to_num(value))	
				TrieSetCell(TRIE_WeaponInfo, key, 1)
			else	TrieSetCell(TRIE_WeaponInfo, key, 0)
		}
		else if (equal(key, "ADS-ENABLE"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_ADS_STATE)
			TrieSetCell(TRIE_WeaponInfo, key, str_to_num(value))
		}
		else if (equal(key, "ADS-FOV"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_ADS_STATE)
			TrieSetCell(TRIE_WeaponInfo, key, str_to_num(value))
		}
		else if (equal(key, "SEMI-WPN"))
		{
			formatex(key, sizeof key - 1, "%d_%s", iWeaponId, TRIE_FIELD_SEMI_WPN)
			TrieSetCell(TRIE_WeaponInfo, key, str_to_num(value))
		}
	}
}
