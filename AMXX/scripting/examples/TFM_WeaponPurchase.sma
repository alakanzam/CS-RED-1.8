/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <cstrike>

#include <AccountManager>
#include <TFM_WPN>
#include <cswpn_ultilities>
#include <RankManagement/TFM_LevelSystem>
#include <player_api>
#include <GamePlay_Included/Tools>

#define PLUGIN "TFM Weapon Purchase"
#define VERSION "1.0"
#define AUTHOR "Redplane"

#define MAX_GP	50000
#define MAX_COIN	200

#define SetPlayerBit(%1,%2)      (%1 |= (1<<(%2&31)))
#define ClearPlayerBit(%1,%2)    (%1 &= ~(1 <<(%2&31)))
#define CheckPlayerBit(%1,%2)    (%1 & (1<<(%2&31)))

new bFirstBuy_Primary
new bFirstBuy_Secondary
new bFirstBuy_Melee
new bFirstBuy_Grenade

#define MENUID_SHOP_VGUI	28

/***********************************************************/
#define WARN_NOT_ONLINE		"TFM_Not_Online"
#define WARN_OUT_RANGE		"TFM_Out_Range"
#define WARN_NOT_ENOUGH_GP	"TFM_Not_Enough_GP"
#define WARN_NOT_ENOUGH_COIN	"TFM_Not_Enough_COIN"
#define WARN_PURCHASE_OVER	"TFM_Purchase_Time_Over"
#define WARN_LIMIT_PURCHASE_TIME	"TFM_Limit_Purchase_Time"
/***********************************************************/

new Float:flEndBuyTime[33]

new PCVAR_flBuyTime

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	if (is_gungame_on())
	{
		pause("a")
		return
	}
	
	PCVAR_flBuyTime = register_cvar("TFM_Option/BuyTime", "20")
	
	register_clcmd("shop", "clcmd_OpenShop")
	register_clcmd("PurchasePrimary", "clcmd_PurchasePrimary")
	register_clcmd("PurchaseSecondary", "clcmd_PurchaseSecondary")
	register_clcmd("PurchaseMelee", "clcmd_PurchaseMelee")
	register_clcmd("PurchaseGrenade", "clcmd_PurchaseGrenade")
	
	register_dictionary("TFM_Dictionary.txt")
	
	register_forward(FM_PlayerPostThink, "fw_PlayerPostThink")
	
	
}


public csred_PlayerSpawnPost(id)
{		
	set_max_money(id)
	
	SetPlayerBit(bFirstBuy_Primary, id);
	SetPlayerBit(bFirstBuy_Secondary, id);
	SetPlayerBit(bFirstBuy_Melee, id);
	SetPlayerBit(bFirstBuy_Grenade, id);
	
	flEndBuyTime[id] = get_gametime() + get_pcvar_float(PCVAR_flBuyTime) 
	
	client_print(id, print_center, "%L", LANG_SERVER, WARN_LIMIT_PURCHASE_TIME, get_pcvar_num(PCVAR_flBuyTime) )

	
}

public TM_PlayerLoggedIn(id, szNickName[])
	set_default_weapon(id)



/*	Purchase Command	*/

public clcmd_OpenShop(id)
{
	if (!is_user_alive(id))
		return
		
	if (is_user_bot(id))
		return
		
	if (!can_player_buy_weapon(id, 0, 0, 0))
		return
		
	ShowPredefinedVgui(id, MENUID_SHOP_VGUI)
}

public clcmd_PurchasePrimary(id, iLevel, iCid)
{
	if (!CheckPlayerBit(bFirstBuy_Primary, id))
		return
		
	if (!can_player_buy_weapon(id, iLevel, iCid))
		return
	
	set_max_money(id)
	
	new szWeaponType[3], szWeaponModel[128]
	
	read_argv(1, szWeaponType, sizeof szWeaponType - 1)
	read_argv(2, szWeaponModel, sizeof szWeaponModel - 1)
	
	new iCurrentInventoryId = get_user_current_slot(id)
	
	if (equal(szWeaponType, "1"))
	{
		new iWeaponId = UT_WorldModelToWeaponId(szWeaponModel)
		
		if (!is_primary_wpn(iWeaponId))
			return
			
		new iCost = UT_Get_CS_Cost(iWeaponId)
		
		
		switch (UT_Get_CS_CostType(iWeaponId))
		{
			case 2:
			{
				new iCoin = TFM_get_user_coin(id)
				if (iCoin < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_COIN)
					return
				}
					
				iCoin -= iCost
				TFM_set_user_coin(id, iCoin)
			}
			default:
			{
				new iGp = TFM_get_user_gp(id)
				if (iGp < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_GP)
					return
				}
					
				iGp -= iCost
				TFM_set_user_gp(id, iGp)
			}
		}
		
		
		UT_GiveUserWeapon(id, iWeaponId, 1)
		ClearPlayerBit(bFirstBuy_Primary, id)
		set_inventory_primary(id, iCurrentInventoryId , 1, iWeaponId)
	}
	else if (equal(szWeaponType, "2"))
	{
		new iPrimaryWpnId = find_pw_by_model(szWeaponModel)
		
		if (!is_valid_pw(iPrimaryWpnId))
			return
		
		new iCost = get_pw_cost(iPrimaryWpnId)
		
		switch (get_pw_cost_type(iPrimaryWpnId))
		{
			case 2:
			{
				new iCoin = TFM_get_user_coin(id)
				if (iCoin < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_COIN)
					return
				}
					
				iCoin -= iCost
				TFM_set_user_coin(id, iCoin)
			}
			default:
			{
				new iGp = TFM_get_user_gp(id)
				if (iGp < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_GP)
					return
				}
					
				iGp -= iCost
				TFM_set_user_gp(id, iGp)
			}
		}
		
		give_user_pw(id, iPrimaryWpnId)
		ClearPlayerBit(bFirstBuy_Primary, id)
		set_inventory_primary(id, iCurrentInventoryId, 2, iPrimaryWpnId)
	}
	else if (equal(szWeaponType, "3"))
	{
		new iPrimaryWpnId = find_pw_by_serial(szWeaponModel)
		
		if (!is_valid_pw(iPrimaryWpnId))
			return
		
		new iCost = get_pw_cost(iPrimaryWpnId)
		
		switch (get_pw_cost_type(iPrimaryWpnId))
		{
			case 2:
			{
				new iCoin = TFM_get_user_coin(id)
				if (iCoin < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_COIN)
					return
				}
					
				iCoin -= iCost
				TFM_set_user_coin(id, iCoin)
			}
			default:
			{
				new iGp = TFM_get_user_gp(id)
				if (iGp < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_GP)
					return
				}
					
				iGp -= iCost
				TFM_set_user_gp(id, iGp)
			}
		}
		
		give_user_pw(id, iPrimaryWpnId)
		ClearPlayerBit(bFirstBuy_Primary, id)
		set_inventory_primary(id, iCurrentInventoryId, 1, iPrimaryWpnId)
	}
}

public clcmd_PurchaseSecondary(id, iLevel, iCid)
{
	if (!CheckPlayerBit(bFirstBuy_Secondary, id))
		return
	
	if (!can_player_buy_weapon(id, iLevel, iCid))
		return
		
		
	set_max_money(id)
	
	new szWeaponType[3], szWeaponModel[128]
	
	read_argv(1, szWeaponType, sizeof szWeaponType - 1)
	read_argv(2, szWeaponModel, sizeof szWeaponModel - 1)
	
	new iCurrentInventoryId = get_user_current_slot(id)
	
	if (equal(szWeaponType, "1"))
	{
		new iWeaponId = UT_WorldModelToWeaponId(szWeaponModel)
		
		if (!is_secondary_wpn(iWeaponId))
			return
			
		new iCost = UT_Get_CS_Cost(iWeaponId)
		
		
		switch (UT_Get_CS_CostType(iWeaponId))
		{
			case 2:
			{
				new iCoin = TFM_get_user_coin(id)
				if (iCoin < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_COIN)
					return
				}
					
				iCoin -= iCost
				TFM_set_user_coin(id, iCoin)
			}
			default:
			{
				new iGp = TFM_get_user_gp(id)
				if (iGp < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_GP)
					return
				}
					
				iGp -= iCost
				TFM_set_user_gp(id, iGp)
			}
		}
		
		UT_GiveUserWeapon(id, iWeaponId, 1)
		ClearPlayerBit(bFirstBuy_Secondary, id)
		set_inventory_secondary(id, iCurrentInventoryId , 1, iWeaponId)
	}
	else if (equal(szWeaponType, "2"))
	{
		new iSecondaryWpnId = find_sec_wpn_by_model(szWeaponModel)
		
		if (!is_valid_sw(iSecondaryWpnId))
			return
			
		new iCost = get_sec_wpn_cost(iSecondaryWpnId)
		
		switch (get_sec_wpn_cost_type(iSecondaryWpnId))
		{
			case 2:
			{
				new iCoin = TFM_get_user_coin(id)
				if (iCoin < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_COIN)
					return
				}
					
				iCoin -= iCost
				TFM_set_user_coin(id, iCoin)
			}
			default:
			{
				new iGp = TFM_get_user_gp(id)
				if (iGp < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_GP)
					return
				}
					
				iGp -= iCost
				TFM_set_user_gp(id, iGp)
			}
		}
		
		give_player_sec_wpn(id, iSecondaryWpnId)
		ClearPlayerBit(bFirstBuy_Secondary, id)
		set_inventory_secondary(id, iCurrentInventoryId, 2, iSecondaryWpnId)
	}
	else if (equal(szWeaponType, "3"))
	{
		new iSecondaryWpnId = find_sec_wpn_by_model(szWeaponModel)
		
		if (!is_valid_sw(iSecondaryWpnId))
			return
		
		new iCost = get_sec_wpn_cost(iSecondaryWpnId)
		
		switch (get_sec_wpn_cost_type(iSecondaryWpnId))
		{
			case 2:
			{
				new iCoin = TFM_get_user_coin(id)
				if (iCoin < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_COIN)
					return
				}
					
				iCoin -= iCost
				TFM_set_user_coin(id, iCoin)
			}
			default:
			{
				new iGp = TFM_get_user_gp(id)
				if (iGp < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_GP)
					return
				}
					
				iGp -= iCost
				TFM_set_user_gp(id, iGp)
			}
		}
		
		give_player_sec_wpn(id, iSecondaryWpnId)
		ClearPlayerBit(bFirstBuy_Secondary, id)
		set_inventory_secondary(id, iCurrentInventoryId, 2, iSecondaryWpnId)
	}
}

public clcmd_PurchaseMelee(id, iLevel, iCid)
{	
	if (!CheckPlayerBit(bFirstBuy_Melee, id))
		return
		
	if (!can_player_buy_weapon(id, iLevel, iCid))
		return
		
		
	set_max_money(id)
	
	new szWeaponType[3], szWeaponModel[128]
	
	read_argv(1, szWeaponType, sizeof szWeaponType - 1)
	read_argv(2, szWeaponModel, sizeof szWeaponModel - 1)
	
	new iCurrentInventoryId = get_user_current_slot(id)
	
	if (equal(szWeaponType, "2"))
	{
		new iMeleeId = find_melee_by_model(szWeaponModel)
		
		if (!is_valid_melee(iMeleeId))
			return
		
	
		new iCost = get_melee_cost(iMeleeId)
		
		switch (get_melee_cost_type(iMeleeId))
		{
			case 2:
			{
				new iCoin = TFM_get_user_coin(id)
				if (iCoin < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_COIN)
					return
				}
					
				iCoin -= iCost
				TFM_set_user_coin(id, iCoin)
			}
			default:
			{
				new iGp = TFM_get_user_gp(id)
				if (iGp < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_GP)
					return
				}
					
				iGp -= iCost
				TFM_set_user_gp(id, iGp)
			}
		}
		
		give_user_melee(id, iMeleeId)
		ClearPlayerBit(bFirstBuy_Melee, id)
		set_inventory_melee(id, iCurrentInventoryId, 1, iMeleeId)
	}
	else if (equal(szWeaponType, "3"))
	{
		new iMeleeId = find_melee_by_serial(szWeaponModel)
		
		if (!is_valid_melee(iMeleeId))
			return
			
		new iCost = get_melee_cost(iMeleeId)
		
		switch (get_melee_cost_type(iMeleeId))
		{
			case 2:
			{
				new iCoin = TFM_get_user_coin(id)
				if (iCoin < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_COIN)
					return
				}
					
				iCoin -= iCost
				TFM_set_user_coin(id, iCoin)
			}
			default:
			{
				new iGp = TFM_get_user_gp(id)
				if (iGp < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_GP)
					return
				}
					
				iGp -= iCost
				TFM_set_user_gp(id, iGp)
			}
		}
		
		give_user_melee(id, iMeleeId)
		ClearPlayerBit(bFirstBuy_Melee, id)
		set_inventory_melee(id, iCurrentInventoryId, 2, iMeleeId)
	}
}

public clcmd_PurchaseGrenade(id, iLevel, iCid)
{	
	if (!can_player_buy_weapon(id, iLevel, iCid))
		return
		
	if (!CheckPlayerBit(bFirstBuy_Grenade, id))
		return
		
		
	set_max_money(id)
	
	new szWeaponType[3], szWeaponModel[128]
	
	read_argv(1, szWeaponType, sizeof szWeaponType - 1)
	read_argv(2, szWeaponModel, sizeof szWeaponModel - 1)
	
	new iCurrentInventoryId = get_user_current_slot(id)
	
	if (equal(szWeaponType, "1"))
	{
		new iWeaponId = UT_WorldModelToWeaponId(szWeaponModel)
		
		if (!is_grenade(iWeaponId))
			return
			
		new iCost = UT_Get_CS_Cost(iWeaponId)
		
		
		switch (UT_Get_CS_CostType(iWeaponId))
		{
			case 2:
			{
				new iCoin = TFM_get_user_coin(id)
				if (iCoin < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_COIN)
					return
				}
					
				iCoin -= iCost
				TFM_set_user_coin(id, iCoin)
			}
			default:
			{
				new iGp = TFM_get_user_gp(id)
				if (iGp < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_GP)
					return
				}
					
				iGp -= iCost
				TFM_set_user_gp(id, iGp)
			}
		}
		
		UT_GiveUserWeapon(id, iWeaponId, 1)
		ClearPlayerBit(bFirstBuy_Grenade, id)
	}
	else if (equal(szWeaponType, "2"))
	{
		new iGrenadeId = find_grenade_by_model(szWeaponModel)
		
		if (!is_valid_grenade(iGrenadeId))
			return
			
		new iCost = get_grenade_cost(iGrenadeId)
		
		switch (get_grenade_cost_type(iGrenadeId))
		{
			case 2:
			{
				new iCoin = TFM_get_user_coin(id)
				if (iCoin < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_COIN)
					return
				}
					
				iCoin -= iCost
				TFM_set_user_coin(id, iCoin)
			}
			default:
			{
				new iGp = TFM_get_user_gp(id)
				if (iGp < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_GP)
					return
				}
					
				iGp -= iCost
				TFM_set_user_gp(id, iGp)
			}
		}
		
		give_user_grenade(id, iGrenadeId)
		ClearPlayerBit(bFirstBuy_Grenade, id)
		set_inventory_grenade(id, iCurrentInventoryId, 2, iGrenadeId)
	}
	else if (equal(szWeaponType, "3"))
	{
		new iGrenadeId = find_grenade_by_serial(szWeaponModel)
		
		if (!is_valid_grenade(iGrenadeId))
			return
		
		new iCost = get_grenade_cost(iGrenadeId)
		
		switch (get_grenade_cost_type(iGrenadeId))
		{
			case 2:
			{
				new iCoin = TFM_get_user_coin(id)
				if (iCoin < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_COIN)
					return
				}
					
				iCoin -= iCost
				TFM_set_user_coin(id, iCoin)
			}
			default:
			{
				new iGp = TFM_get_user_gp(id)
				if (iGp < iCost)
				{
					client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ENOUGH_GP)
					return
				}
					
				iGp -= iCost
				TFM_set_user_gp(id, iGp)
			}
		}
		
		give_user_grenade(id, iGrenadeId)
		ClearPlayerBit(bFirstBuy_Grenade, id)
		set_inventory_grenade(id, iCurrentInventoryId, 2, iGrenadeId)
	}
}


stock can_player_buy_weapon(id, iLevel, iCid, iCheckCommand = 1)
{
	if (!is_autologin_enabled())
		return 0
		
	if (is_user_bot(id))
		return 0
		
	if (!is_user_online(id))
	{
		client_print(id, print_center, "%L", LANG_SERVER, WARN_NOT_ONLINE)
		return 0
	}
		
	if (iCheckCommand)
	{
		if (!cmd_access(id, iLevel, iCid, 3))
			return 0
	}
	
	if (!is_user_alive(id))
		return 0
	
	if (!is_user_in_equip_zone(id))
	{
		client_print(id, print_center, "%L", LANG_SERVER, WARN_OUT_RANGE)
		return 0
	}
	
	if (get_gametime() > flEndBuyTime[id])
	{
		client_print(id, print_center, "%L", LANG_SERVER, WARN_PURCHASE_OVER)
		return 0
	}
	
	return 1
}

stock set_max_money(id)
{
	/*
	if (is_autologin_enabled())
	{
		if (TFM_get_user_gp(id) > MAX_GP)
			TFM_set_user_gp(id, MAX_GP)
		
		if (TFM_get_user_coin(id) > MAX_COIN)
			TFM_set_user_coin(id, MAX_COIN)
	}
	*/
}

stock set_default_weapon(id)
{
	if (is_user_bot(id))
		return
		
	if (!is_user_online(id))
		return
		
	for (new i = 0; i < get_max_inventory_slot(); i++)
	{
		set_inventory_primary(id, i, 0 , 0)
		set_inventory_secondary(id, i, 1, CSW_USP)
		set_inventory_melee(id, i, 1 , 0)
		set_inventory_grenade(id, i, 0 , 0)
	}
}

stock ShowPredefinedVgui(id, iVguiId)
{
	if (!is_user_connected(id) || is_user_bot(id))	
		return
	emessage_begin(MSG_ONE_UNRELIABLE, get_user_msgid("VGUIMenu"), _, id)
	new szName[32]
	get_user_name(id, szName, sizeof szName - 1)
	ewrite_byte(iVguiId)
	ewrite_short(19)
	ewrite_string(szName)
	ewrite_byte(0)
	ewrite_string("")
	emessage_end()
}

