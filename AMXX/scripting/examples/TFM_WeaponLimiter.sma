/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <TFM_WPN>

#include <GamePlay_Included/Tools.inc>


#define PLUGIN "Weapon Limiter"
#define VERSION "-[No Info]-"
#define AUTHOR "Nguyen Duy Linh"

#define MAX_WPN 64

new Trie:iPrimaryWpn, Trie:iSecondaryWpn, Trie:iMelee, Trie:iGrenade

new iFileExist = 0

public plugin_precache() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	if (!iPrimaryWpn)
		iPrimaryWpn = TrieCreate()
		
	if (!iSecondaryWpn)
		iSecondaryWpn = TrieCreate()
	
	if (!iMelee)
		iMelee = TrieCreate()
		
	if (iGrenade)
		iGrenade = TrieCreate()
		
	new szCfg[128], szFile[256]
	
	get_configsdir(szCfg, sizeof szCfg - 1)
	formatex(szFile, 255, "%s/TFM_ModelList.txt", szCfg)
	
	if (!file_exists(szFile))
		return
	
	iFileExist = 1
	
	for (new i = 0; i < file_size(szFile, 1); i++)
	{
		new szTextInfo[128], iTextLen
	
		read_file(szFile, i, szTextInfo, sizeof szTextInfo - 1, iTextLen)
			
		if (equal(szTextInfo, "[primary_ser]", 13))
		{
			replace(szTextInfo, sizeof szTextInfo - 1, "[primary_ser]", "")
			if (TrieKeyExists(iPrimaryWpn, szTextInfo))
				continue
					
			TrieSetCell(iPrimaryWpn, szTextInfo, 1)
		}
		else if (equal(szTextInfo, "[secondary_ser]", 15))
		{
			replace(szTextInfo, sizeof szTextInfo - 1, "[secondary_ser]", "")
			if (TrieKeyExists(iSecondaryWpn, szTextInfo))
				continue
				
			TrieSetCell(iSecondaryWpn, szTextInfo, 1)
			
		}
		else if (equal(szTextInfo, "[melee_ser]", 11))
		{
			replace(szTextInfo, sizeof szTextInfo - 1, "[melee_ser]", "")
			if (TrieKeyExists(iMelee, szTextInfo))
				continue
					
			TrieSetCell(iMelee, szTextInfo, 1)
		}
		else if (equal(szTextInfo, "[grenade_mdl]", 13))
		{
			replace(szTextInfo, sizeof szTextInfo - 1, "[grenade_mdl]", "")
			if (TrieKeyExists(iGrenade, szTextInfo))
				continue
					
			TrieSetCell(iGrenade, szTextInfo, 1)
		}
		
	}
	delete_file(szFile)
}

public PW_WeaponCheckSerial(szSerial[])
{
	if (TrieKeyExists(iPrimaryWpn, szSerial))
		return PLUGIN_CONTINUE
		
	if (!iFileExist)
		return PLUGIN_CONTINUE
		
	return PLUGIN_HANDLED
}

public SW_WeaponCheckSerial(szSerial[])
{		
	if (TrieKeyExists(iSecondaryWpn, szSerial))
		return PLUGIN_CONTINUE
	
	if (!iFileExist)
		return PLUGIN_CONTINUE
		
	return PLUGIN_HANDLED
}

public MM_MeleeCheckSerial(szSerial[])
{
	
	new iGamePlay
	new iWeaponMode, iFightYard
	
	iGamePlay = is_deathmatch_on(iWeaponMode, iFightYard)
	
	if (iGamePlay)
	{
		if (iWeaponMode == CS_WM_KNIFE)
			return PLUGIN_CONTINUE		
	}
	
	iGamePlay = is_tdm_on(iWeaponMode)
	
	if (iGamePlay)
	{
		
		if (iWeaponMode == CS_WM_KNIFE)
			return PLUGIN_CONTINUE
	
	}
	
	iGamePlay = is_ffa_on(iWeaponMode)
	
	if (iGamePlay)
	{	
		if (iWeaponMode == CS_WM_KNIFE)
			return PLUGIN_CONTINUE
			
	}
		
	if (TrieKeyExists(iMelee, szSerial))
		return PLUGIN_CONTINUE
	
	if (!iFileExist)
		return PLUGIN_CONTINUE
		
	return PLUGIN_HANDLED
}

public GM_CheckWeaponSerial(szSerial[])
{		
		
	if (TrieKeyExists(iGrenade, szSerial))
		return PLUGIN_CONTINUE
	
	if (!iFileExist)
		return PLUGIN_CONTINUE
		
	return PLUGIN_HANDLED
}

public PW_WeaponLoadData()
{
	new iGamePlay, iWeaponMode, iFightYard
	
	iGamePlay = is_deathmatch_on(iWeaponMode, iFightYard)
	
	if (iGamePlay)
	{
		
		if (iGamePlay == CS_DM_FY)
			return
		else
		{
			if (iWeaponMode == CS_WM_KNIFE)
				set_pw_load_type(TYPE_NONE)
			else if (iWeaponMode == CS_WM_PISTOL)
				set_pw_load_type(TYPE_PISTOL)
			else if (iWeaponMode == CS_WM_SNIPER)
				set_pw_load_type(TYPE_SNIPER)
		}
		return
	}
	
	iGamePlay = is_tdm_on(iWeaponMode)
	
	if (iGamePlay)
	{
			
		if (iWeaponMode == CS_WM_PISTOL)
			set_pw_load_type(TYPE_PISTOL)
		else if (iWeaponMode == CS_WM_KNIFE)
			set_pw_load_type(TYPE_NONE)
		else if (iWeaponMode == CS_WM_SNIPER)
			set_pw_load_type(TYPE_SNIPER)
				
			
			
		return
	}
	
	iGamePlay = is_ffa_on(iWeaponMode)
	
	if (iGamePlay)
	{
		if (iGamePlay != FFA_MODE_NORMAL)
			return
		
		if (iWeaponMode == CS_WM_PISTOL)
			set_pw_load_type(TYPE_PISTOL)
		else if (iWeaponMode == CS_WM_KNIFE)
			set_pw_load_type(TYPE_NONE)
		else if (iWeaponMode == CS_WM_SNIPER)
			set_pw_load_type(TYPE_SNIPER)
		return
	}
	
	iGamePlay = is_gungame_on()
	
	if (iGamePlay)
	{
		//set_pw_load_type(TYPE_NONE)
		return
	}
}

public SW_WeaponLoadData()
{
	new iGamePlay, iWeaponMode, iFightYard
	
	iGamePlay = is_deathmatch_on(iWeaponMode, iFightYard)
	
	if (iGamePlay)
	{
		if (iGamePlay == CS_DM_FY)
			return
		else
		{
			if (iWeaponMode == CS_WM_KNIFE)
				set_sec_wpn_load_type(TYPE_NONE)
			else if (iWeaponMode == CS_WM_PISTOL)
				set_sec_wpn_load_type(TYPE_PISTOL)
			else if (iWeaponMode == CS_WM_SNIPER)
				set_sec_wpn_load_type(TYPE_SNIPER)
		}
		return
	}
	
	iGamePlay = is_tdm_on(iWeaponMode)
	
	if (iGamePlay)
	{
		
		if (iWeaponMode == CS_WM_KNIFE)
			set_sec_wpn_load_type(TYPE_NONE)
		else if (iWeaponMode == CS_WM_PISTOL)
			set_sec_wpn_load_type(TYPE_PISTOL)
		else if (iWeaponMode == CS_WM_SNIPER)
			set_sec_wpn_load_type(TYPE_SNIPER)
		return
	}
	
	iGamePlay = is_ffa_on(iWeaponMode)
	if (iGamePlay)
	{
			
		if (iWeaponMode == CS_WM_KNIFE)
			set_sec_wpn_load_type(TYPE_NONE)
		else if (iGamePlay == CS_WM_PISTOL)
			set_sec_wpn_load_type(TYPE_PISTOL)
		else if (iGamePlay == CS_WM_SNIPER)
			set_sec_wpn_load_type(TYPE_SNIPER)
		return
	}	
	
	iGamePlay = is_gungame_on()
	
	if (iGamePlay)
	{
		return
	}
}

public GM_WeaponLoadData()
{
	new iGamePlay, iWeaponMode, iFightType
	iGamePlay = is_deathmatch_on(iWeaponMode, iFightType)
	
	if (iGamePlay)
	{
		if (iGamePlay == CS_DM_FY)
			return
		else
		{
			if (iWeaponMode != CS_WM_NORMAL)
				set_grenade_load(GRE_LOAD_NONE)
		}
		return
	}
	iGamePlay = is_tdm_on(iWeaponMode)
	if (iGamePlay)
	{
			
		if (iWeaponMode != CS_WM_NORMAL)
			set_grenade_load(GRE_LOAD_NONE)
		return
	}
	
	iGamePlay = is_ffa_on(iWeaponMode)
	if (iGamePlay)
	{
			
		if (iWeaponMode != CS_WM_NORMAL)
			set_grenade_load(GRE_LOAD_NONE)
		return
	}
	
	iGamePlay = is_gungame_on()
	
	if (iGamePlay)
	{
		set_grenade_load(GRE_LOAD_NONE)
		return
	}
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
