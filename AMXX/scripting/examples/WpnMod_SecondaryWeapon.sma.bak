/* Plugin generated by AMXX-Studio
[SPECIAL MODE]
1 - ZOOM
2 - LASER
3 - IRON SIGHT TYPE 1
4 - IRON SIGHT TYPE 2
5 - Semi / Automatic Mode


[SPECIAL]
1 - Automatic weapon
2 - Grenade Launcher
3 - Reactive Zoom
*/

enum ( <<= 1 )
{
	FIRE_MINIGUN = 1, // a
	FIRE_DRAW_SPIN_ANIM, // b
	FIRE_DRAW_AFTER_SPIN_ANIM, // c 
	FIRE_ON_RELEASE // d
}

enum ( <<= 1)
{
	ST_NO_CROSSHAIR = 1, // a
	ST_DUAL_WEAPON, // b
	ST_ADDITION_BULLET, // c
	ST_ACTIVE_DEFAULT_FUNC, // d
	ST_NO_MANUAL_RELOAD, // e
	ST_HL_CROSSHAIR, // f
	ST_NEW_RELOAD, // g
	ST_ZOOM_SUPPORTED // h
}



enum
{
	SPECIAL_NONE,
	SPECIAL_REACTIVE_ZOOM
}

enum
{
	EQ_PLAYER_ONLY,
	EQ_VIP_ONLY,
	EQ_VIP_N_PLAYER
}

#include <amxmodx>
#include <amxmisc>
#include <cstrike>
#include <fakemeta_util>
#include <hamsandwich>
#include <xs>
#include <engine>

#include <weaponbox_info>
#include <ArmouryManager>
#include <cswpn_ultilities>
#include <player_api>
#include <celltrie>

#include <mmcl_util>

#include <WpnMod_Included/LineInfo_SecondaryWpn.inc>
#include <WpnMod_Included/WM_GlobalConstant.inc>
#include <WpnMod_Included/WM_COMMAND.inc>

#include <WpnMod_Included/WM_BackWeapon.inc>

/***********************************************************/

#define PLUGIN "[WPN MOD] Secondary Weapon"
#define VERSION "-[No Info]-"
#define AUTHOR "Nguyen Duy Linh"

/***********************************************************/

#define max_wpn 32

#define MAX_SPAWN_POINT 32

#define TASK_REG_CZ_FUNCTION 255113
#define TASK_FAMAS_BURST	15000
#define TASK_OPEN_FIRE	20000

#define BURST_CYCLE	0.1
#define SECONDARY_WEAPONS_BITSUM ((1<<CSW_USP)|(1<<CSW_GLOCK18)|(1<<CSW_DEAGLE)|(1<<CSW_P228)|(1<<CSW_ELITE)|(1<<CSW_FIVESEVEN))
#define HIT_SHIELD 8


#define XTRA_OFS_WEAPON			4

new iADS_State = ADS_OPTION


/*				TRIE SECTION				*/

new Trie:iLoadedINIList
new Trie:iPrecachedModel
new Trie:iPlayerInfo[max_wpn]
new Trie:iWeaponBoxInfo

new Trie:weapon_StringInfo[max_wpn]



//	String

#define SECTION_NAME "PISTOL_NAME"
#define SECTION_HUD_KILL "HUD_KILL"
#define SECTION_SPEC_HUD_KILL "SPEC_HUD_KILL"

#define SECTION_V_MODEL "VIEW_MODEL"
#define SECTION_W_MODEL "WORLD_MODEL"
#define SECTION_P_MODEL "PLAYER_MODEL"
#define SECTION_SPEC_V_MODEL "SPECIAL_V_MODEL"


#define SECTION_SPAWN_FILE "SPAWN_FILE"
#define SECTION_WEAPON_CLASS	"WEAPON_CLASS"
#define SECTION_WEAPON_ORIGINAL	"WEAPON_ORIGINAL_HUDKILL"
#define SECTION_V_SHIELD_MODEL	"WEAPON_V_SHIELD_MODEL"
#define SECTION_P_SHIELD_MODEL	"WEAPON_P_SHIELD_MODEL"
#define SECTION_WEAPON_SERIAL 	"WEAPON_SERIAL"
#define SECTION_BACKWPN_MODEL "BACKWPN_MODEL"

/************************************************************************/

// Integer

#define SECTION_WEAPON_ID_1	"WEAPON_ID_1"
#define SECTION_WEAPON_ID_2	"WEAPON_ID_2"
#define SECTION_WEAPON_CLIP	"WEAPON_CLIP"
#define SECTION_WEAPON_BPA	"WEAPON_BPA"

#define SECTION_WEAPON_SPEC	"WEAPON_SPEC"
#define SECTION_WEAPON_FUNC	"WEAPON_FUNC"
#define SECTION_WEAPON_TYPE	"WEAPON_TYPE"
#define SECTION_WEAPON_COST	"WEAPON_COST"
#define SECTION_WEAPON_COST_TYPE	"WEAPON_COST_TYPE"
#define SECTION_WEAPON_AMMO_COST	"WEAPON_AMMO_COST"
#define SECTION_WEAPON_AMMO_COST_TYPE	"WEAPON_AMMO_COST_TYPE"
#define SECTION_WEAPON_LEVEL	"WEAPON_LEVEL"
#define SECTION_P_MODEL_SUB	"P_MODEL_SUB"
#define SECTION_V_MODEL_SUB 	"V_MODEL_SUB"

#define SECTION_KNOCKBACK_DISTANCE	"KNOCKBACK_DISTANCE"
#define SECTION_KNOCKBACK_POWER		"KNOCKBACK_POWER"

#define SECTION_WEAPON_EQUIP_TYPE	"EQUIP_TYPE"

#define SECTION_SHOTGUN_SHOTS "SHOTGUN_SHOTS"

#define SECTION_WEAPON_SOUND_ID	"WEAPON_SOUND_ID"
#define SECTION_WEAPON_SOUND_ID_SILENT	"WEAPON_SOUND_ID_SILENT"
#define SECTION_WEAPON_SOUND_ID_BURST	"WEAPON_SOUND_ID_BURST"

#define SECTION_WORLD_MODEL_SUB	"WORLD_MODEL_SUB"
#define SECTION_BULLET_TYPE	"BULLET_TYPE"

#define SECTION_WEAPON_FIREMODE	"WEAPON_FIREMODE"
#define SECTION_ORIGINAL_FIREMODE	"ORIGINAL_FIREMODE"

#define SECTION_BURST_BULLET	"BURST_BULLET"

#define SECTION_FIRST_FOV	"FIRST_FOV"
#define SECTION_SECOND_FOV	"SECOND_FOV"

#define SECTION_BASIC_SETTING	"BASIC_SETTING"
#define SECTION_ADS_CONFIG	"ADS_CONFIG"
#define SECTION_ADS_ROF	"ADS_ROF"
#define SECTION_ADS_RECOIL	"ADS_RECOIL"
// Float

#define SECTION_WEAPON_DELAY	"WEAPON_DELAY"
#define SECTION_WEAPON_RECOIL	"WEAPON_RECOIL"
#define SECTION_WEAPON_DAMAGE	"WEAPON_DAMAGE"
#define SECTION_WEAPON_ACCURACY	"WEAPON_ACCURACY"
#define SECTION_WEAPON_WEIGHT	"WEAPON_WEIGHT"
#define SECTION_SPEED_REDUCTION	"SPEED_REDUCTION"
#define SECTION_RELOAD_TIME	"RELOAD_TIME"
#define SECTION_INSERT_TIME	"INSERT_TIME"
#define SECTION_AFTER_INSERT_TIME	"AFTER_INSERT_TIME"
#define SECTION_DEPLOY_TIME	"DEPLOY_TIME"

#define SECTION_SHOTGUN_SPREAD	"SHOTGUN_SPREAD"

#define SECTION_ADS_START_TIME	"ADS_START_TIME"
#define SECTION_ADS_END_TIME	"ADS_END_TIME"

#define SECTION_TIME_FM_CHANGE	"TIME_FM_CHANGE"
#define SECTION_TIME_FM_DELAY	"TIME_FM_DELAY"

#define SECTION_SPIN_TIME	"SPIN_TIME"
#define SECTION_DEACTIVE_SPIN	"DEACTIVE_SPIN"
#define SECTION_WPN_FIRE_FLAG "FIRE_FLAG"

//	PLAYER SECTION
#define SECTION_USER_WEAPON_ID	"USER_WEAPON_ID"
#define SECTION_ATTACK_STAGE	"ATTACK_STAGE"
#define SECTION_USER_ZOOM_LVL	"USER_ZOOM_LVL"
/************************************************************************/


#define PREFIX_SLOT_FLAG	"SLOT_FLAG"
#define PREFIX_SLOT_AMMO	"SLOT_AMMO"
#define PREFIX_SLOT_BPA		"SLOT_BPA"
/************************************************************************/


  
new Float:cl_pushangle[33][3]
  

enum
{
	BULLET_TYPE_NONE,
	BULLET_TYPE_SHIELD_DESTRUCTION,
	BULLET_TYPE_SHOTGUN
}



stock is_ads_weapon(iWeaponId)
{
	if (!iADS_State)	
		return 0
		
	#define ADS_WPN_BITSUM (1<<0) //((1<<CSW_USP)|(1<<CSW_GLOCK18)|(1<<CSW_DEAGLE)|(1<<CSW_FIVESEVEN)|(1<<CSW_P228))
	return (ADS_WPN_BITSUM & (1<<iWeaponId))
}

#define TYPE_FULL	1000


new g_weapon_count = 0

// new menuid

new iWeaponSpawnMenuIndex


new g_trailSpr


new iLaserSprIndex
new iHamCZ

new g_LoadType

enum
{
	FUNC_OFF,
	FUNC_ON
}
#define pev_InSpecialMode pev_fuser1

#define MAX_CLASS 64
enum
{
	DAMAGE_ENTITY,
	DAMAGE_HOSTAGE,
	DAMAGE_PLAYER
}

new iTotalSpawnPoint
new Float:fSpawnVecs[MAX_SPAWN_POINT][3]
new iSpawnWeaponId[MAX_SPAWN_POINT]


//	BIT FIELD
new g_bAutomaticMode // Check if player has activated Automatic mode of weapon
new g_bUsingZoomFunc	// Check if player has activated Zoom Function
new b_CancelReloading
new bit_NormalIronSight
new bit_LaserSightOn
new bit_ExtraBulletInChamber
//	WEAPON SETTING BIT FIELD
new g_AutomaticMode
new g_SpecialBurstMode
new g_SpecialBurstFamas

//	BIT TOOLS

#define SetPlayerBit(%1,%2)      (%1 |= (1<<(%2&31)))
#define ClearPlayerBit(%1,%2)    (%1 &= ~(1 <<(%2&31)))
#define CheckPlayerBit(%1,%2)    (%1 & (1<<(%2&31)))


#define SetBit(%1,%2)      (%1[%2>>5] |= (1<<(%2 & 31)))
#define ClearBit(%1,%2)    (%1[%2>>5] &= ~(1<<(%2 & 31)))
#define CheckBit(%1,%2)    (%1[%2>>5] & (1<<(%2 & 31)))  

#define SHOTGUN_BULLET 9
#define SHOTGUN_PROPERTY_DIS 850.0


#define fm_get_entity_visibility(%1) (!(pev(%1, pev_effects) & EF_NODRAW))

#define SOUND_CHANNEL	CHAN_STATIC
#define clamp_byte(%1)     ( clamp( %1, 0, 255 ) ) 
#define write_coord_f(%1)  ( engfunc( EngFunc_WriteCoord, %1 ) )



#define OFFSET_SILENCER_FIREMODE	74
#define EXTRAOFFSET_WEAPONS		4
#define GLOCK18_SEMIAUTOMATIC		0
#define GLOCK18_BURST			2

#define FAMAS_AUTOMATIC			0
#define FAMAS_BURST			16

const m_fKnown				= 44

#define TASK_CROSSHAIR_TOGGLE 2000
#define TASK_IRONSIGHT 3000
#define TASK_PREPARE_INSERT	5000
#define TASK_INSERT_AMMO	7000
#define TASK_FINISH_INSERTING	9000
#define TASK_NORMAL_IRONSIGHT	11000


new const ANIM_RELOAD_SHIELD[] = 
{
	-1,	// ---
	4,	// P228
	-1,	// ---
	0,	// SCOUT
	-1,	// ---
	0,	// XM1014
	-1,	// ---
	0,	// MAC10
	0,	// AUG
	-1,	// ---
	0,	// ELITE
	4,	// FIVESEVEN
	0,	// UMP45
	0,	// SG550
	0,	// GALIL
	0,	// FAMAS
	4,	// USP
	4,	// GLOCK18
	0,	// AWP
	0,	// MP5NAVY
	0,	// M249
	0,	// M3
	0,	// M4A1
	0,	// TMP
	0,	// G3SG1
	-1,	// ---
	4,	// DEAGLE
	0,	// SG552
	0,	// AK47
	-1,	// ---
	0	// P90
}


#define ANIM_START_IRONSIGHT	1
#define ANIM_END_IRONSIGHT	3

#define ANIM_INSERT_BULLET	5
#define ANIM_AFTER_INSERT_BULLET	7

#define ANIM_IRONSIGHT_IDLE_3	9
#define ANIM_IRONSIGHT_SHOOT_3	11

#define ANIM_SPIN_PRE	13
#define ANIM_SPIN_POST	15

#define INFINITIVE_RELOAD_TIME	99999.0

enum ( <<= 1)
{
	FUNC_ADS = 1, // a
	FUNC_LASER_SIGHT //b
}

enum ( <<= 1)
{
	ADS_NO_CS_CROSSHAIR = 1, //a
	ADS_NO_HL_CROSSHAIR, // b
	ADS_NO_INTRO_ANIM, // c
	ADS_NO_OUT_ANIM, // d
	ADS_ADDITION_VIEWMODEL, // e
	ADS_NEW_ROF, // f
	ADS_NEW_RECOIL
}

enum (<<= 1)
{ 
	BFUNC_AUTO_ON = 1,
	BFUNC_BURST_ON,
	BFUNC_FBURST_ON
}

new iDecal

enum
{
	FIRE_DEFAULT,
	FIRE_SEMI_AUTO,
	FIRE_SEMI_BURST,
	FIRE_SEMI_FAMAS,
	FIRE_SEMI_AUTO_BURST,
	FIRE_SEMI_AUTO_BURST_FAMAS
}

enum
{
	FIRE_DEFAULT = 0,
	FIRE_AUTO,
	FIRE_BURST,
	FIRE_BURST_FAMAS
}



//	FORWARDS SECTION
new ifw_Result

new ifw_StartLoadData
new ifw_ArmouryPickUp
new ifw_CheckSecWpnSerial
new ifw_FuncActivated

new ifw_UserCanTouchWpnBox
new ifw_UserCanTouchArmoury
new ifw_UserCanEquipWpn
new ifw_ArmourySpawn
new ifw_WeaponLoaded

#define WPN_CONFIG_DIR	"WPN_MOD/SECONDARY_WPN/CONFIGS"
#define WPN_SPAWN_DIR	"WPN_MOD/SECONDARY_WPN/SPAWN"
#define WPN_SPEC_DIR	"WPN_MOD/SECONDARY_WPN/SPEC"
#define WPN_ADD_DIR	"WPN_MOD/SECONDARY_WPN/ADD"
#define WPN_MANAGER_DIR	"WPN_MOD/SECONDARY_WPN"
#define	WPN_MANAGER_FILE	"MANAGER.CFG"

new Float:fAttackTime[33]

enum
{
	STAGE_NONE,
	STAGE_SPIN,
	STAGE_FIRE,
	STAGE_FIRE_RELEASE
}

public plugin_natives()
{
	register_native("give_player_sec_wpn", "nt_give_player_sec_wpn", 1)
	register_native("set_player_sec_wpn", "nt_set_player_sec_wpn", 1)
	register_native("get_sec_wpn_hud", "nt_get_sec_wpn_hud", 1)
	register_native("get_user_sec_wpn", "nt_get_user_sec_wpn", 1)
	register_native("get_sec_wpn_real_id", "nt_get_sec_wpn_real_id", 1)
	register_native("get_sec_wpn_real_id_2", "nt_get_sec_wpn_real_id_2", 1)
	register_native("get_sec_wpn_name", "nt_get_sec_wpn_name", 1)
	register_native("get_sec_wpn_number", "nt_get_sec_wpn_number", 1)
	register_native("find_sec_wpn_by_model", "nt_find_sec_wpn_by_model", 1)
	register_native("get_sec_wpn_cost", "nt_get_sec_wpn_cost", 1)
	register_native("get_sec_wpn_cost_type", "nt_get_wpn_cost_type", 1)
	register_native("get_sec_wpn_speed", "nt_get_sec_wpn_speed", 1)
	register_native("get_sec_wpn_weight", "nt_get_sec_wpn_weight", 1)
	register_native("get_sec_wpn_clip", "nt_get_sec_wpn_clip", 1)
	register_native("get_sec_wpn_bpa", "nt_get_sec_wpn_bpa", 1)
	register_native("set_sec_wpn_load_type", "nt_set_sec_wpn_load_type", 1)
	register_native("get_sec_wpn_type", "nt_get_sec_wpn_type", 1)
	register_native("set_sec_wpn_spawn", "nt_set_sec_wpn_spawn", 1)
	register_native("get_sec_wpn_equip_type", "nt_get_sec_wpn_equip_type", 1)
	register_native("get_sec_wpn_special", "nt_get_sec_wpn_special", 1)
	register_native("get_sec_wpn_func", "nt_get_sec_wpn_func", 1)
	register_native("set_sec_wpn_load_file", "nt_set_sec_wpn_load_file", 1)
	register_native("get_sec_wpn_kb_power", "nt_get_sec_wpn_kb_power", 1)
	register_native("get_sec_wpn_kb_distance", "nt_get_sec_wpn_kb_distance", 1)
	register_native("get_sec_wpn_back_sub", "nt_get_sec_wpn_back_sub", 1)
	register_native("get_sec_wpn_back_model", "nt_get_sec_wpn_back_model", 1)
	register_native("sw_is_user_ads", "nt_sw_is_user_ads", 1)
	register_native("find_sec_wpn_by_serial", "nt_find_sec_wpn_by_serial", 1)
}

public nt_give_player_sec_wpn(id, iSecondaryWpnId)
{
	
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
	{
		delete_trie_key(iPlayerInfo[id], SECTION_USER_WEAPON_ID)
		return 0
	}
	
	new iVip = cs_get_user_vip(id)
	
	new iEquipType
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_EQUIP_TYPE, iEquipType)
	
	if (iVip)
	{
		if (iEquipType != EQ_VIP_ONLY && iEquipType != EQ_VIP_N_PLAYER)
			return 0
	}
	else
	{
		if (iEquipType != EQ_PLAYER_ONLY && iEquipType != EQ_VIP_N_PLAYER)
			return 0
	}
	
	if (!can_player_equip_sec_wpn(id))
		return 0
	
	new iWeaponId = nt_get_sec_wpn_real_id(iSecondaryWpnId)
	
	if (iVip && iWeaponId == CSW_ELITE)
		cs_set_user_vip(id, 0, 0, 0)
	
	new szWeaponEntity[32]
	UT_DropSecondaryWeapon(id)
	engclient_cmd(id, "drop", "weapon_shield")
	
	ClearPlayerBit(g_AutomaticMode, id);
	ClearPlayerBit(g_SpecialBurstMode, id);
	ClearPlayerBit(g_SpecialBurstFamas, id);
	
	nt_set_player_sec_wpn(id, iSecondaryWpnId)
	
	get_weaponname(iWeaponId, szWeaponEntity, sizeof szWeaponEntity -1)
	
	
	new iEnt = fm_give_item(id, szWeaponEntity)
	
	if (iEnt < 0 || !pev_valid(iEnt))
		return 0
		
	new iOriginalFireMode
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_ORIGINAL_FIREMODE, iOriginalFireMode)
	
	if (iOriginalFireMode == FIRE_AUTO)
		SetPlayerBit(g_AutomaticMode, id)
	else if (iOriginalFireMode == FIRE_BURST)
		SetPlayerBit(g_SpecialBurstMode, id)
	else if (iOriginalFireMode == FIRE_BURST_FAMAS)
		SetPlayerBit(g_SpecialBurstFamas, id)
		
	set_weapon_ability(iEnt, iSecondaryWpnId)
			
	engclient_cmd(id, szWeaponEntity)
	
	cs_set_weapon_ammo(iEnt, nt_get_sec_wpn_clip(iSecondaryWpnId))
	
	UT_SetUserBPA(id, iWeaponId, nt_get_sec_wpn_bpa(iSecondaryWpnId))
	
	ExecuteHamB(Ham_Item_Deploy, iEnt)
	
	if (iVip && iWeaponId == CSW_ELITE)
	{
		iVip = 0
		cs_set_user_vip(id)
	}
	
	return 1
}

public nt_set_player_sec_wpn(id, iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
	{
		delete_trie_key(iPlayerInfo[id], SECTION_USER_WEAPON_ID)
		return 0
	}
	
	set_trie_int(iPlayerInfo[id], SECTION_USER_WEAPON_ID, iSecondaryWpnId)
	return 1
}

public nt_get_sec_wpn_hud(iSecondaryWpnId, szHud[], iLen)
{
	param_convert(2)
	
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return
	
	TrieGetString(weapon_StringInfo[iSecondaryWpnId], SECTION_HUD_KILL, szHud, iLen)
	
}


public nt_get_user_sec_wpn(id)
	return get_trie_int(iPlayerInfo[id], SECTION_USER_WEAPON_ID, -1)
	
public nt_get_sec_wpn_real_id(iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return -1
	
	new iWeaponId
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_ID_1, iWeaponId)
	
	return iWeaponId
}

public nt_get_sec_wpn_real_id_2(iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return -1
	
	new iWeaponId
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_ID_2, iWeaponId)
	
	return iWeaponId
}

public nt_get_sec_wpn_name(iSecondaryWpnId, szName[], iLen)
{
	param_convert(2)
	
	if (iSecondaryWpnId > g_weapon_count - 1 || iSecondaryWpnId < 0)
		return
	
	TrieGetString(weapon_StringInfo[iSecondaryWpnId], SECTION_NAME, szName, iLen)
		
}

public nt_get_sec_wpn_number()
	return g_weapon_count

public nt_find_sec_wpn_by_model(szModel[])
{
	param_convert(1)
	return _find_sec_wpn_by_model(szModel)
}	

public nt_get_sec_wpn_cost(iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return 0
		
	new iWeaponCost 
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_COST, iWeaponCost)
	return iWeaponCost 
}

public nt_get_wpn_cost_type(iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count -1)
		return -1
		
	new iWeaponCostType
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_COST_TYPE, iWeaponCostType)
	return iWeaponCostType
}


public Float:nt_get_sec_wpn_speed(iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return 0.0
		
	new Float:fSpeedReduction
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_SPEED_REDUCTION, fSpeedReduction)
	return fSpeedReduction
}

public Float:nt_get_sec_wpn_weight(iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return 0.0
		
	new Float:fWeaponWeight
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_WEIGHT, fWeaponWeight)
	return fWeaponWeight
}

public nt_get_sec_wpn_clip(iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
			return 0
			
	new iClip 
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_CLIP, iClip)
	return iClip
}

public nt_get_sec_wpn_bpa(iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return 0
		
	new iBpa 
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_BPA, iBpa)
	return iBpa
}

public nt_set_sec_wpn_load_type(iLoadingType)
	g_LoadType = iLoadingType

public nt_set_sec_wpn_spawn(iPoint, iSecondaryWpnId, Float:fOrigin[3])
	CreateArmoury(iPoint, iSecondaryWpnId, fOrigin)
	
public nt_get_sec_wpn_equip_type(iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > max_wpn - 1)
		return 0
		
	new iEquipType
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_EQUIP_TYPE, iEquipType)
	return iEquipType
}

public nt_get_sec_wpn_type(iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return 0
		
	new iWeaponType 
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_TYPE, iWeaponType)
	return iWeaponType
}

public nt_get_sec_wpn_special(iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return 0
		
	new iSpecialFunc
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_SPEC, iSpecialFunc)
	return iSpecialFunc
}

public nt_get_sec_wpn_func(iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return 0
		
	new iWpnFunc 
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_FUNC, iWpnFunc)
	return iWpnFunc
}

public nt_set_sec_wpn_load_file(szFile[], szExtension[], iIgnoreCondition)
{
	param_convert(1)
	param_convert(2)
	
	
	load_secondary_wpn_file(WPN_CONFIG_DIR, szFile, szExtension, iIgnoreCondition) 
}

public Float:nt_get_sec_wpn_kb_power(iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return 0.0
		
	new Float:fKnockBackPower
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_KNOCKBACK_POWER, fKnockBackPower)
	return fKnockBackPower
	
}

public nt_get_sec_wpn_kb_distance(iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return 0
			
	new iKnockBackDistance
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_KNOCKBACK_DISTANCE, iKnockBackDistance)
	return iKnockBackDistance
}

public nt_get_sec_wpn_back_sub(iSecondaryWpnId)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return -1
	
	new iSubBody 
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BACKWPN_MODEL, iSubBody)
	return iSubBody
}

public nt_get_sec_wpn_back_model(iSecondaryWpnId, szModel[], iLen)
{
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return
	
	param_convert(2)
	TrieGetString(weapon_StringInfo[iSecondaryWpnId], SECTION_BACKWPN_MODEL, szModel, iLen)
}

public nt_sw_is_user_ads(id)
{
	if (!iADS_State)
		return 0
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId < 0)
	{
		if (CheckPlayerBit(bit_NormalIronSight, id))
			return 1
		return 0
	}
	
	if (CheckPlayerBit(g_bUsingZoomFunc, id))
	{
		new iWpnFunc = nt_get_sec_wpn_func(iSecondaryWpnId)
		
		return (iWpnFunc & FUNC_ADS)
	}
	return 0				
}

public nt_find_sec_wpn_by_serial(szSerial[])
{
	param_convert(1)
	
	for (new i = 0; i < g_weapon_count; i++)
	{
		new szRealSerial[128]
		TrieGetString(weapon_StringInfo[i], SECTION_WEAPON_SERIAL, szRealSerial, sizeof szRealSerial - 1)
		
		if (equal(szSerial, szRealSerial))
			return i
	}
	return - 1
}


public plugin_precache()
	register_forward(FM_SetModel, "fw_SetModel_Pos", 1)


public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_dictionary("TFM_Dictionary.txt")
	
	for (new i = 0; i < max_wpn; i++)
	{
		if (weapon_StringInfo[i])
			continue
			
		weapon_StringInfo[i] = TrieCreate()
	}
	
	if (!iPrecachedModel)
		iPrecachedModel = TrieCreate()
	
	if (!iWeaponBoxInfo)
		iWeaponBoxInfo = TrieCreate()
		
	iDecal = engfunc(EngFunc_DecalIndex, "{shot2")	
	
	iLoadedINIList = TrieCreate()
	
	
	forward_section()
	
	register_concmd(SEC_ARMOURY_CMD, "concmd_OpenArmouryMenu", ADMIN_ALL)
	
	register_clcmd(LASER_COMMAND, "fw_LaserToggle")
	register_clcmd(SELECTIVE_FIRE_COMMAND, "fw_SelectiveFireToggle")
	
	
	
	register_logevent("round_begin" , 2 , "1=Round_Start")
	
	register_forward(FM_CmdStart, "fw_CmdStart")
	register_forward(FM_UpdateClientData, "fw_UpdateClientData_Post", 1)
	
	register_touch("weaponbox", "player", "fw_WpnBoxTouch")
	register_touch("armoury_entity", "player", "fw_ArmouryTouch")
	
	register_message(get_user_msgid("DeathMsg"), "MSG_DeathMsg")
	register_message(get_user_msgid("WeapPickUp"), "MSG_WeapPickUp")
	
	register_forward(FM_TraceLine, "fw_OnTraceLine")
	
	RegisterHam(Ham_TakeDamage, "player", "fw_TakeDamage")
	RegisterHam(Ham_TakeDamage, "hostage_entity", "fw_TakeDamage")
	RegisterHam(Ham_TakeDamage, "monster_scientist", "fw_TakeDamage")
	RegisterHam(Ham_TakeDamage, "func_breakable", "fw_TakeDamage")
	RegisterHam(Ham_TakeDamage, "func_pushable", "fw_TakeDamage")
	
	g_LoadType = TYPE_FULL
	
	new szCfgDir[128]
	new szMapName[32]
	
	get_configsdir(szCfgDir, sizeof szCfgDir - 1)
	get_mapname(szMapName, sizeof szMapName - 1)
	
	
	new szMenuTitle[128]
	formatex(szMenuTitle, sizeof szMenuTitle - 1, "%L", 0, "PISTOL_SPAWN_MENU_TITLE")
	iWeaponSpawnMenuIndex = menu_create(szMenuTitle, "fw_ArmouryMenuSelected", -1)
	
	
	new szManagerFile[256]
	formatex(szManagerFile, sizeof szManagerFile - 1, "%s/%s/%s.ngocvinh", szCfgDir, WPN_SPEC_DIR, szMapName)
	
	ExecuteForward(ifw_StartLoadData, ifw_Result)
	
	if (file_exists(szManagerFile))
	{
		for (new i = 0; i < file_size(szManagerFile, 1); i++)
		{
			new szTextInfo[64], iTextLen
			
			read_file(szManagerFile, i, szTextInfo, sizeof szTextInfo - 1, iTextLen)
			load_secondary_wpn_file(WPN_CONFIG_DIR, szTextInfo, "ini", 1)
		}
	}
	else
	{
		formatex(szManagerFile, sizeof szManagerFile - 1, "%s/%s/%s", szCfgDir, WPN_MANAGER_DIR, WPN_MANAGER_FILE)
	
		for (new i = 0; i < file_size(szManagerFile, 1); i++)
		{
			new szTextInfo[64], iTextLen
			
			read_file(szManagerFile, i, szTextInfo, sizeof szTextInfo - 1, iTextLen)
			load_secondary_wpn_file(WPN_CONFIG_DIR, szTextInfo, "ini", 0)
		}
	}
	
	formatex(szManagerFile, sizeof szManagerFile - 1, "%s/%s/%s.cfg", szCfgDir, WPN_ADD_DIR, szMapName)
	
	if (file_exists(szManagerFile))
	{
		for (new i = 0; i < file_size(szManagerFile, 1); i++)
		{
			new szTextInfo[64], iTextLen
			
			read_file(szManagerFile, i, szTextInfo, sizeof szTextInfo - 1, iTextLen)
			load_secondary_wpn_file(WPN_CONFIG_DIR, szTextInfo, "redplane", 1)
		}
	}
	
	
	//laser = precache_model("sprites/ledglow.spr")
	iLaserSprIndex = engfunc(EngFunc_PrecacheModel, "sprites/ledglow.spr")
	
	
	g_trailSpr = engfunc(EngFunc_PrecacheModel, "sprites/laserbeam.spr")
	
	
}



public client_disconnect(id)
{
	remove_task(id + TASK_REG_CZ_FUNCTION)
	
	if (iPlayerInfo[id])	
		TrieDestroy(iPlayerInfo[id])
}

public client_putinserver(id)
{
	nt_set_player_sec_wpn(id, - 1)
	
	if (!iPlayerInfo[id])
		iPlayerInfo[id] = TrieCreate()
		
	if (!is_user_bot(id))
		return
		
	set_task(0.1, "TASK_RegisterCzFunction", id + TASK_REG_CZ_FUNCTION)
}


public TASK_RegisterCzFunction(TASKID)
{
	new id = TASKID - TASK_REG_CZ_FUNCTION
	
	if (iHamCZ)
		return
		
	if (!is_user_bot(id))
		return
		
	if (!is_user_connected(id))
		return
	
	if (!get_cvar_num("bot_quota"))
		return
		
	
	RegisterHamFromEntity(Ham_TakeDamage, id, "fw_TakeDamage")
	
	RegisterHamFromEntity(Ham_Player_UpdateClientData, id, "fw_UpdateClientData_Post")
	
	iHamCZ = 1
	
}

public fw_ArmouryMenuSelected(id, iMenuId, iItemId)
{
	if (!is_user_alive(id))
		return
		
	if (iItemId == MENU_EXIT)
		return
	
	if (iTotalSpawnPoint > MAX_SPAWN_POINT - 1)
		return
		
	new szItemName[32], szInfo[3], iCALL_BACK, iACCESS_TYPE
	menu_item_getinfo(iMenuId, iItemId, iACCESS_TYPE, szInfo, sizeof szInfo - 1, szItemName, sizeof szItemName - 1, iCALL_BACK)
	
	new iWeaponId = str_to_num(szInfo)
	
	new szCfgDir[128], szMapName[32]
	
	get_mapname(szMapName, sizeof szMapName - 1)
	get_configsdir(szCfgDir, sizeof szCfgDir - 1)
	
	new szWeaponDirectory[256]
	formatex(szWeaponDirectory, sizeof szWeaponDirectory - 1, "%s/%s/%s", szCfgDir, WPN_SPAWN_DIR, szMapName)
	
	if (!dir_exists(szWeaponDirectory))
		mkdir(szWeaponDirectory)
		
	new iOrigin[3]
	get_user_origin(id, iOrigin, 0)
	
	new line[128]
	formatex(line, sizeof line - 1, "%d %d %d", iOrigin[0] ,iOrigin[1], iOrigin[2])
	
	new szSpawnFile[256]
	TrieGetString(weapon_StringInfo[iWeaponId], SECTION_SPAWN_FILE, szSpawnFile, sizeof szSpawnFile - 1)
	write_file(szSpawnFile, line, -1)
	
	IVecFVec(iOrigin, fSpawnVecs[iTotalSpawnPoint])
	
	client_print(id, print_center, "Add a pistol")
	menu_display(id, iMenuId, 0)
	iSpawnWeaponId[iTotalSpawnPoint] = iWeaponId
	iTotalSpawnPoint++
}


public concmd_OpenArmouryMenu(id)
{
	if (!is_user_alive(id))
		return 
		
	if (!is_user_admin(id))
		return
		
	menu_display(id, iWeaponSpawnMenuIndex, 0)
}

public fw_LaserToggle(id)
{
	
	if (!is_user_alive(id))
		return
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId < 0)
		return
		
	new iWpnFunc
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_FUNC, iWpnFunc)
	
	if (!(iWpnFunc & FUNC_LASER_SIGHT))
		return
	
	new iWeaponId = nt_get_sec_wpn_real_id(iSecondaryWpnId)
	
	if (get_user_weapon(id) != iWeaponId)
		return
		
	if (fm_get_next_attack(id) > 0.0)
		return
		
	if (CheckPlayerBit(bit_LaserSightOn, id))
	{
		remove_task(id + 5230)
		ClearPlayerBit(bit_LaserSightOn, id)
		return
	}
	else 	
		SetPlayerBit(bit_LaserSightOn, id)
				
	remove_task(id + 5230)
	
	set_task(0.3, "ShowLaser_TASK", id + 5230, _, _, "b")
	fm_set_next_attack(id, 0.5)
							
}

public fw_SelectiveFireToggle(id)
{
	if (!is_user_alive(id))
		return
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId < 0)
		return
		
	new iWeaponId = nt_get_sec_wpn_real_id(iSecondaryWpnId)
	
	if (get_user_weapon(id) != iWeaponId)
		return
	
	if (fm_get_next_attack(id) > 0.0)
		return
	
	new iFireMode
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_FIREMODE, iFireMode)
	
	new iOriginalFireMode
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_ORIGINAL_FIREMODE, iOriginalFireMode)
	
	if (iFireMode == FIRE_SEMI_AUTO)
	{
		if (iOriginalFireMode == FIRE_AUTO)
			return
			
		if (!CheckPlayerBit(g_AutomaticMode, id))
		{
			if (!CheckPlayerBit(g_AutomaticMode, id))	SetPlayerBit(g_AutomaticMode, id);
			if (CheckPlayerBit(g_SpecialBurstMode, id))	ClearPlayerBit(g_SpecialBurstMode, id);
			if (CheckPlayerBit(g_SpecialBurstFamas, id))	ClearPlayerBit(g_SpecialBurstFamas, id);
			
			client_print(id, print_center, "%L", id, "CHANGED_TO_AUTO_MODE")
		}
		else
		{
			if (CheckPlayerBit(g_AutomaticMode, id))	ClearPlayerBit(g_AutomaticMode, id);
			
			if (iOriginalFireMode == FIRE_BURST)
			{
				if (!CheckPlayerBit(g_SpecialBurstMode, id))	SetPlayerBit(g_SpecialBurstMode, id);
				if (CheckPlayerBit(g_SpecialBurstFamas, id))	ClearPlayerBit(g_SpecialBurstFamas, id);
				
				client_print(id, print_center, "%L", id, "CHANGED_TO_BURST_MODE")
			}
			else if (iOriginalFireMode == FIRE_BURST_FAMAS)
			{
				if (CheckPlayerBit(g_SpecialBurstMode, id))	ClearPlayerBit(g_SpecialBurstMode, id);
				if (!CheckPlayerBit(g_SpecialBurstFamas, id))	SetPlayerBit(g_SpecialBurstFamas, id);
				
				client_print(id, print_center, "%L", id, "CHANGED_TO_BURST_FAMAS_MODE")
			}
			else
			{
				
				if (CheckPlayerBit(g_SpecialBurstMode, id))	ClearPlayerBit(g_SpecialBurstMode, id);
				if (CheckPlayerBit(g_SpecialBurstFamas, id))	ClearPlayerBit(g_SpecialBurstFamas, id);
				
				client_print(id, print_center, "%L", id, "CHANGED_TO_SEMI_MODE")
			}
		}
		
		new Float:fFmTime
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_TIME_FM_CHANGE, fFmTime)
		fm_set_next_attack(id, fFmTime)			
	}
	else if (iFireMode == FIRE_SEMI_BURST)
	{				
		if (iOriginalFireMode == FIRE_BURST)
			return
			
		if (!CheckPlayerBit(g_SpecialBurstMode, id))
		{
			if (CheckPlayerBit(g_AutomaticMode, id))	ClearPlayerBit(g_AutomaticMode, id);
			if (CheckPlayerBit(g_SpecialBurstFamas, id))	ClearPlayerBit(g_SpecialBurstFamas, id);
			if (!CheckPlayerBit(g_SpecialBurstMode, id))	SetPlayerBit(g_SpecialBurstMode, id)
			client_print(id, print_center, "%L", id, "CHANGED_TO_BURST_MODE")
		}
		else
		{
			
			if (CheckPlayerBit(g_SpecialBurstMode, id))	ClearPlayerBit(g_SpecialBurstMode, id)
			
			if (iOriginalFireMode == FIRE_AUTO)
			{
				if (!CheckPlayerBit(g_AutomaticMode, id))	SetPlayerBit(g_AutomaticMode, id);
				if (CheckPlayerBit(g_SpecialBurstFamas, id))	ClearPlayerBit(g_SpecialBurstFamas, id);
				client_print(id, print_center, "%L", id, "CHANGED_TO_AUTO_MODE")
			}
			else if (iOriginalFireMode == FIRE_BURST_FAMAS)
			{
				if (!CheckPlayerBit(g_SpecialBurstFamas, id))	SetPlayerBit(g_SpecialBurstFamas, id);
				if (CheckPlayerBit(g_AutomaticMode, id))	ClearPlayerBit(g_AutomaticMode, id);
				client_print(id, print_center, "%L",  id, "CHANGED_TO_BURST_FAMAS_MODE")
			}
			else
			{
				if (CheckPlayerBit(g_AutomaticMode, id))	ClearPlayerBit(g_AutomaticMode, id);
				if (CheckPlayerBit(g_SpecialBurstFamas, id))	ClearPlayerBit(g_SpecialBurstFamas, id);
				
				client_print(id, print_center, "%L", id, "CHANGED_TO_SEMI_MODE")
			}
		}
								
		new Float:fFmTime
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_TIME_FM_CHANGE, fFmTime)
		fm_set_next_attack(id, fFmTime)
	}
	else if (iFireMode == FIRE_SEMI_FAMAS)
	{
		if (iOriginalFireMode == FIRE_BURST_FAMAS)
			return
			
		if (!CheckPlayerBit(g_SpecialBurstFamas, id))
		{
			if (CheckPlayerBit(g_AutomaticMode, id))	ClearPlayerBit(g_AutomaticMode, id);
			if (!CheckPlayerBit(g_SpecialBurstFamas, id))	SetPlayerBit(g_SpecialBurstFamas, id);
			if (CheckPlayerBit(g_SpecialBurstMode, id))	ClearPlayerBit(g_SpecialBurstMode, id)
			client_print(id, print_center, "%L", id, "CHANGED_TO_BURST_FAMAS_MODE")
		}
		else
		{
			
			if (CheckPlayerBit(g_SpecialBurstFamas, id))	ClearPlayerBit(g_SpecialBurstFamas, id)
			
			if (iOriginalFireMode == FIRE_AUTO)
			{
				if (!CheckPlayerBit(g_AutomaticMode, id))	SetPlayerBit(g_AutomaticMode, id);
				if (CheckPlayerBit(g_SpecialBurstMode, id))	ClearPlayerBit(g_SpecialBurstMode, id);
				client_print(id, print_center, "%L", id, "CHANGED_TO_AUTO_MODE")
			}
			else if (iOriginalFireMode == FIRE_BURST)
			{
				if (CheckPlayerBit(g_SpecialBurstMode, id))	ClearPlayerBit(g_SpecialBurstMode, id);
				if (CheckPlayerBit(g_AutomaticMode, id))	ClearPlayerBit(g_AutomaticMode, id);
				client_print(id, print_center, "%L",  id, "CHANGED_TO_BURST_MODE")
			}
			else
			{
				if (CheckPlayerBit(g_AutomaticMode, id))	ClearPlayerBit(g_AutomaticMode, id);
				if (CheckPlayerBit(g_SpecialBurstMode, id))	ClearPlayerBit(g_SpecialBurstMode, id);
				
				client_print(id, print_center, "%L", id, "CHANGED_TO_SEMI_MODE")
			}
		}
		new Float:fFmTime
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_TIME_FM_CHANGE, fFmTime)
		fm_set_next_attack(id, fFmTime)
	}
	else if (iFireMode == FIRE_SEMI_AUTO_BURST)
	{
		if (!CheckPlayerBit(g_AutomaticMode, id) && !CheckPlayerBit(g_SpecialBurstMode,id))
		{
			if (!CheckPlayerBit(g_AutomaticMode, id))	SetPlayerBit(g_AutomaticMode, id);
			if (CheckPlayerBit(g_SpecialBurstMode, id))	ClearPlayerBit(g_SpecialBurstMode, id);
			if (CheckPlayerBit(g_SpecialBurstFamas, id))	ClearPlayerBit(g_SpecialBurstFamas, id);
			client_print(id, print_center, "%L", id, "CHANGED_TO_AUTO_MODE")
		}
		else if (CheckPlayerBit(g_AutomaticMode, id) && !CheckPlayerBit(g_SpecialBurstMode, id))
		{
			if (CheckPlayerBit(g_AutomaticMode, id))	ClearPlayerBit(g_AutomaticMode, id);
			if (!CheckPlayerBit(g_SpecialBurstMode, id))	SetPlayerBit(g_SpecialBurstMode, id);
			if (CheckPlayerBit(g_SpecialBurstFamas, id))	ClearPlayerBit(g_SpecialBurstFamas, id);
			
			client_print(id, print_center, "%L", id, "CHANGED_TO_BURST_MODE")
		}
		else if (CheckPlayerBit(g_SpecialBurstMode, id) && !CheckPlayerBit(g_AutomaticMode, id))
		{
			if (CheckPlayerBit(g_AutomaticMode, id))	ClearPlayerBit(g_AutomaticMode, id);
			if (CheckPlayerBit(g_SpecialBurstMode, id))	ClearPlayerBit(g_SpecialBurstMode, id);
			if (CheckPlayerBit(g_SpecialBurstFamas, id))	ClearPlayerBit(g_SpecialBurstFamas, id);
			client_print(id, print_center, "%L", id, "CHANGED_TO_SEMI_MODE")
		}
		new Float:fFmTime
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_TIME_FM_CHANGE, fFmTime)
		fm_set_next_attack(id, fFmTime)
	}
	else if (iFireMode == FIRE_SEMI_AUTO_BURST_FAMAS)
	{
		if (!CheckPlayerBit(g_AutomaticMode, id) && !CheckPlayerBit(g_SpecialBurstFamas,id))
		{
			if (!CheckPlayerBit(g_AutomaticMode, id))	SetPlayerBit(g_AutomaticMode, id);
			if (CheckPlayerBit(g_SpecialBurstMode, id))	ClearPlayerBit(g_SpecialBurstMode, id);
			if (CheckPlayerBit(g_SpecialBurstFamas, id))	ClearPlayerBit(g_SpecialBurstFamas, id);
			client_print(id, print_center, "%L", id, "CHANGED_TO_AUTO_MODE")
		}
		else if (CheckPlayerBit(g_AutomaticMode, id) && !CheckPlayerBit(g_SpecialBurstFamas, id))
		{
			if (CheckPlayerBit(g_AutomaticMode, id))	ClearPlayerBit(g_AutomaticMode, id);
			if (CheckPlayerBit(g_SpecialBurstMode, id))	ClearPlayerBit(g_SpecialBurstMode, id);
			if (!CheckPlayerBit(g_SpecialBurstFamas, id))	SetPlayerBit(g_SpecialBurstFamas, id);
			client_print(id, print_center, "%L", id, "CHANGED_TO_BURST_FAMAS_MODE")
		}
		else if (CheckPlayerBit(g_SpecialBurstFamas, id) && !CheckPlayerBit(g_AutomaticMode, id))
		{
			if (CheckPlayerBit(g_AutomaticMode, id))	ClearPlayerBit(g_AutomaticMode, id);
			if (CheckPlayerBit(g_SpecialBurstMode, id))	ClearPlayerBit(g_SpecialBurstMode, id);
			if (CheckPlayerBit(g_SpecialBurstFamas, id))	ClearPlayerBit(g_SpecialBurstFamas, id);
			client_print(id, print_center, "%L", id, "CHANGED_TO_SEMI_MODE")
		}
		
		new Float:fFmTime
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_TIME_FM_CHANGE, fFmTime)
		fm_set_next_attack(id, fFmTime)
	}
}




public round_begin()
{
	for (new i = 0; i < iTotalSpawnPoint; i++)
	{
		new Float:fOrigin[3]
		
		CreateArmoury(i, -1, fOrigin)
	}
}

public fw_SetModel_Pos(iWeaponBoxEnt, szModel[])
{
	if (!iWeaponBoxEnt || !pev_valid(iWeaponBoxEnt))
		return 
		
	new id = pev(iWeaponBoxEnt, pev_owner)
	
	if (!id || !is_user_connected(id))
		return
		
	new szClassName[32]
	pev(iWeaponBoxEnt, pev_classname, szClassName, sizeof szClassName - 1)
	
	if (!equal(szClassName, "weaponbox", 9))
		return
	
	new iWeaponId = UT_WorldModelToWeaponId(szModel)
		
	if (!IsSecondaryWpn(iWeaponId))
		return 
			
	if (CheckPlayerBit(bit_LaserSightOn, id))	ClearPlayerBit(bit_LaserSightOn, id);
	
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId > -1)
	{
		new iWPNBOX_FLAG
		
		if (CheckPlayerBit(g_AutomaticMode, id))
		{
			if (!(iWPNBOX_FLAG & BFUNC_AUTO_ON))
				iWPNBOX_FLAG &= BFUNC_AUTO_ON
			
			if (iWPNBOX_FLAG & BFUNC_BURST_ON)
				iWPNBOX_FLAG &= ~BFUNC_BURST_ON
				
			if (iWPNBOX_FLAG & BFUNC_FBURST_ON)
				iWPNBOX_FLAG &= ~BFUNC_FBURST_ON
			
		}
		else if (CheckPlayerBit(g_SpecialBurstFamas, id))
		{
			if (!(iWPNBOX_FLAG & BFUNC_FBURST_ON))
				iWPNBOX_FLAG &= BFUNC_FBURST_ON
			
			if (iWPNBOX_FLAG & BFUNC_BURST_ON)
				iWPNBOX_FLAG &= ~BFUNC_BURST_ON
				
			if (iWPNBOX_FLAG & BFUNC_AUTO_ON)
				iWPNBOX_FLAG &= ~BFUNC_AUTO_ON
		}
		else if (CheckPlayerBit(g_SpecialBurstMode, id))
		{
			if (!(iWPNBOX_FLAG & BFUNC_BURST_ON))
				iWPNBOX_FLAG &= BFUNC_BURST_ON
			
			if (iWPNBOX_FLAG & BFUNC_AUTO_ON)
				iWPNBOX_FLAG &= ~BFUNC_AUTO_ON
				
			if (iWPNBOX_FLAG & BFUNC_FBURST_ON)
				iWPNBOX_FLAG &= ~BFUNC_FBURST_ON
		}
		
		new szKey[128]
		
		new iClip, iAmmo
		get_user_ammo(id, iWeaponId, iClip, iAmmo)
		iAmmo = UT_GetUserBPA(id, iWeaponId)
		
		formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_SLOT_FLAG, iWeaponBoxEnt)
		set_trie_int(iWeaponBoxInfo, szKey, iWPNBOX_FLAG)
			
		formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_SLOT_AMMO, iWeaponBoxEnt)
		set_trie_int(iWeaponBoxInfo, szKey, iClip)
		
		formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_SLOT_BPA, iWeaponBoxEnt)
		set_trie_int(iWeaponBoxInfo, szKey, iAmmo)		
		
		
		set_pev(iWeaponBoxEnt, pev_iuser3, iSecondaryWpnId)
		set_pev(iWeaponBoxEnt, pev_iuser4, WpnBoxSecondaryWait)
		set_pev(iWeaponBoxEnt, pev_owner, id)
		
		set_pev(iWeaponBoxEnt, pev_solid, SOLID_TRIGGER)
		
		new szWorldModel[128], iSubBody
		
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WORLD_MODEL_SUB, iSubBody)
		TrieGetString(weapon_StringInfo[iSecondaryWpnId], SECTION_W_MODEL, szWorldModel, sizeof szWorldModel - 1)
		set_pev(iWeaponBoxEnt, pev_body, iSubBody)
		engfunc(EngFunc_SetModel, iWeaponBoxEnt, szWorldModel)
		
		
		UT_SetUserBPA(id, iWeaponId, 0)
		set_task(WEAPONBOX_ACTIVE_TIME, "fw_ActiveNewPistol", iWeaponBoxEnt + TASK_ACTIVE_WEAPONBOX)
			
		
				
		if (CheckPlayerBit(g_bAutomaticMode, id))	ClearPlayerBit(g_bAutomaticMode, id);
		
		remove_task(id + TASK_PREPARE_INSERT)
		remove_task(id + TASK_INSERT_AMMO)
		remove_task(id + TASK_FINISH_INSERTING)
		
		nt_set_player_sec_wpn(id, -1)
		
		remove_task(id + TASK_OPEN_FIRE)
	}
	else
	{
		
		if (CheckPlayerBit(bit_NormalIronSight, id))
			ClearPlayerBit(bit_NormalIronSight, id)
		
		if (task_exists(id + TASK_NORMAL_IRONSIGHT))
			remove_task(id + TASK_NORMAL_IRONSIGHT)
			
		if (task_exists(id - TASK_NORMAL_IRONSIGHT))
			remove_task(id - TASK_NORMAL_IRONSIGHT)
			
			
		new iClip, iBpa
		
		get_user_ammo(id, iWeaponId, iClip, iBpa)
		iBpa = UT_GetUserBPA(id, iWeaponId)
		
		new szKey[128]
		
		formatex(szKey, sizeof szKey - 1, "%s_-1_%d", PREFIX_SLOT_AMMO, iWeaponBoxEnt)
		set_trie_int(iWeaponBoxInfo, szKey, iClip)
		
		formatex(szKey, sizeof szKey - 1, "%s_-1_%d", PREFIX_SLOT_BPA, iWeaponBoxEnt)
		set_trie_int(iWeaponBoxInfo, szKey, iBpa)	
		
		set_pev(iWeaponBoxEnt, pev_iuser3, iWeaponId)
		set_pev(iWeaponBoxEnt, pev_iuser4, WpnBoxNormalSecondaryWait)
		UT_SetUserBPA(id, iWeaponId, 0)
		set_task(WEAPONBOX_ACTIVE_TIME, "fw_ActiveNormalPistol", iWeaponBoxEnt + TASK_ACTIVE_WEAPONBOX)
					
				
		
	}					
}


public fw_CmdStart(id, ucHandle, seed)
{
	if (!is_user_alive(id))
		return
		
	new iWeaponId = get_user_weapon(id)
	
	if (!IsSecondaryWpn(iWeaponId))
		return
	
	new iWeaponEnt = fm_get_active_item(id)
		
	new iClip
	
	if (!pev_valid(iWeaponEnt))
		return
		
	iClip = cs_get_weapon_ammo(iWeaponEnt)
	
	new fInReload = fm_get_weapon_reload(iWeaponEnt)
	new Float:flNextAttack = fm_get_next_attack(id)
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)	
	new iSilentState = cs_get_weapon_silen(iWeaponEnt)
	
	if (iSecondaryWpnId > -1 )
	{
		
		
		new iBasicSetting
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_FUNC, iBasicSetting)
		
		if (iWeaponId != nt_get_sec_wpn_real_id(iSecondaryWpnId))
			return
			
		new iButton = get_uc(ucHandle, UC_Buttons)
			
		if (iButton & IN_RELOAD)
		{
			set_uc(ucHandle, UC_Buttons, iButton &~ IN_RELOAD)
			console_cmd(id, "-reload")
			
			new iBasicSetting
			TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BASIC_SETTING, iBasicSetting)
			
			if (iBasicSetting & ST_NO_MANUAL_RELOAD)
				return
			
			if (CheckPlayerBit(b_CancelReloading, id))	
				ClearPlayerBit(b_CancelReloading, id)
					
			if (fInReload || flNextAttack > 0.0)
				return
						
							
			cs_set_user_zoom(id, CS_RESET_ZOOM, 0)
			
			if (CheckPlayerBit(g_bUsingZoomFunc, id))	
				ClearPlayerBit(g_bUsingZoomFunc, id)
							
				
			new iInSilencer = 0
			
			if (iWeaponId == CSW_USP)
				iInSilencer = cs_get_weapon_silen(iWeaponEnt)
							
			UT_PlayWeaponAnim(id, UT_Get_CS_Reload_Anim(iWeaponId, iInSilencer))
								
			new iDefaultClip = UT_Get_CS_DefaultClip(iWeaponId)
							
							
			if (iClip >= iDefaultClip)
				cs_set_weapon_ammo(iWeaponEnt, iDefaultClip - 1)
						
			ExecuteHamB(Ham_Weapon_Reload, iWeaponEnt)
			
			cs_set_weapon_ammo(iWeaponEnt, iClip)			
					
		}
		else if (iButton & IN_ATTACK2)
		{

			if (cs_get_user_shield(id))
				return 
						
			set_uc(ucHandle, UC_Buttons, iButton &= ~IN_ATTACK2)
			console_cmd(id, "-attack2")
			
			if (fInReload || flNextAttack > 0.0 )
				return
				
			new iWeaponFunc = nt_get_sec_wpn_func(iSecondaryWpnId)
			
			if (iWeaponFunc & FUNC_ADS)
			{
				new iAdsFlag
				TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_ADS_CONFIG, iAdsFlag)
					
				if (CheckPlayerBit(g_bUsingZoomFunc, id))
				{				
					if (!do_scope_function(id, iSecondaryWpnId))
					{
						if (CheckPlayerBit(g_bUsingZoomFunc, id))	
							ClearPlayerBit(g_bUsingZoomFunc, id)
							
						if (task_exists(id - TASK_IRONSIGHT))
							remove_task(id - TASK_IRONSIGHT)
										
								
						new szViewModel[128]
						TrieGetString(weapon_StringInfo[iSecondaryWpnId], SECTION_V_MODEL, szViewModel, sizeof szViewModel - 1)
								
						set_pev(id, pev_viewmodel2, szViewModel)
							
						if (!(iAdsFlag & ADS_NO_OUT_ANIM))
						{
							new iAnimation = Get_CSWPN_MaxAnimation(iWeaponId) + ANIM_END_IRONSIGHT
									
							if (cs_get_weapon_silen(iWeaponEnt))
								iAnimation += 1
										
							UT_PlayWeaponAnim(id,  iAnimation)
						}
								
						new Float:fAdsTime
						TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_ADS_END_TIME, fAdsTime)
						set_task(fAdsTime, "DeactiveAds_TASK", id - TASK_IRONSIGHT)
						fm_set_next_attack(id, fAdsTime)
						UT_SetPlayerFOV(id, 90)
						
						
					}					
				}
				else
				{
					UT_SetPlayerFOV(id, 90)
						
					if (task_exists(id + TASK_IRONSIGHT))
						remove_task(id + TASK_IRONSIGHT)
							
					new iParam[6]
					iParam[0] = iSecondaryWpnId
					iParam[1] = iAdsFlag
					iParam[2] = 0 // Already Activated ADS?
					iParam[3] = 0 // Zoom Level
					iParam[4] = 1 // Auto update Scope
					iParam[5] = iWeaponEnt // Weapon Entity
					
					new Float:fAdsTime
					TrieGetCell(weapon_StringInfo[iSecondaryWpnId] ,SECTION_ADS_CONFIG, fAdsTime)
					set_task(fAdsTime, "ActiveAds_TASK", id + TASK_IRONSIGHT, iParam, sizeof iParam)
					fm_set_next_attack(id, fAdsTime)
						
					if (!(iAdsFlag & ADS_NO_INTRO_ANIM))
					{
						new iAnimation = Get_CSWPN_MaxAnimation(iWeaponId) + ANIM_START_IRONSIGHT
							
						if (cs_get_weapon_silen(iWeaponEnt))
							iAnimation += 1
								
						UT_PlayWeaponAnim(id, iAnimation)
					}
				}
			}
		}
		else if (iButton & IN_ATTACK)
		{
			if (fInReload)
			{
				if (iBasicSetting & ST_NEW_RELOAD)
					if (!CheckPlayerBit(b_CancelReloading, id))
						SetPlayerBit(b_CancelReloading, id)
			}
			else
			{
				if (fm_get_next_attack(id) > 0.0)
					return
						
					
				new iFireFlag 
				TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WPN_FIRE_FLAG, iFireFlag)
				
				if (iFireFlag & FIRE_ON_RELEASE)
					remove_task(id + TASK_OPEN_FIRE)
				
				
				new iOpenFire = 1
					
				if (iFireFlag & FIRE_MINIGUN)
				{
					
					new Float:fSpinTime 
					new iAttackStage = get_trie_int(iPlayerInfo[id], SECTION_ATTACK_STAGE, STAGE_NONE)
					
					if (!iAttackStage)
					{
								
						set_uc(ucHandle, UC_Buttons, iButton &= ~IN_ATTACK)
										
						TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_SPIN_TIME, fSpinTime)
						fAttackTime[id] = get_gametime() + fSpinTime 
						set_trie_int(iPlayerInfo[id], SECTION_ATTACK_STAGE, STAGE_SPIN)
										
						if (iFireFlag & FIRE_DRAW_SPIN_ANIM)
						{
							new iSpinAnimation = Get_CSWPN_MaxAnimation(iWeaponId)
												
							iSpinAnimation += ANIM_SPIN_PRE
												
							if (iSilentState)
								iSpinAnimation += 1
							
							UT_PlayWeaponAnim(id, iSpinAnimation)
						}
									
						iOpenFire = 0	
					}
					else if (iAttackStage == STAGE_SPIN)
					{
						set_uc(ucHandle, UC_Buttons, iButton &= ~IN_ATTACK)
						TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_DEACTIVE_SPIN, fSpinTime)
								
						if (get_gametime() >= fAttackTime[id])
						{
							fAttackTime[id] = get_gametime() + fSpinTime
							set_trie_int(iPlayerInfo[id], SECTION_ATTACK_STAGE, STAGE_FIRE)
									
						}
						else	iOpenFire = 0
								
					}
					else if (iAttackStage == STAGE_FIRE && !is_user_bot(id))
					{
						if (iFireFlag & FIRE_ON_RELEASE)
						{
							set_uc(ucHandle, UC_Buttons, iButton &= ~IN_ATTACK)
									
							TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_DEACTIVE_SPIN, fSpinTime)
							fAttackTime[id] = get_gametime() + fSpinTime
									
							set_task(0.25, "OpenReleaseFire_TASK", id + TASK_OPEN_FIRE)//, iParam, sizeof iParam)
							iOpenFire = 0
						}
					}
					
					SW_do_special_attack(id, iWeaponEnt, iSecondaryWpnId, ucHandle, iButton, iClip, iOpenFire)
				}
			}		
		}
	}
	else
	{
		if (fInReload || flNextAttack > 0.0)
			return
				
		new iButton = get_uc(ucHandle, UC_Buttons)
		
		if (iButton & IN_RELOAD)
		{
			set_uc(ucHandle, UC_Buttons, iButton &~ IN_RELOAD)
				
				
			
				
			new iInSilencer = cs_get_weapon_silen(iWeaponEnt)
						
			if (!cs_get_user_shield(id))
				UT_PlayWeaponAnim(id, UT_Get_CS_Reload_Anim(iWeaponId, iInSilencer))
			else	UT_PlayWeaponAnim(id, ANIM_RELOAD_SHIELD[iWeaponId])
						
						
			new iDefaultClip = UT_Get_CS_DefaultClip(iWeaponId)
											
			if (iClip >= iDefaultClip)
				cs_set_weapon_ammo(iWeaponEnt, iDefaultClip - 1)
				
			ExecuteHamB(Ham_Weapon_Reload, iWeaponEnt)
			cs_set_weapon_ammo(iWeaponEnt, iClip)
		}
		else if (iButton & IN_ATTACK2)
		{
			if (is_ads_weapon(iWeaponId) && !cs_get_user_shield(id))
			{
				set_uc(ucHandle, UC_Buttons, iButton &~ IN_ATTACK2)
				
				engclient_cmd(id, "-attack2")
				console_cmd(id, "-attack2")
					
					
				
				if (CheckPlayerBit(bit_NormalIronSight, id))
				{
					ClearPlayerBit(bit_NormalIronSight, id)
											
					if (task_exists(id - TASK_NORMAL_IRONSIGHT))
						remove_task(id - TASK_NORMAL_IRONSIGHT)
													
															
					new iAnimation = Get_CSWPN_MaxAnimation(iWeaponId) + ANIM_END_IRONSIGHT
										
					if (cs_get_weapon_silen(iWeaponEnt))
						iAnimation += 1
												
					UT_PlayWeaponAnim(id,  iAnimation)
					
					new Float:flEndAdsTime = UT_Get_CS_EndAdsTime(iWeaponId)
					
					set_task(flEndAdsTime, "DeactiveIronSightNormal_TASK", id - TASK_NORMAL_IRONSIGHT)
					fm_set_next_attack(id, flEndAdsTime)
						
							
					UT_SetPlayerFOV(id, 90)
					
					
					UT_CS_Crosshair_Toggle(id, 1, 1)
					
				}
				else
				{
					UT_SetPlayerFOV(id, 90)
				//	UT_HL_Crosshair_Toggle(id, 0, 1)
										
					if (task_exists(id + TASK_NORMAL_IRONSIGHT))
						remove_task(id + TASK_NORMAL_IRONSIGHT)
											
					new Float:flStartAdsTime = UT_Get_CS_StartAdsTime(iWeaponId)
					
					set_task(flStartAdsTime, "ActiveIronSightNormal_TASK", id + TASK_NORMAL_IRONSIGHT)
					fm_set_next_attack(id, flStartAdsTime)				
									
					new iAnimation = Get_CSWPN_MaxAnimation(iWeaponId) + ANIM_START_IRONSIGHT
										
					if (cs_get_weapon_silen(iWeaponEnt))
						iAnimation += 1
											
					UT_PlayWeaponAnim(id, iAnimation)
											
				}	
			}
		}
		
		new iImpulse = get_uc(ucHandle, UC_Impulse)
		
		if (iImpulse == 201)
		{
			if (is_ads_weapon(iWeaponId) && !cs_get_user_shield(id))
			{
				if (iWeaponId != CSW_GLOCK18)
					return
					
				set_uc(ucHandle, UC_Impulse, 0)
						
				if (cs_get_weapon_burst(iWeaponEnt))				
					cs_set_weapon_burst(iWeaponEnt, 0)
				else
					cs_set_weapon_burst(iWeaponEnt, 1)
					
				fm_set_next_attack(id, 0.5)	
			}
				
		}
	}
	return
}

public DoFamasBurst_TASK(iParam[3], TASKID)
{
	new id = TASKID - TASK_FAMAS_BURST
	
	if (!is_user_alive(id))
	{
		remove_task(TASKID)
		return
	}
	
	
	new iSecondaryWpnId = iParam[0]
	new iEnt = iParam[1]
	new iShot = iParam[2]
	
	if (nt_get_user_sec_wpn(id) < 0)
	{
		remove_task(TASKID)
		return
	}
	
	if (nt_get_user_sec_wpn(id) != iSecondaryWpnId)
	{
		remove_task(TASKID)
		return
	}
	
	new iWeaponId = get_user_weapon(id)
	
	if (iWeaponId != nt_get_sec_wpn_real_id(iSecondaryWpnId))
	{
		remove_task(TASKID)
		return
	}
	
	if (!CheckPlayerBit(g_SpecialBurstFamas, id))
	{
		remove_task(TASKID)
		return
	}
	
	if (!iShot)
	{
		if (cs_get_weapon_ammo(iEnt))
			fm_set_next_attack(id, 1.25)
		else	ExecuteHamB(Ham_Weapon_Reload, iEnt)
		
		remove_task(TASKID)
		return
	}
	
	if (!cs_get_weapon_ammo(iEnt))
	{
		ExecuteHamB(Ham_Weapon_Reload, iEnt)
		remove_task(TASKID)
		return
	}
	
	#define	m_iShotFired						64
	if(get_pdata_int(iEnt, m_iShotFired, 4))
		set_pdata_int(iEnt, m_iShotFired, 0, 4)
	
	UT_MakeWpnPrimAtk(iEnt)
	
	
	if (nt_sw_is_user_ads(id))
	{
		new iAdsConfig
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_ADS_CONFIG, iAdsConfig)
		
		
		new iShotAnimation = Get_CSWPN_MaxAnimation(iWeaponId) + ANIM_IRONSIGHT_SHOOT_3
						
		if (cs_get_weapon_silen(iEnt))
			iShotAnimation += 1
			
		UT_PlayWeaponAnim(id, iShotAnimation)
		
	}
	
	fm_set_next_attack(id, INFINITIVE_RELOAD_TIME)
	
	iParam[2]--
	
	set_task(BURST_CYCLE, "DoFamasBurst_TASK", id + TASK_FAMAS_BURST, iParam, sizeof iParam)

}

public ActiveAds_TASK(iParam[6], TASKID)
{
	new id = TASKID - TASK_IRONSIGHT
	
	if (!is_user_alive(id))
		return
	
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return
					
	if (iSecondaryWpnId != iParam[0])
		return
		
	new iEnt = fm_get_active_item(id)
	
	if (iEnt != iParam[5])
		return
		
	new iWeaponId = nt_get_sec_wpn_real_id(iSecondaryWpnId)
	
	if (iWeaponId != cs_get_weapon_id(iEnt))
		return
	
	ClearPlayerBit(g_bUsingZoomFunc, id)
	
	new iWpnFunc = nt_get_sec_wpn_func(iSecondaryWpnId)
	
	if (!(iWpnFunc & FUNC_ADS))
		return
		
	
	
	/*
	if (iParam[2])
	{
		SetPlayerBit(g_bUsingZoomFunc, id)
		set_trie_int(iPlayerInfo[id], SECTION_USER_ZOOM_LVL, iParam[3])
		
		new iFOV
		switch (iParam[3])
		{
			case 1:
			{
				TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_FIRST_FOV, iFOV)
				UT_SetPlayerFOV(id, iFOV)
			}
			case 2:
			{
				TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_SECOND_FOV, iFOV)
				UT_SetPlayerFOV(id, iFOV)
			}
			case 3:
				UT_SetPlayerFOV(id, 90)
		}
	}
	*/
	//	Auto updating scope is ON
	//if (iParam[4])
	//	do_scope_function(id, iSecondaryWpnId)
		
	do_scope_function(id, iSecondaryWpnId)
		
	if (iADS_State)
	{
		show_specific_view_model(id, iSecondaryWpnId)
		//set_trie_int(iPlayerInfo[id], SECTION_USER_ZOOM_LVL, iParam[1]) // Zoom Level
		
		new iAdsConfig = iParam[1]
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_ADS_CONFIG, iAdsConfig)
		
			
		new iIronSightIdleAnim = Get_CSWPN_MaxAnimation(iWeaponId) + ANIM_IRONSIGHT_IDLE_3
						
		if (cs_get_weapon_silen(iEnt))
			iIronSightIdleAnim += 1
							
		UT_PlayWeaponAnim(id, iIronSightIdleAnim)		
		
		
		if (!(iAdsConfig & ADS_NO_CS_CROSSHAIR))
			UT_CS_Crosshair_Toggle(id, 1, 1)
		else
			UT_CS_Crosshair_Toggle(id, 0, 1)
			
			
		if (!(iAdsConfig & ADS_NO_HL_CROSSHAIR))
			UT_HL_Crosshair_Toggle(id, 1, 0)
		else	UT_HL_Crosshair_Toggle(id, 0, 0)
	}
	
	SetPlayerBit(g_bUsingZoomFunc, id)
	
}

public ActiveIronSightNormal_TASK(TASKID)
{
	
	new id = TASKID - TASK_NORMAL_IRONSIGHT
	
	if (!is_user_alive(id))
		return
	
		
	new iEnt = fm_get_active_item(id)
	
	new iWeaponId = cs_get_weapon_id(iEnt)
		
	UT_SendCurWeaponMsg(id, 1, iWeaponId, cs_get_weapon_ammo(iEnt), 1)
		
				
	new iIronSightIdleAnim = Get_CSWPN_MaxAnimation(iWeaponId) + ANIM_IRONSIGHT_IDLE_3
					
	if (cs_get_weapon_silen(iEnt))
		iIronSightIdleAnim += 1
						
	UT_PlayWeaponAnim(id, iIronSightIdleAnim)
			
	
	UT_CS_Crosshair_Toggle(id, 0, 1)
	UT_HL_Crosshair_Toggle(id, 0, 0)
	
	
	if (!CheckPlayerBit(bit_NormalIronSight, id))	SetPlayerBit(bit_NormalIronSight, id)
	
}

public DeactiveAds_TASK(TASKID)
{
	new id = TASKID + TASK_IRONSIGHT
	
	if (!is_user_alive(id))
		return
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId < 0)
		return
		
	new iWeaponId = get_user_weapon(id)
	
	if (iWeaponId != nt_get_sec_wpn_real_id(iSecondaryWpnId))
		return
		
	new iWpnFunc = nt_get_sec_wpn_func(iSecondaryWpnId)
	
	if (!(iWpnFunc & FUNC_ADS))
		return
		
	new iBasicSetting
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BASIC_SETTING, iBasicSetting)
		
	if (!(iBasicSetting & ST_NO_CROSSHAIR))
		UT_CS_Crosshair_Toggle(id, 1, 1)
	else
		UT_CS_Crosshair_Toggle(id, 0, 1)
	
	new iWeaponEnt = fm_get_active_item(id)
	
	if (!pev_valid(iWeaponEnt))
		return
		
	if (iWeaponId == CSW_USP)
	{
		if (cs_get_weapon_silen(iWeaponEnt))
			UT_PlayWeaponAnim(id, 0)
		else	UT_PlayWeaponAnim(id, 7)
	}
	else	UT_PlayWeaponAnim(id, 0)
}

public DeactiveIronSightNormal_TASK(TASKID)
{
	new id = TASKID + TASK_NORMAL_IRONSIGHT
	
	if (!is_user_alive(id))
		return
			
	new iWeaponEnt = fm_get_active_item(id)
		
	if (!iWeaponEnt || !pev_valid(iWeaponEnt))
		return
			
	new iWeaponId = cs_get_weapon_id(iWeaponEnt)
		
	if (iWeaponId == CSW_USP)
	{
		if (cs_get_weapon_silen(iWeaponEnt))
			UT_PlayWeaponAnim(id, 0)
		else	UT_PlayWeaponAnim(id, 8)
	}
	else	UT_PlayWeaponAnim(id, 0)
	
}

stock remove_all_tasks(id)
{		
	remove_task(id + TASK_IRONSIGHT)			
	remove_task(id - TASK_IRONSIGHT)
	remove_task(id + TASK_NORMAL_IRONSIGHT)
	remove_task(id - TASK_NORMAL_IRONSIGHT)	
	remove_task(id + TASK_FAMAS_BURST)
	remove_task(id + TASK_PREPARE_INSERT)
	remove_task(id + TASK_FINISH_INSERTING)
	remove_task(id + TASK_INSERT_AMMO)
}

public fw_UpdateClientData_Post(id, sendweapon, cd_handle)
{
	if (!is_user_alive(id))
	{		
		return FMRES_IGNORED
	}
	
	new iWeaponId = get_user_weapon(id)
	
	if (!IsSecondaryWpn(iWeaponId))
	{
		return FMRES_IGNORED
	}
	
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId < 0)
	{	
		if (CheckPlayerBit(bit_NormalIronSight, id))
		{
			if (cs_get_user_shield(id))
				ClearPlayerBit(bit_NormalIronSight, id)
				
			set_cd(cd_handle, CD_flNextAttack, get_gametime() + 0.01)
			
		}
		
			
		return FMRES_IGNORED
	}
	
	if (iWeaponId != nt_get_sec_wpn_real_id(iSecondaryWpnId))
		return FMRES_IGNORED
	
	new iBulletType
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BULLET_TYPE, iBulletType)
	
	if (nt_sw_is_user_ads(id))
	{
		new iAdsConfig 
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_ADS_CONFIG, iAdsConfig)
		
		new iWeaponEnt = fm_get_active_item(id)
		
		if (!iWeaponEnt || !pev_valid(iWeaponEnt))
			return FMRES_IGNORED
			
		set_cd(cd_handle, CD_flNextAttack, get_gametime() + 0.01)
	}
	
	new iFireFlag
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WPN_FIRE_FLAG, iFireFlag)
	
	if (iFireFlag & FIRE_MINIGUN)
	{
		new iAttackStage = get_trie_int(iPlayerInfo[id], SECTION_ATTACK_STAGE, STAGE_NONE)
		
		if (iAttackStage == STAGE_FIRE)
		{
			if (get_gametime() >= fAttackTime[id])
				delete_trie_key(iPlayerInfo[id], SECTION_ATTACK_STAGE)
				
			if (iFireFlag & FIRE_ON_RELEASE)
				set_cd(cd_handle, CD_flNextAttack, get_gametime() + 0,01)
		}
		else
		{
			if (iAttackStage != STAGE_FIRE_RELEASE)
				set_cd(cd_handle, CD_flNextAttack, get_gametime() + 0,01)
			else
			{
				if (get_gametime() >= fAttackTime[id])
					delete_trie_key(iPlayerInfo[id], SECTION_ATTACK_STAGE)
			}
		}
		
	}
	
	return FMRES_IGNORED
}



public fw_WpnBoxTouch(iEnt, id)
{
	if (!is_user_alive(id))
		return PLUGIN_CONTINUE
		
	if (!iEnt || !pev_valid(iEnt))
		return PLUGIN_CONTINUE
	
	if (!IsWeaponBoxCanTouch(iEnt))
		return PLUGIN_HANDLED
		
	if (!IsCsRedWpnBox(iEnt))
		return PLUGIN_CONTINUE
		
	new iState = pev(iEnt, pev_iuser4)
	
	if (iState == WpnBoxSecondaryReady)
	{
		
		if (!can_player_touch_wpnbox(id))
			return PLUGIN_HANDLED
		
		new iSecondaryWpnId = pev(iEnt, pev_iuser3)
		
		if (cs_get_user_shield(id))
			return PLUGIN_HANDLED;
			
		if (UT_GetPlayerSecondaryWpn(id))
			return PLUGIN_HANDLED
			
		new iWeaponId = nt_get_sec_wpn_real_id(iSecondaryWpnId)
		
		new szWeaponName[32]
		get_weaponname(iWeaponId, szWeaponName, sizeof szWeaponName - 1)
		
		nt_set_player_sec_wpn(id, iSecondaryWpnId)
		
		ClearPlayerBit(g_AutomaticMode, id);
		ClearPlayerBit(g_SpecialBurstMode, id);
		ClearPlayerBit(g_SpecialBurstFamas, id);
		
		new iWeaponEnt = fm_give_item(id, szWeaponName)
		
		if (iWeaponEnt < 0|| !pev_valid(iWeaponEnt))
			return PLUGIN_HANDLED
			
			/***************************************/
			
		new szKey[128]
		new iBufferInfo
		
		formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_SLOT_FLAG, iEnt)
		iBufferInfo = get_trie_int(iWeaponBoxInfo, szKey)
		delete_trie_key(iWeaponBoxInfo, szKey)
		
		
		if (iBufferInfo & BFUNC_BURST_ON)
			SetPlayerBit(g_SpecialBurstMode, id)
		else if (iBufferInfo & BFUNC_AUTO_ON)
			SetPlayerBit(g_AutomaticMode, id)
		else if (iBufferInfo & BFUNC_FBURST_ON)
			SetPlayerBit(g_SpecialBurstFamas, id)
			
			/***************************************/
			
			
		engclient_cmd(id, szWeaponName)
		
		formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_SLOT_AMMO, iEnt)
		cs_set_weapon_ammo(iWeaponEnt, get_trie_int(iWeaponBoxInfo, szKey))
		delete_trie_key(iWeaponBoxInfo, szKey)
		
		formatex(szKey, sizeof szKey - 1, "%s_%d", PREFIX_SLOT_BPA, iEnt)
		UT_SetUserBPA(id, iWeaponId, get_trie_int(iWeaponBoxInfo, szKey))
		delete_trie_key(iWeaponBoxInfo, szKey)
		
		set_weapon_ability(iWeaponEnt, iSecondaryWpnId)	
		ExecuteHamB(Ham_Item_Deploy, iWeaponEnt)
		
		//set_pev(iEnt, pev_nextthink, get_gametime() + 0.001)
		
		fm_remove_weaponbox(iEnt)
		
		return PLUGIN_HANDLED
	}
	else if (iState == WpnBoxNormalSecondaryReady)
	{
		
		if (!can_player_touch_wpnbox(id))
			return PLUGIN_HANDLED
	
		if (!is_user_bot(id) && cs_get_user_shield(id))
			return PLUGIN_HANDLED
			
		if (user_has_secondary(id))
			return PLUGIN_HANDLED	
			
		new iWeaponId = pev(iEnt, pev_iuser3)
		
		new szWeaponName[32]
		get_weaponname(iWeaponId, szWeaponName, sizeof szWeaponName - 1)
		
		new iWeaponEnt = fm_give_item(id, szWeaponName)
		
		if (iWeaponEnt < 0 || !pev_valid(iWeaponEnt))
			return PLUGIN_HANDLED
			
		engclient_cmd(id, szWeaponName)
		
		new szKey[128]
		
		formatex(szKey, sizeof szKey - 1, "%s_-1_%d", PREFIX_SLOT_AMMO, iEnt)
		cs_set_weapon_ammo(iWeaponEnt, get_trie_int(iWeaponBoxInfo, szKey))
		delete_trie_key(iWeaponBoxInfo, szKey)
		
		formatex(szKey, sizeof szKey - 1, "%s_-1_%d", PREFIX_SLOT_BPA, iEnt)
		UT_SetUserBPA(id, iWeaponId, get_trie_int(iWeaponBoxInfo, szKey))
		delete_trie_key(iWeaponBoxInfo, szKey)
		
		ExecuteHamB(Ham_Item_Deploy, iWeaponEnt)
		
		fm_remove_weaponbox(iEnt)
		
		return PLUGIN_HANDLED
	}
	return PLUGIN_CONTINUE
}			

public fw_ArmouryTouch(iEnt, id)
{
	if (!is_user_alive(id))
		return PLUGIN_CONTINUE
			
	if (!pev_valid(iEnt))
		return PLUGIN_CONTINUE
		
	new iArmouryId = pev(iEnt, pev_ArmouryId)
	new iArmouryType = pev(iEnt, pev_ArmouryType)
	
	//new iArmouryWpnType = pev(iEnt, pev_ArmouryWpnType)
	
	if (iArmouryType != ARMOURY_SECONDARY)
		return PLUGIN_CONTINUE
		
	if (!can_player_touch_armoury(id))
		return PLUGIN_HANDLED
		
	
	if (user_has_weapon(id, CSW_DEAGLE) || user_has_weapon(id, CSW_GLOCK18) || user_has_weapon(id, CSW_USP) || user_has_weapon(id, CSW_P228) || user_has_weapon(id, CSW_FIVESEVEN) || user_has_weapon(id, CSW_ELITE))
		return PLUGIN_HANDLED
		
	if (cs_get_user_shield(id))
		return PLUGIN_HANDLED;

	nt_give_player_sec_wpn(id, iArmouryId)
	
	ExecuteForward(ifw_ArmouryPickUp, ifw_Result, id, iEnt)
	
	engfunc(EngFunc_RemoveEntity, iEnt)
	return PLUGIN_HANDLED
}

public MSG_DeathMsg(msg_id, msg_dest, msg_entity)
{
	new szTruncatedWeapon[33], iAttacker
	get_msg_arg_string(4, szTruncatedWeapon, sizeof szTruncatedWeapon - 1)
	
	// Get attacker and victim
	iAttacker = get_msg_arg_int(1)
		
	if (!is_user_alive(iAttacker))
		return PLUGIN_CONTINUE
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(iAttacker)
	
	if (iSecondaryWpnId < 0)
		return PLUGIN_CONTINUE
		
	new iWeaponId = nt_get_sec_wpn_real_id(iSecondaryWpnId)
	
	if (iSecondaryWpnId >-1 && get_user_weapon(iAttacker) == iWeaponId)
	{
		new iOriginalHud
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_ORIGINAL, iOriginalHud)
		
		if (iOriginalHud)
			return PLUGIN_CONTINUE
			
		new szWeaponName[32]
		get_weaponname(iWeaponId, szWeaponName, sizeof szWeaponName - 1)
		
		replace(szWeaponName, sizeof szWeaponName - 1, "weapon_", "")
		
		if(equal(szTruncatedWeapon, szWeaponName))
		{
			new szWeaponHudKill[32]
			TrieGetString(weapon_StringInfo[iSecondaryWpnId], SECTION_HUD_KILL, szWeaponHudKill, sizeof szWeaponHudKill - 1)
			set_msg_arg_string(4, szWeaponHudKill)
		}
	}
	
	return PLUGIN_CONTINUE
}

	
public MSG_WeapPickUp(iMSGID, MSG_DEST, MSG_ENT)
{
	new iWeaponId = get_msg_arg_int(1)
	
	if (!IsSecondaryWpn(iWeaponId))
		return PLUGIN_CONTINUE
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(MSG_ENT)
	
	if (iSecondaryWpnId < 0)
		return PLUGIN_CONTINUE
		
	return PLUGIN_HANDLED
}
public csred_PlayerSpawnPost(id)
{
	if (!is_user_connected(id))
		return
	
	if (!is_user_alive(id))
		return

	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId > -1)
	{
		new iWeaponId = nt_get_sec_wpn_real_id(iSecondaryWpnId)
		
		if (!user_has_weapon(id, iWeaponId))
			nt_set_player_sec_wpn(id, -1)
	}
	
}			

public fw_OnTraceLine(Float:vector_start[3], Float:vector_end[3], ignored_monster, id, tracehandle)
{
	if (!is_user_alive(id))
		return
	
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId < 0)
		return
		
	new iWeaponId = nt_get_sec_wpn_real_id(iSecondaryWpnId)
	
	if (get_user_weapon(id) != iWeaponId)
		return
		
	new iBulletType
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BULLET_TYPE, iBulletType)
	
	if(iBulletType == BULLET_TYPE_SHIELD_DESTRUCTION)
	{
		if (get_tr2(tracehandle, TR_iHitgroup) == HIT_SHIELD)
			set_tr2(tracehandle, TR_iHitgroup, HIT_GENERIC)
		
	}
}

public fw_TakeDamage(victim, inflictor, attacker, Float:damage, damagebit)
{
	if (!is_user_connected(attacker))
		return HAM_IGNORED
	
	if (!is_user_connected(victim) || !is_user_alive(victim))
		return HAM_IGNORED
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(attacker)
	
	if (iSecondaryWpnId < 0)
		return HAM_IGNORED
	
	new iWeaponId = get_user_weapon(attacker)
	
	if (iWeaponId != nt_get_sec_wpn_real_id(iSecondaryWpnId))
		return HAM_IGNORED
	
	
	if (!(damagebit & DMG_BULLET))
		return HAM_IGNORED
	
	
	new Float:fWeaponDamage
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_DAMAGE, fWeaponDamage)
	
		
	new iBulletType
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BULLET_TYPE, iBulletType)
	
	if (iBulletType == BULLET_TYPE_SHOTGUN)
	{
		SetHamParamFloat(4, fWeaponDamage)
		return HAM_IGNORED
	}
		
	new Float:fMulti = 1.0
	
	if (is_user_bot(attacker) && !is_user_bot(victim))
		fMulti *= random_float(1.5, 2.0)
	SetHamParamFloat(4, damage * fWeaponDamage * fMulti)
	
	return HAM_IGNORED
}


public csred_PlayerKilledPost(iVictim, iKiller)
{
	if (!IsValidPlayer(iVictim))
		return
		
	cs_set_user_zoom(iVictim, CS_RESET_ZOOM, 0)
	if (CheckPlayerBit(g_bUsingZoomFunc, iVictim))	ClearPlayerBit(g_bUsingZoomFunc, iVictim) 
	
	remove_task(iVictim + TASK_IRONSIGHT)
	remove_task(iVictim - TASK_IRONSIGHT)
	
}

public csred_WeaponTraceAttack(iVictim, iAttacker, Float:fDamage, Float:X, Float:Y, Float:Z, iTraceResult, damagebits)
{
	if (!is_user_connected(iAttacker))
		return PLUGIN_CONTINUE
	
	new iSecondaryWpnId = nt_get_user_sec_wpn(iAttacker)
	new iWeaponId = get_user_weapon(iAttacker)	
	
	if (iSecondaryWpnId < 0)
	{
		if (CheckPlayerBit(bit_NormalIronSight, iAttacker) && is_ads_weapon(iWeaponId))
		{
			new Float:fOrigin[3]
			get_tr2(iTraceResult, TR_vecEndPos, fOrigin)
				
			new iOrigin[3]
				
			FVecIVec(fOrigin, iOrigin)
				
			
			emessage_begin(MSG_BROADCAST, SVC_TEMPENTITY)
			ewrite_byte(TE_WORLDDECAL)
			ewrite_coord(iOrigin[0])
			ewrite_coord(iOrigin[1])
			ewrite_coord(iOrigin[2])
			ewrite_byte(iDecal)
			emessage_end()
				
				
			emessage_begin(MSG_BROADCAST, SVC_TEMPENTITY)
			ewrite_byte(TE_GUNSHOTDECAL)
			ewrite_coord(iOrigin[0])
			ewrite_coord(iOrigin[1])
			ewrite_coord(iOrigin[2])
			ewrite_short(iAttacker)
			ewrite_byte(iDecal)
			emessage_end()
		}
		return PLUGIN_CONTINUE
	}
	
	
	if (iWeaponId != nt_get_sec_wpn_real_id(iSecondaryWpnId))
		return PLUGIN_CONTINUE
		
	new iCreatableDecal = 1
		
	if (nt_sw_is_user_ads(iAttacker))
	{
		new iAdsConfig
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_ADS_CONFIG, iAdsConfig)
		
		
		new Float:fOrigin[3]
		get_tr2(iTraceResult, TR_vecEndPos, fOrigin)
				
		new iOrigin[3]
				
		FVecIVec(fOrigin, iOrigin)
			
				
		emessage_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		ewrite_byte(TE_WORLDDECAL)
		ewrite_coord(iOrigin[0])
		ewrite_coord(iOrigin[1])
		ewrite_coord(iOrigin[2])
		ewrite_byte(iDecal)
		emessage_end()
				
				
		emessage_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		ewrite_byte(TE_GUNSHOTDECAL)
		ewrite_coord(iOrigin[0])
		ewrite_coord(iOrigin[1])
		ewrite_coord(iOrigin[2])
		ewrite_short(iAttacker)
		ewrite_byte(iDecal)
		emessage_end()
			
		iCreatableDecal = 0
			
	}
	
	if (CheckPlayerBit(g_SpecialBurstFamas, iAttacker) && iCreatableDecal)
	{
		new Float:fOrigin[3]
		get_tr2(iTraceResult, TR_vecEndPos, fOrigin)
					
		new iOrigin[3]
					
		FVecIVec(fOrigin, iOrigin)
					
					
		emessage_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		ewrite_byte(TE_WORLDDECAL)
		ewrite_coord(iOrigin[0])
		ewrite_coord(iOrigin[1])
		ewrite_coord(iOrigin[2])
		ewrite_byte(iDecal)
		emessage_end()
					
					
		emessage_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		ewrite_byte(TE_GUNSHOTDECAL)
		ewrite_coord(iOrigin[0])
		ewrite_coord(iOrigin[1])
		ewrite_coord(iOrigin[2])
		ewrite_short(iAttacker)
		ewrite_byte(iDecal)
		emessage_end()
	}
	
	return PLUGIN_CONTINUE
}

public csred_PlayerStripWeapons(id)	
	nt_set_player_sec_wpn(id, -1)

public csred_EventPlaying(id, iCSWPN_Id, iEventId, iWeaponEnt)
{
	
	if (!is_user_connected(id))
		return
		
	if (!is_user_alive(id))
		return 
		
	new iWeaponId = EventToWpnId(iEventId)
	
	if (!iWeaponId)
		return
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	new Float:fOrigin[3]
	pev(id, pev_origin, fOrigin)
	
	if (iSecondaryWpnId > -1)
	{
		
		new Float:fWeaponDamage
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_DAMAGE, fWeaponDamage)
		
		new iBulletType
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BULLET_TYPE, iBulletType)
		
		if (iBulletType == BULLET_TYPE_SHOTGUN)
		{
			new iShots
			new Float:flSpread
			
			TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_SHOTGUN_SHOTS, iShots)
			TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_SHOTGUN_SPREAD, flSpread)
			UT_CreateShotgunBullet(id, iWeaponEnt, iShots, flSpread, DMG_BULLET|DMG_NEVERGIB, fWeaponDamage, SHOTGUN_PROPERTY_DIS)
		}
		
		if (cs_get_weapon_silen(iWeaponEnt))
		{
			new iSoundId
			TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_SOUND_ID_SILENT, iSoundId)
			spawnStaticSound( 0, fOrigin, iSoundId, VOL_NORM, ATTN_NORM, PITCH_NORM, 0)
		}
		else if (cs_get_weapon_burst(iWeaponEnt)) 
		{
			new iSoundId
			TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_SOUND_ID_BURST, iSoundId)
			spawnStaticSound( 0, fOrigin, iSoundId, VOL_NORM, ATTN_NORM, PITCH_NORM, 0)
		}
		else
		{
			new iSoundId
			TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_SOUND_ID, iSoundId)
			spawnStaticSound( 0, fOrigin, iSoundId, VOL_NORM, ATTN_NORM, PITCH_NORM, 0)
		}
		
		
		
		new Float:fDelay 
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_DELAY, fDelay)
		
		if (nt_sw_is_user_ads(id))
		{
			new iAdsConfig
			TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_ADS_CONFIG, iAdsConfig)
			
			new iShotAnimation = Get_CSWPN_MaxAnimation(iWeaponId) + ANIM_IRONSIGHT_SHOOT_3
				
			if (cs_get_weapon_silen(iWeaponEnt))
				iShotAnimation += 1
					
			UT_PlayWeaponAnim(id, iShotAnimation)
			
			if (iAdsConfig & ADS_NEW_ROF)	
				TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_ADS_ROF, fDelay)
			
		}
		
		if (nt_get_sec_wpn_special(iSecondaryWpnId) == SPECIAL_REACTIVE_ZOOM)
		{
			fm_set_last_zoom(id, UT_GetPlayerFOV(id))
			fm_set_resume_zoom(id, true)
				
			UT_SetPlayerFOV(id, 90)	
		}
		
		fm_set_next_attack(id, fDelay)
	}
	else 
	{
		new iSpecial
		
		if (iWeaponId == CSW_GLOCK18)
		{
			iSpecial = cs_get_weapon_burst(iWeaponEnt)
			 
			spawnStaticSound( 0, fOrigin, UT_Get_CS_SoundIndex(iWeaponId, iSpecial), VOL_NORM, ATTN_NORM, PITCH_NORM, 0)
			
		}
		else if (iWeaponId == CSW_USP)
		{
			iSpecial = cs_get_weapon_silen(iWeaponEnt)
			 
			spawnStaticSound( 0, fOrigin, UT_Get_CS_SoundIndex(iWeaponId, iSpecial), VOL_NORM, ATTN_NORM, PITCH_NORM, 0)
			
		}
		else
		{
			
			spawnStaticSound( 0, fOrigin, UT_Get_CS_SoundIndex(iWeaponId, 0), VOL_NORM, ATTN_NORM, PITCH_NORM, 0)
			
		}
		
		if (nt_sw_is_user_ads(id))
		{
			new iShotAnimation = Get_CSWPN_MaxAnimation(iWeaponId) + ANIM_IRONSIGHT_SHOOT_3
					
			if (cs_get_weapon_silen(iWeaponEnt))
				iShotAnimation += 1
						
			UT_PlayWeaponAnim(id, iShotAnimation)
			
			new Float:flDelay = UT_Get_CS_ROF_ADS(iWeaponId)
			fm_set_next_attack(id, flDelay)
			
		}		
		else
		{
			new Float:flDelay = UT_Get_CS_ROF(iWeaponId)
			fm_set_next_attack(id, flDelay)
		}
	}
	return
}

public csred_WpnPrimAtk_Pre(id, iEnt, iWeaponId)
{
	if (!IsSecondaryWpn(iWeaponId))
		return
		
	if (is_user_bot(id))
		return
		
	if (!cs_get_weapon_ammo(iEnt))
		return
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	new iFov = UT_GetPlayerFOV(id)
	
	
	
	new Float:fVelocity[3]					
	pev(id, pev_velocity, fVelocity)
	
	new iFlag = pev(id, pev_flags)
	
	new Float:fMultiply_Accuracy = 1.0
	
	if (iFlag & FL_DUCKING)
	{					
		if (!fVelocity[0] && !fVelocity[1])
			fMultiply_Accuracy += ACCURACY_CROUCH
		else	fMultiply_Accuracy += ACCURACY_CROUCH_MOVING
	}
	else
	{			
		if (!fVelocity[0] && !fVelocity[1])
			fMultiply_Accuracy += ACCURACY_STAND
		else	fMultiply_Accuracy += ACCURACY_RUNNING					
	}
	
	
	if (iFov > 90)
		iFov = 90
	else if (iFov < 1)
		iFov = 90
		
	
	fMultiply_Accuracy += FOV_ACCURACY_INCREASE * (90 - iFov)	
	
	if (nt_sw_is_user_ads(id))
		fMultiply_Accuracy += ACCURACY_ADS
	
	new Float:fAccuracy = UT_Get_CS_Accuracy(iWeaponId)
	
	if (iSecondaryWpnId >= 0)
	{
		if (iWeaponId != nt_get_sec_wpn_real_id(iSecondaryWpnId))
			return
		
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_ACCURACY, fAccuracy)
		
		if (fAccuracy <= 0.0)
			fAccuracy = UT_Get_CS_Accuracy(iWeaponId)	
	}
	
	if (!is_user_bot(id))
		fm_set_accuracy(iEnt, fAccuracy * fMultiply_Accuracy)
	
	pev(id,pev_punchangle,cl_pushangle[id])
	
	
	return 
}

public csred_WpnPrimAtk_Post(id, iEnt, iWeaponId)
{
	if (!IsSecondaryWpn(iWeaponId))
		return PLUGIN_CONTINUE
		
	new Float:push[3]
	pev(id,pev_punchangle,push)
	xs_vec_sub(push,cl_pushangle[id],push)
	
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	new Float:fMultiply = 1.0
	
	if(iSecondaryWpnId > -1)
	{
		if (iWeaponId != nt_get_sec_wpn_real_id(iSecondaryWpnId))
			return PLUGIN_CONTINUE
		
		new Float:fRecoil
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_RECOIL, fRecoil)
		
		if (!is_user_bot(id))
		{
			if (nt_sw_is_user_ads(id))
				fMultiply -= 0.25 // Decrease by 25%
				
			xs_vec_mul_scalar(push, fRecoil * fMultiply ,push)
			xs_vec_add(push,cl_pushangle[id],push)
			set_pev(id,pev_punchangle,push)
		}
				
		
		new iBasicSetting
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BASIC_SETTING, iBasicSetting)
				
		if (CheckPlayerBit(g_AutomaticMode, id))
		{		
			if(get_pdata_int(iEnt, m_iShotFired, 4))
				set_pdata_int(iEnt, m_iShotFired, 0, 4)
		}
		else
		{
			engclient_cmd(id, "-attack")
			console_cmd(id, "-attack")
		}
		
		if ((iBasicSetting & ST_HL_CROSSHAIR) && !(iBasicSetting & ST_NO_CROSSHAIR))
		{
			if ( 0 < UT_GetPlayerFOV(id) <= 90)
				UT_HL_Crosshair_Toggle(id, 1, 1)
		}
	}
	else
	{
		new Float:fRecoil = 1.0 
		
		
		if (CheckPlayerBit(bit_NormalIronSight, id) && is_ads_weapon(iWeaponId))
			fRecoil = UT_Get_CS_Recoil_Ads(iWeaponId)
			
		xs_vec_mul_scalar(push, fRecoil * fMultiply ,push)
		xs_vec_add(push,cl_pushangle[id],push)
		set_pev(id,pev_punchangle,push)
		
		engclient_cmd(id, "-attack")
		client_cmd(id, "-attack")
	}			
	return PLUGIN_HANDLED
}

public WU_WpnPlayAnim_Pre(id, iEnt, iWeaponId, iAnim)
{
	if (!IsSecondaryWpn(iWeaponId))
		return PLUGIN_CONTINUE
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if(iSecondaryWpnId > -1)
	{
		if (!nt_sw_is_user_ads(id))
			return PLUGIN_CONTINUE
			
		new iIdleAnimation = 0
			
		new iSilent = cs_get_weapon_silen(iEnt)
			
		new iAnim = pev(id, pev_weaponanim)
			
		if (iWeaponId == CSW_USP) 
		{
			if (!iSilent)
				iIdleAnimation = 8
		}
			
		if (iAnim == iIdleAnimation)
		{
			new iIronSightIdleAnim = Get_CSWPN_MaxAnimation(iWeaponId) + ANIM_IRONSIGHT_IDLE_3
					
			if (iSilent)
				iIronSightIdleAnim += 1
						
			UT_PlayWeaponAnim(id, iIronSightIdleAnim)
			set_pev(id, pev_weaponanim, iIronSightIdleAnim)
		}
			
		return PLUGIN_HANDLED
			
	}
	else
	{
		if (!CheckPlayerBit(bit_NormalIronSight, id))
			return PLUGIN_CONTINUE
			
		new iAnim = pev(id, pev_weaponanim)
			
		new iIdleAnimation = 0
			
		new iWeaponEnt = fm_get_active_item(id)
			
		if (!iWeaponEnt || !pev_valid(iWeaponEnt))
			return FMRES_IGNORED
				
		new iSilent = cs_get_weapon_silen(iWeaponEnt)
			
		
		if (iWeaponId == CSW_USP) 
		{
			if (!iSilent)
				iIdleAnimation = 8
		}
		
		if (iAnim == iIdleAnimation)
		{
			new iIronSightIdleAnim = Get_CSWPN_MaxAnimation(iWeaponId) + ANIM_IRONSIGHT_IDLE_3
					
			if (iSilent)
				iIronSightIdleAnim += 1
						
			UT_PlayWeaponAnim(id, iIronSightIdleAnim)
			set_pev(id, pev_weaponanim, iIronSightIdleAnim)
		}
			
		return PLUGIN_HANDLED
		
	}
	
	return PLUGIN_CONTINUE
}

public csred_WpnSecAtk_Pre(id, iEnt, iWeaponId)
{
	if (iWeaponId != CSW_USP)
		return PLUGIN_CONTINUE
	
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId < 0)
	{	
		if (!cs_get_user_shield(id))
			return PLUGIN_HANDLED
	}
	else
	{
		new iWpnFunc = nt_get_sec_wpn_func(iSecondaryWpnId)
		
		if (iWpnFunc)
			return PLUGIN_HANDLED
	}
	return PLUGIN_CONTINUE
}


public csred_WpnReload_Post(id, iEnt, iWeaponId)
{
	
	if (!IsSecondaryWpn(iWeaponId))
		return
		
	if (CheckPlayerBit(bit_ExtraBulletInChamber, id))	
		ClearPlayerBit(bit_ExtraBulletInChamber, id)
	
	
	remove_task(id + TASK_FAMAS_BURST)
	
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (UT_GetPlayerFOV(id) != 90)
		UT_SetPlayerFOV(id, 90)
		
	UT_CS_Crosshair_Toggle(id, 0, 1)
	
	if (iSecondaryWpnId  >= 0)
	{
		if (iWeaponId != nt_get_sec_wpn_real_id(iSecondaryWpnId))
			return
			
		new iBasicSetting
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BASIC_SETTING, iBasicSetting)
		
		if (cs_get_weapon_ammo(iEnt))
		{
			
			if (!(iBasicSetting & ST_NEW_RELOAD) && (iBasicSetting & ST_ADDITION_BULLET))
				if (!CheckPlayerBit(bit_ExtraBulletInChamber, id))
					SetPlayerBit(bit_ExtraBulletInChamber, id)
		}
			
		fm_set_weapon_reload(iEnt, 1)
			
		new Float:fReloadTime
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_RELOAD_TIME, fReloadTime)
		
		(fReloadTime > 0.0)?fm_set_next_attack(id, fReloadTime):fm_set_next_attack(id, UT_Get_CS_Reload_Time(iWeaponId))
		
		if (nt_sw_is_user_ads(id))
			UT_PlayWeaponAnim(id, UT_Get_CS_Reload_Anim(iWeaponId, cs_get_weapon_silen(iEnt)))
			
		if (CheckPlayerBit(g_bUsingZoomFunc, id))
			ClearPlayerBit(g_bUsingZoomFunc, id)
			
		cs_set_user_zoom(id, CS_RESET_ZOOM, 0)
			
		delete_trie_key(iPlayerInfo[id], SECTION_USER_ZOOM_LVL)
		
		if (iBasicSetting & ST_NEW_RELOAD)
		{
			if (CheckPlayerBit(b_CancelReloading, id))	
				ClearPlayerBit(b_CancelReloading, id)
			
			fm_set_next_attack(id, INFINITIVE_RELOAD_TIME)
				
			remove_task(id + TASK_PREPARE_INSERT)
			remove_task(id + TASK_INSERT_AMMO)
			remove_task(id + TASK_FINISH_INSERTING)
				
			if (CheckPlayerBit(b_CancelReloading, id))	
				ClearPlayerBit(b_CancelReloading, id)
				
			new Float:fWeaponReloadTime
			TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_RELOAD_TIME, fWeaponReloadTime)
			set_task(fWeaponReloadTime, "PrepareReloading_TASK" ,id + TASK_PREPARE_INSERT)
		}
	}
	else
	{
		fm_set_weapon_reload(iEnt, 1)
		
		new Float:fReloadTime = UT_Get_CS_Reload_Time(iWeaponId)
		fm_set_next_attack(id, fReloadTime)
		
		if (CheckPlayerBit(bit_NormalIronSight, id))	
		{
			ClearPlayerBit(bit_NormalIronSight, id)
			UT_PlayWeaponAnim(id, UT_Get_CS_Reload_Anim(iWeaponId, (iWeaponId == CSW_USP)?cs_get_weapon_silen(iEnt):0))
		}
		
		UT_CS_Crosshair_Toggle(id, 0, 1)
		
		if (cs_get_weapon_ammo(iEnt))
			if (!CheckPlayerBit(bit_ExtraBulletInChamber, id))	
				SetPlayerBit(bit_ExtraBulletInChamber, id)
			
		
	}
}
		
public PrepareReloading_TASK(TASKID)
{
	new id = TASKID - TASK_PREPARE_INSERT
	
	
	if (!is_user_alive(id))
		return
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId < 0)
		return
		
	new iWeaponId = get_user_weapon(id)
	
	if (iWeaponId != nt_get_sec_wpn_real_id(iSecondaryWpnId))
		return
		
	new iEnt = fm_get_active_item(id)
	
	if (!iEnt || !pev_valid(iEnt))
		return
		
	if (cs_get_weapon_ammo(iEnt) >= nt_get_sec_wpn_clip(iSecondaryWpnId))
	{
		InsertAmmo_TASK( id + TASK_INSERT_AMMO)
		return
	}
	new iInsertAnimation = Get_CSWPN_MaxAnimation(iWeaponId) + ANIM_INSERT_BULLET
	
	if (cs_get_weapon_silen(iEnt))
		iInsertAnimation += 1
		
	UT_PlayWeaponAnim(id, iInsertAnimation)
	
	remove_task(TASKID)
	remove_task(id + TASK_INSERT_AMMO)
	
	new Float:fInsertTime
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_INSERT_TIME, fInsertTime)
	set_task(fInsertTime, "InsertAmmo_TASK", id + TASK_INSERT_AMMO)
}

public InsertAmmo_TASK(TASKID)
{
	new id = TASKID - TASK_INSERT_AMMO
	
	if (!is_user_alive(id))
		return
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId < 0)
		return
		
	new iWeaponId = get_user_weapon(id)
	
	if (iWeaponId != nt_get_sec_wpn_real_id(iSecondaryWpnId))
		return
		
	new iEnt = fm_get_active_item(id)
	
	if (!pev_valid(iEnt))
		return
		
	new iClip = cs_get_weapon_ammo(iEnt)
	new iBpa = cs_get_user_bpammo(id, iWeaponId)
	
	if (iClip >= nt_get_sec_wpn_clip(iSecondaryWpnId) || !iBpa)
	{
		//	Finish Reloading
		
		new iAfterAnimation = Get_CSWPN_MaxAnimation(iWeaponId) + ANIM_AFTER_INSERT_BULLET
		
		if (cs_get_weapon_silen(iEnt))
			iAfterAnimation += 1
			
		remove_task(TASKID)
		remove_task(id + TASK_FINISH_INSERTING)
		
		UT_PlayWeaponAnim(id, iAfterAnimation)
		
		
		new Float:fAfterInsertTime
		TrieSetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_AFTER_INSERT_TIME, fAfterInsertTime)
		set_task(fAfterInsertTime, "FinishReloading_TASK", id + TASK_FINISH_INSERTING)
		return
	}
	
	iClip++
	iBpa--
	
	cs_set_weapon_ammo(iEnt, iClip)
	UT_SetUserBPA(id, iWeaponId, iBpa)
	
	if (iClip >= nt_get_sec_wpn_clip(iSecondaryWpnId) || !iBpa || CheckPlayerBit(b_CancelReloading, id))
	{
		//	Finish Reloading
		
		new iAfterAnimation = Get_CSWPN_MaxAnimation(iWeaponId) + ANIM_AFTER_INSERT_BULLET
		
		if (cs_get_weapon_silen(iEnt))
			iAfterAnimation += 1
			
		remove_task(TASKID)
		remove_task(id + TASK_FINISH_INSERTING)
		
		UT_PlayWeaponAnim(id, iAfterAnimation)
		
		
		new Float:fAfterInsertTime
		TrieSetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_AFTER_INSERT_TIME, fAfterInsertTime)
		set_task(fAfterInsertTime, "FinishReloading_TASK", id + TASK_FINISH_INSERTING)
		return
	}
	
	new iInsertAnimation = Get_CSWPN_MaxAnimation(iWeaponId) + ANIM_INSERT_BULLET
	
	if (cs_get_weapon_silen(iEnt))
		iInsertAnimation += 1
		
	UT_PlayWeaponAnim(id, iInsertAnimation)
	
	remove_task(TASKID)
	
	new Float:fInsertTime
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_INSERT_TIME, fInsertTime)
	set_task(fInsertTime, "InsertAmmo_TASK", id + TASK_INSERT_AMMO)
}

public FinishReloading_TASK(TASKID)
{
	new id = TASKID - TASK_FINISH_INSERTING
	
	if (!is_user_alive(id))
		return
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId < 0)
		return
		
	if (get_user_weapon(id) != nt_get_sec_wpn_real_id(iSecondaryWpnId))
		return
		
	new iEnt = fm_get_active_item(id)
	
	if (!iEnt || !pev_valid(iEnt))
		return
		
		
	fm_set_weapon_reload(iEnt, 0)
	fm_set_next_attack(id, 0.0)
	
	if (CheckPlayerBit(b_CancelReloading, id))	
		ClearPlayerBit(b_CancelReloading, id)
		
	new iBasicSetting
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BASIC_SETTING, iBasicSetting)
	
	if (!(iBasicSetting & ST_NO_CROSSHAIR))
		UT_CS_Crosshair_Toggle(id, 1, 1)
	else	UT_CS_Crosshair_Toggle(id, 0, 1)
			
	if (!(iBasicSetting & ST_NO_CROSSHAIR) && (iBasicSetting & ST_HL_CROSSHAIR))
		UT_HL_Crosshair_Toggle(id, 1, 1)
}

public csred_WpnPostFrame(id, iEnt, iWeaponId)
{
	if (!IsSecondaryWpn(iWeaponId))
		return
		
		
	new fInReload ; fInReload = fm_get_weapon_reload(iEnt)
	new Float:flNextAttack ; flNextAttack = fm_get_next_attack(id)
	new iBpAmmo ; iBpAmmo = UT_GetUserBPA(id, iWeaponId)
	
	new iClip ; iClip = cs_get_weapon_ammo(iEnt)
	
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId < 0)
	{
		new iMaxClip ; iMaxClip = UT_Get_CS_DefaultClip(iWeaponId)
		
		new szSequence[32]
		UT_GetWeaponExtension(iWeaponId, 0, szSequence, sizeof szSequence - 1)	
		UT_SetPlayerSequence(id, szSequence) 
			
		
	
		if (!is_user_bot(id) && cs_get_user_shield(id))
		{
			new m_bHasShield = 2043
			engclient_cmd(id, "drop", "weapon_shield")
			set_pdata_int(id, m_bHasShield, false, 5)
		}
		
		if(fInReload && flNextAttack <= 0.0 )
		{
			if (CheckPlayerBit(bit_ExtraBulletInChamber, id))
			{
				if (iWeaponId == CSW_ELITE)
					iMaxClip += 2
				else
					iMaxClip += 1
					
			}
			new j = min(iMaxClip - iClip, iBpAmmo)
				
			cs_set_weapon_ammo(iEnt, iClip + j)
			
			if (j < 0)
				j = 0
				
			if (!is_user_bot(id))
				UT_SetUserBPA(id, iWeaponId, iBpAmmo-j)
			
			fm_set_weapon_reload(iEnt, 0)
			fInReload = 0
			
			if (cs_get_user_shield(id))
				UT_PlayWeaponAnim(id, 0)
			else
			{
				if (iWeaponId == CSW_USP)
				{
					if (cs_get_weapon_silen(iEnt))
						UT_PlayWeaponAnim(id, 0)
					else
						UT_PlayWeaponAnim(id, 8)
				}
				else UT_PlayWeaponAnim(id, 0)
			}
			
			
			UT_CS_Crosshair_Toggle(id, 1, 1)
		}
		
			
		if (task_exists(id + TASK_PREPARE_INSERT))
			remove_task(id + TASK_PREPARE_INSERT)
			
		if (task_exists(id + TASK_INSERT_AMMO))
			remove_task(id + TASK_INSERT_AMMO)
			
		if (task_exists(id + TASK_FINISH_INSERTING))
			remove_task(id + TASK_FINISH_INSERTING)
			
		
		
	}
	else
	{
		if (iWeaponId == nt_get_sec_wpn_real_id(iSecondaryWpnId) && cs_get_user_shield(id))
		{
			new m_bHasShield = 2043
			engclient_cmd(id, "drop", "weapon_shield")
			set_pdata_int(id, m_bHasShield, false, 5)
			UT_SendCurWeaponMsg(id, 1, iWeaponId, iClip, 1)
		}
		
		
		if (iWeaponId != nt_get_sec_wpn_real_id(iSecondaryWpnId))
		{
				
			if (task_exists(id + TASK_PREPARE_INSERT))
				remove_task(id + TASK_PREPARE_INSERT)
				
			if (task_exists(id + TASK_INSERT_AMMO))
				remove_task(id + TASK_INSERT_AMMO)
				
			if (task_exists(id + TASK_FINISH_INSERTING))
				remove_task(id + TASK_FINISH_INSERTING)
				
			return
		}
		
		
		
		new iMaxClip ; iMaxClip = nt_get_sec_wpn_clip(iSecondaryWpnId)
		
		if(fInReload && (flNextAttack <= 0.0) )
		{
			new iBasicSetting
			TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BASIC_SETTING, iBasicSetting)
		
			if (CheckPlayerBit(bit_ExtraBulletInChamber, id) && (iBasicSetting & ST_ADDITION_BULLET))
			{
				if (iBasicSetting & ST_DUAL_WEAPON)
					iMaxClip += 2
				else
					iMaxClip += 1
					
			}
			
			new j = min(iMaxClip - iClip, iBpAmmo)
			
			cs_set_weapon_ammo(iEnt, iClip + j)
			
			if (j < 0)
				j = 0
			
			if (!is_user_bot(id))
				UT_SetUserBPA(id, iWeaponId, iBpAmmo-j)
			
			fm_set_weapon_reload(iEnt, 0)
			
			fInReload = 0
			if (iWeaponId == CSW_USP)
			{
				if (cs_get_weapon_silen(iEnt))
					UT_PlayWeaponAnim(id, 0)
				else
					UT_PlayWeaponAnim(id, 8)
			}
			else 
				UT_PlayWeaponAnim(id, 0)
				
			if (!(iBasicSetting & ST_NO_CROSSHAIR))
				UT_CS_Crosshair_Toggle(id, 1, 1)
			else	UT_CS_Crosshair_Toggle(id, 0, 1)
			
			if (!(iBasicSetting & ST_NO_CROSSHAIR) && (iBasicSetting & ST_HL_CROSSHAIR))
				UT_HL_Crosshair_Toggle(id, 1, 1)
			
		}
		
		
		iWeaponId = nt_get_sec_wpn_real_id_2(iSecondaryWpnId)
	
		if (iWeaponId == 2) // Holding as Shield
			UT_SetPlayerSequence(id, "shielded")
		else	
		{
			new szSequence[32]
			UT_GetWeaponExtension(iWeaponId, 0, szSequence, sizeof szSequence - 1)
			
			UT_SetPlayerSequence(id, szSequence)
		}
		
	}
}



public csred_WpnAttachToPlayerPost(id, iEnt, iWeaponId)
{
	if (!is_user_alive(id))
		return
		
	if (!IsSecondaryWpn(iWeaponId))
		return
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId > -1 && nt_get_sec_wpn_real_id(iSecondaryWpnId) == iWeaponId)
	{
		new iWeaponBody 
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BACKWPN_MODEL, iWeaponBody)
		
		if (iWeaponBody > -1)
		{
			new szBackModel[128]
			TrieGetString(weapon_StringInfo[iSecondaryWpnId], SECTION_BACKWPN_MODEL, szBackModel, sizeof szBackModel - 1)
			
			engfunc(EngFunc_SetModel, iEnt, szBackModel)
			set_pev(iEnt, pev_body, iWeaponBody)
			fm_set_entity_visibility(iEnt, 1)
		}
		
		
		new szWeaponClass[32]
		TrieGetString(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_CLASS, szWeaponClass, sizeof szWeaponClass - 1)
			
		new iMaxClip = nt_get_sec_wpn_clip(iSecondaryWpnId)
		new iMaxBpa = nt_get_sec_wpn_bpa(iSecondaryWpnId)
			
		UT_UpdateWpnList(id, iWeaponId, iMaxClip, szWeaponClass, iMaxBpa, 0)
		
	}
	else
	{
		new szWeaponName[32]
		get_weaponname(iWeaponId, szWeaponName, sizeof szWeaponName - 1)
		new iClip = UT_Get_CS_DefaultClip(iWeaponId)
		cs_set_weapon_ammo(iEnt, iClip)
		new iBpa = UT_Get_CS_DefaultClip(iWeaponId)
		
		UT_UpdateWpnList(id, iWeaponId, iClip, szWeaponName, iBpa, 0)
	}
}


public csred_WpnDeploy_Pre(id, iEnt, iWeaponId)
{
	if (!is_user_alive(id))
		return
		
	delete_trie_key(iPlayerInfo[id], SECTION_ATTACK_STAGE)
	
	if (!IsSecondaryWpn(iWeaponId))
	{
		remove_all_tasks(id)
		
		
		ClearPlayerBit(bit_NormalIronSight, id)	;
		ClearPlayerBit(bit_LaserSightOn, id);
		ClearPlayerBit(b_CancelReloading, id);
		ClearPlayerBit(g_bUsingZoomFunc, id);
		
		return
	}
	
	delete_trie_key(iPlayerInfo[id], SECTION_USER_ZOOM_LVL)
	
	fm_set_weapon_reload(iEnt, 0)
	
	ClearPlayerBit(bit_NormalIronSight, id)	;
	ClearPlayerBit(bit_LaserSightOn, id);
	ClearPlayerBit(b_CancelReloading, id);
	ClearPlayerBit(g_bUsingZoomFunc, id);
	
	remove_all_tasks(id)
	
	if (UT_GetPlayerFOV(id) != 90)
		UT_SetPlayerFOV(id, 90)
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	new iParam[3]
	
	if (iSecondaryWpnId < 0 || nt_get_sec_wpn_real_id(iSecondaryWpnId) != iWeaponId)
	{
		iParam[0] = ~ST_NO_CROSSHAIR
		iParam[1] = iWeaponId
		iParam[2] = iEnt
		
		remove_task(id + TASK_CROSSHAIR_TOGGLE)
		set_task(0.1, "ToggleCrosshair_TASK", id + TASK_CROSSHAIR_TOGGLE, iParam, 3)
		fm_set_entity_visibility(iEnt, 0)
		return
	}
	
	new iBasicSetting
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BASIC_SETTING, iBasicSetting)
	
	iParam[0] = iBasicSetting
	iParam[1] = iWeaponId
	iParam[2] = iEnt
		
	remove_task(id + TASK_CROSSHAIR_TOGGLE)
	set_task(0.1, "ToggleCrosshair_TASK", id + TASK_CROSSHAIR_TOGGLE, iParam, 3)
		
	
}



public csred_WpnDeploy_Post(id, iEnt, iWeaponId)
{
	if (!is_user_alive(id))
		return
		
	if (!IsSecondaryWpn(iWeaponId))
		return
	
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	
	
	if (iSecondaryWpnId < 0 || nt_get_sec_wpn_real_id(iSecondaryWpnId) != iWeaponId)
	{
		
		new szSequence[32]
		UT_GetWeaponExtension(iWeaponId, 0, szSequence , sizeof szSequence - 1)
			
		new szAnimExtension[32]
		UT_GetPlayerSequence(id, szAnimExtension, sizeof szAnimExtension - 1)
			
		if (!equal(szSequence, szAnimExtension))
		{
			UT_SetPlayerSequence(id, szSequence)
		}
		
		set_v_SubBody(id, 0)
		return
	}
	
		
	new Float:fDeployTime
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_DEPLOY_TIME, fDeployTime)
	
	
	fm_set_next_attack(id, fDeployTime)
	
	
	
	set_pev(id, pev_weaponmodel2, "")
	
	
	new szModelBuffer[256], iModelSubBody
	
	TrieGetString(weapon_StringInfo[iSecondaryWpnId], SECTION_V_MODEL, szModelBuffer, sizeof szModelBuffer - 1)
	set_pev(id, pev_viewmodel2, szModelBuffer)
	
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_V_MODEL_SUB, iModelSubBody)
	set_v_SubBody(id, iModelSubBody)
	
	TrieGetString(weapon_StringInfo[iSecondaryWpnId], SECTION_P_MODEL, szModelBuffer, sizeof szModelBuffer - 1)
	engfunc(EngFunc_SetModel, iEnt, szModelBuffer)
	fm_set_entity_visibility(iEnt, 1)					
	
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_P_MODEL_SUB, iModelSubBody)
	set_pev(iEnt, pev_body,  iModelSubBody)
	
	UT_CS_Crosshair_Toggle(id, 1, 0)
	
}


public ToggleCrosshair_TASK(iParam[3], TASKID)
{
	new id = TASKID - TASK_CROSSHAIR_TOGGLE
	
	if (!is_user_alive(id))
		return
	
	if (is_user_bot(id))
		return
		
	new iEnt = fm_get_active_item(id)
	
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	if (iEnt != iParam[2])
		return
		
	if (!IsSecondaryWpn(iWeaponId))
		return
	
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId > -1 && iWeaponId != nt_get_sec_wpn_real_id(iSecondaryWpnId))
	{
		UT_CS_Crosshair_Toggle(id, 1, 1)
		return
	}
	
	if (!(iParam[0] & ST_NO_CROSSHAIR))
		UT_CS_Crosshair_Toggle(id, 1, 1)
	else	UT_CS_Crosshair_Toggle(id, 0, 0)
	
	if ((iParam[0] & ST_HL_CROSSHAIR) && !(iParam[0] & ST_NO_CROSSHAIR))
		UT_HL_Crosshair_Toggle(id, 1, 1)
		
	
}

public csred_WpnHolster_Post(id, iEnt)
{
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	if (!IsSecondaryWpn(iWeaponId))
		return
		
	remove_task(id + TASK_OPEN_FIRE)
	
	delete_trie_key(iPlayerInfo[id], SECTION_ATTACK_STAGE)
	
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId > -1 && nt_get_sec_wpn_real_id(iSecondaryWpnId) == iWeaponId)
	{
				
				
		new iSubBody
			
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BACKWPN_MODEL, iSubBody)
			
		if (iSubBody > -1)
		{
			new szBackModel[128]
			
			TrieGetString(weapon_StringInfo[iSecondaryWpnId], SECTION_BACKWPN_MODEL, szBackModel, sizeof szBackModel - 1)
			
			engfunc(EngFunc_SetModel, iEnt, szBackModel)
			set_pev(iEnt, pev_body, iSubBody)
			fm_set_entity_visibility(iEnt, 1)
		}
		else	fm_set_entity_visibility(iEnt, 0)
	}
	else
	{
		
		
		if (BackWeapon_iSubBody[iWeaponId] > -1)
		{
			engfunc(EngFunc_SetModel, iEnt, BackWeapon_szModel[iWeaponId])
			set_pev(id, pev_body, BackWeapon_iSubBody[iWeaponId])
			fm_set_entity_visibility(iEnt, 1)
		}
		else
			fm_set_entity_visibility(iEnt, 0)
	}
}

public TFM_RemovePlayItem_Pre(id, iEnt, iWeaponId)
{
	if (!IsSecondaryWpn(iWeaponId))
		return
			
	ClearPlayerBit(b_CancelReloading, id);	
	
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId > -1 && nt_get_sec_wpn_real_id(iSecondaryWpnId) == iWeaponId)
	{	
		ClearPlayerBit(g_bUsingZoomFunc, id);
		ClearPlayerBit(bit_LaserSightOn, id);
		remove_all_tasks(id)
	
	}
	else
	{
		ClearPlayerBit(bit_NormalIronSight, id);
		remove_all_tasks(id)
	}
}

public fw_ActiveNewPistol(TASKID)
{
	new iEnt = TASKID - TASK_ACTIVE_WEAPONBOX
	
	if (pev_valid(iEnt))
		set_pev(iEnt, pev_iuser4, WpnBoxSecondaryReady)
}

public fw_ActiveNormalPistol(TASKID)
{
	new iEnt = TASKID - TASK_ACTIVE_WEAPONBOX
	
	if (pev_valid(iEnt))
		set_pev(iEnt, pev_iuser4, WpnBoxNormalSecondaryReady)
	
}

public ShowLaser_TASK(TASKID)
{
	new id = TASKID - 5230
	
	if (!is_user_alive(id))
	{
		remove_task(TASKID)
		return
	}
	
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId < 0)
	{
		remove_task(TASKID)
		return
	}
		
	new iWpnFunc
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_WEAPON_FUNC, iWpnFunc)
	
	if (!(iWpnFunc & FUNC_LASER_SIGHT))
	{
		remove_task(TASKID)
		return
	}
	
	if (!CheckPlayerBit(bit_LaserSightOn, id))
	{
		remove_task(TASKID)
		return
	}
		
	new iOrigin[3]
	message_begin(MSG_ALL, SVC_TEMPENTITY)
	get_user_origin(id, iOrigin, 3)
	write_byte(TE_SPRITE)
	write_coord(iOrigin[0])
	write_coord(iOrigin[1])
	write_coord(iOrigin[2])
	write_short(iLaserSprIndex) 
	write_byte(1) 
	write_byte(200)
	message_end()
	
}

stock str_count(const str[], searchchar)
{
	new count, i
	//count = 0
	
	for (i = 0; i <= strlen(str); i++)
	{
		if(str[i] == searchchar)
			count++
	}
	
	return count;
}

stock UT_GetPlayerSecondaryWpn(id)
{
	if (user_has_weapon(id, CSW_USP))
		return CSW_USP
		
	if (user_has_weapon(id, CSW_GLOCK18))
		return CSW_GLOCK18
		
	if (user_has_weapon(id, CSW_GLOCK18))
		return CSW_GLOCK18
		
	if (user_has_weapon(id, CSW_DEAGLE))
		return CSW_DEAGLE
		
	if (user_has_weapon(id, CSW_P228))
		return CSW_P228
		
	if (user_has_weapon(id, CSW_ELITE))
		return CSW_ELITE
		
	if (user_has_weapon(id, CSW_FIVESEVEN))
		return CSW_FIVESEVEN
		
	return 0
}

stock UT_DrawGrenadeTrail(iGrenadeEnt, iRed, iGreen, iBlue)
{
	
	if (!iGrenadeEnt || !pev_valid(iGrenadeEnt))
		return
		
		
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_BEAMFOLLOW) // TE id
	write_short(iGrenadeEnt) // entity
	write_short(g_trailSpr) // sprite
	write_byte(3) // life
	write_byte(3) // width
	write_byte(iRed) // r
	write_byte(iGreen) // g
	write_byte(iBlue) // b
	write_byte(100) // brightness
	message_end()
}

stock create_launcher_grenade(id, iSecondaryWpnId, iMoveType, iSpeed)
{		
	
	if (!is_user_alive(id))
		return
		
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return
	
	new iWPN_ID = nt_get_sec_wpn_real_id(iSecondaryWpnId)
	
	new iWeaponEnt = get_pdata_cbase(id, m_pActiveItem, 5)
	
	if (!iWeaponEnt || !pev_valid(iWeaponEnt))
		return
		
	
	if (iWPN_ID != cs_get_weapon_id(iWeaponEnt))
		return
		
	new Float:fNextAttack = get_pdata_float(id, m_flNextAttack, 5)
	
	if (fNextAttack > 0.0)
		return
	
	new iEyeOrigin[3], Float:fEyeOrigin[3]
	get_user_origin(id, iEyeOrigin, 1)
	IVecFVec(iEyeOrigin, fEyeOrigin)
	
	if (iWPN_ID == CSW_USP)
	{
		if(!cs_get_weapon_silen(iWeaponEnt))
			UT_PlayWeaponAnim(id, Get_CSWPN_Anim_Shoot1(iWPN_ID))
		else	UT_PlayWeaponAnim(id, Get_CSWPN_Anim_Shoot1(iWPN_ID) - 8)
	}
	else	UT_PlayWeaponAnim(id, Get_CSWPN_Anim_Shoot1(iWPN_ID))
		
	
	new iGrenadeEnt = create_entity(GRENADE_CLASS)
	
	if (!iGrenadeEnt || !pev_valid(iGrenadeEnt)) 
		return 
	
	new iGrenadeType 
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BULLET_GRENADE_TYPE, iGrenadeType)
	
	new Float:fCurrentTime = get_gametime()
	
	switch (iGrenadeType)
	{
		case GRENADE_EXPLOSION	:
			set_pev(iGrenadeEnt, pev_iGrenadeType, SW_CLASS_EXPLOSIVE)
		case GRENADE_FLASH:
			set_pev(iGrenadeEnt, pev_iGrenadeType, SW_CLASS_FLASH)
		default:
			return
	}
	
	set_pev(iGrenadeEnt, pev_iGrenadeId, iSecondaryWpnId)
	set_pev(iGrenadeEnt, pev_fGrenadeActiveTime, fCurrentTime + 0.25)
	set_pev(iGrenadeEnt, pev_nextthink, fCurrentTime + 2.0) // Explode time
	set_pev(iGrenadeEnt , pev_iGrenadeActive, 0)	// Grenade isn't activated

	
	UT_DrawGrenadeTrail(iGrenadeEnt, 255, 255, 255)		
	entity_set_origin(iGrenadeEnt, fEyeOrigin)
	
	new Float:MinBox[3] = {-1.0, -1.0, -1.0}
	new Float:MaxBox[3] = {1.0, 1.0, 1.0}
	
	entity_set_vector(iGrenadeEnt, EV_VEC_mins, MinBox)
	entity_set_vector(iGrenadeEnt, EV_VEC_maxs, MaxBox)
	set_pev(iGrenadeEnt, pev_solid, SOLID_TRIGGER ) 
	set_pev(iGrenadeEnt, pev_movetype, iMoveType)
	set_pev(iGrenadeEnt, pev_owner, id)
		
	new Float:fEndOrigin[3]
	new iEndOrigin[3]
	new Float:fVelocity[3]
	
	get_user_origin(id, iEndOrigin, 3)
	IVecFVec(iEndOrigin, fEndOrigin)
	xs_vec_sub(fEndOrigin, fEyeOrigin, fVelocity)
	xs_vec_normalize(fVelocity, fVelocity)
	new Float:fSpeed = float(iSpeed)
	xs_vec_mul_scalar(fVelocity, fSpeed, fVelocity) 
	set_pev(iGrenadeEnt, pev_velocity, fVelocity)
	
	new szGrenadeModel[128]
	TrieGetString(weapon_StringInfo[iSecondaryWpnId], SECTION_BULLET_W_MODEL, szGrenadeModel, sizeof szGrenadeModel - 1)
	entity_set_model(iGrenadeEnt, szGrenadeModel)
	
	new iGrenadeSub
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BULLET_SUB, iGrenadeSub)
	set_pev(iGrenadeEnt, pev_body, iGrenadeSub)
	
	return 
}

stock load_secondary_wpn_file(szDirectory[], szFileName[], szExtension[], iIgnore_AllConditions)
{
		
	if (g_weapon_count > max_wpn - 1)
		return
		
	new szCfgDir[128]
	new szMapName[32]
	
	get_configsdir(szCfgDir, sizeof szCfgDir - 1)
	get_mapname(szMapName, sizeof szMapName - 1)
	
	new szLoadingFile[256]
	formatex(szLoadingFile, sizeof szLoadingFile - 1, "%s/%s/%s.%s", szCfgDir, szDirectory, szFileName, szExtension)
	
	if (!file_exists(szLoadingFile))
		return
	
	new szTextInfo[128]
	new iTextLen
	
	read_file(szLoadingFile, LINE_WPN_TYPE, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_TYPE]", "")
	new iWeaponType = str_to_num(szTextInfo)
	
	if (g_LoadType != TYPE_FULL && g_LoadType != iWeaponType)
		return
	
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_TYPE, iWeaponType)	
	
		
	read_file(szLoadingFile, LINE_WEAPON_SERIAL, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[iSerial]", "")
	
	if (!iIgnore_AllConditions)
	{
		ExecuteForward(ifw_CheckSecWpnSerial, ifw_Result, szTextInfo)
		if (ifw_Result != PLUGIN_CONTINUE)
			return
	}
	
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_SERIAL, szTextInfo)
	
	
	read_file(szLoadingFile, LINE_WPN_SETTING, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[BasicSetting]", "")
	new iBasicSetting = read_flags(szTextInfo)
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_BASIC_SETTING, iBasicSetting)
	
	
	read_file(szLoadingFile, LINE_WPN_NAME, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_NAME]", "")
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_NAME, szTextInfo)
	
	read_file(szLoadingFile, LINE_WPN_ID, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_ID]", "")
	new szWpnChange[10], szWpnChange_2[10]
	new iWpnId_1, iWpnId_2
	parse(szTextInfo, szWpnChange, sizeof szWpnChange - 1, szWpnChange_2, sizeof szWpnChange_2 - 1)
	
	iWpnId_1 = str_to_num(szWpnChange)
	iWpnId_2 = str_to_num(szWpnChange_2)
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_ID_1, iWpnId_1)
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_ID_2, iWpnId_2)

	read_file(szLoadingFile, LINE_WPN_AMMO, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_AMMO]", "")
	new szClip[10], szBpa[10]
	parse(szTextInfo, szClip, sizeof szClip - 1, szBpa, sizeof szBpa - 1)
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_CLIP, str_to_num(szClip))
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_BPA, str_to_num(szBpa))
	
	read_file(szLoadingFile, LINE_BULLET_TYPE, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[iBulletType]", "")
	new iBulletType = str_to_num(szTextInfo)
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_BULLET_TYPE, iBulletType)
	
	switch (iBulletType)
	{	
		case BULLET_TYPE_SHOTGUN:
		{
			read_file(szLoadingFile, LINE_BULLET_INFO, szTextInfo, sizeof szTextInfo - 1, iTextLen)
			replace(szTextInfo, sizeof szTextInfo - 1, "[iBulletInfo]", "")
			new szShots[5], szSpread[10]
			parse(szTextInfo, szShots, sizeof szShots - 1, szSpread, sizeof szSpread - 1)
			
			TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_SHOTGUN_SHOTS, str_to_num(szShots))
			TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_SHOTGUN_SPREAD,  str_to_float(szSpread))
		}
	}
	
	read_file(szLoadingFile, LINE_WPN_DELAY, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_DELAY]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_DELAY, str_to_float(szTextInfo))
		
	read_file(szLoadingFile, LINE_WPN_RELOADTIME, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_ReloadTime]", "")
	
	new szReloadTime[10], szInsertTime[10], szAfterInsertTime[10]
	
	parse(szTextInfo, szReloadTime, sizeof szReloadTime - 1, szInsertTime, sizeof szInsertTime - 1, szAfterInsertTime, sizeof szAfterInsertTime - 1)
	
	new Float:fReloadTime = str_to_float(szReloadTime)
	
	if (fReloadTime > 0.0)
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_RELOAD_TIME, fReloadTime)
	else	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_RELOAD_TIME, UT_Get_CS_Reload_Time(iWpnId_1))
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_INSERT_TIME, str_to_float(szInsertTime))
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_AFTER_INSERT_TIME, str_to_float(szAfterInsertTime))
	
	
	read_file(szLoadingFile, LINE_WPN_DEPLOYTIME, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_DeployTime]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_DEPLOY_TIME, str_to_float(szTextInfo))
		
	read_file(szLoadingFile, LINE_WPN_RECOIL, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_RECOIL]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_RECOIL, str_to_float(szTextInfo))
	
	read_file(szLoadingFile, LINE_WPN_ACCURACY, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_ACCURACY]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_ACCURACY,  str_to_float(szTextInfo))
	
	read_file(szLoadingFile, LINE_WPN_ZOOM, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_ZOOM]", "")
	
	new szFirstZoom[3], szSecondZoom[3]
	parse(szTextInfo, szFirstZoom, sizeof szFirstZoom - 1, szSecondZoom, sizeof szSecondZoom - 1)
	
	if (iBasicSetting & ST_ZOOM_SUPPORTED)
	{
		new iFirstFOV, iSecondFOV
		iFirstFOV = 90 - str_to_num(szFirstZoom)
		iSecondFOV = 90 - str_to_num(szSecondZoom)

		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_FIRST_FOV, iFirstFOV)
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_SECOND_FOV, iSecondFOV)
		
		if (iFirstFOV == 90)
			TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_BASIC_SETTING, iBasicSetting &~ ST_ZOOM_SUPPORTED);
	}
	
	
		
	read_file(szLoadingFile, LINE_WPN_SPECIAL , szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_SPECIAL]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_SPEC, str_to_num(szTextInfo))
		
	read_file(szLoadingFile, LINE_WPN_FUNC, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_FUNC]", "")
	new iWpnFunc = read_flags(szTextInfo)
	
	
	if (iWpnFunc & FUNC_ADS)
	{
		if (!iADS_State && !(iBasicSetting & ST_ZOOM_SUPPORTED))
			iWpnFunc &= ~FUNC_ADS
	}
	
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_FUNC, iWpnFunc)
	
	read_file(szLoadingFile, LINE_WPN_FIREMODE, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_FIREMODE]", "")
	
	new szDefaultFireMode[3], szFireMode[3], szBurstedBullet[3], szFmTime[10], szFmDelay[10]
	new szSpecialFireMode[10], szSpinTime[10], szAfterSpinTime[10]
	
	parse(szTextInfo, szDefaultFireMode, sizeof szDefaultFireMode - 1, szFireMode, sizeof szFireMode - 1, szBurstedBullet, sizeof szBurstedBullet - 1,
		szSpecialFireMode, sizeof szSpecialFireMode - 1, szSpinTime, sizeof szSpinTime - 1, szAfterSpinTime, sizeof szAfterSpinTime - 1)
	
	new iDefaultFireMode = str_to_num(szDefaultFireMode)
	new iAlterFireMode = str_to_num(szFireMode)
	
	
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_ORIGINAL_FIREMODE, iDefaultFireMode)
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_FIREMODE, iAlterFireMode)
	
	if (iAlterFireMode != FIRE_DEFAULT || iDefaultFireMode != FIRE_DEFAULT)
	{
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_BURST_BULLET, str_to_num(szBurstedBullet))
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_TIME_FM_CHANGE, str_to_float(szFmTime))
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_TIME_FM_DELAY, str_to_float(szFmDelay))
	}
		
	new iTriggerFlag = read_flags(szSpecialFireMode)
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WPN_FIRE_FLAG, iTriggerFlag)
	
	if (iTriggerFlag & FIRE_MINIGUN)
	{	
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_SPIN_TIME, str_to_float(szSpinTime))
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_DEACTIVE_SPIN, str_to_float(szAfterSpinTime))
	}
	
	read_file(szLoadingFile, LINE_WPN_HUD, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_HUD]", "")
	
	new szHUD[64], szOriginalHud[10]
	parse(szTextInfo, szHUD, sizeof szHUD - 1, szOriginalHud, sizeof szOriginalHud -1 )
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_HUD_KILL, szHUD)
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_ORIGINAL, str_to_num(szOriginalHud))
	
	read_file(szLoadingFile, LINE_WPN_DMG, szTextInfo , sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_DMG]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_DAMAGE, str_to_float(szTextInfo))
	
	read_file(szLoadingFile, LINE_WPN_COST, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_COST]", "")
	
	new szWpnCost[10], szCostType[10], szAmmoCost[10], szAmmoCostType[10], szLevel[10]
	
	parse(szTextInfo, szWpnCost, sizeof szWpnCost - 1, szCostType, sizeof szCostType - 1, szAmmoCost, sizeof szAmmoCost - 1, szAmmoCostType, sizeof szAmmoCostType - 1, szLevel, sizeof szLevel - 1)
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_COST, str_to_num(szWpnCost))
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_COST_TYPE, str_to_num(szCostType))
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_AMMO_COST, str_to_num(szAmmoCost))
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_AMMO_COST_TYPE, str_to_num(szAmmoCostType))
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_LEVEL, str_to_num(szLevel))
		
	new szWeaponModel[250], szSubBody[3]
	
	/*					MODEL SECTION					*/
	
	read_file(szLoadingFile, LINE_WPN_W_MODEL, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[W_MODEL]", "")
	parse(szTextInfo, szWeaponModel, sizeof szWeaponModel - 1, szSubBody, sizeof szSubBody - 1)
	
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WORLD_MODEL_SUB, str_to_num(szSubBody))
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_W_MODEL, szWeaponModel)
	
	if (!TrieKeyExists(iPrecachedModel, szWeaponModel))
	{
		engfunc(EngFunc_PrecacheModel, szWeaponModel)
		TrieSetCell(iPrecachedModel, szWeaponModel, 1)
	}
	
	// Player Model
	read_file(szLoadingFile, LINE_WPN_P_MODEL, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[P_MODEL]", "")
	parse(szTextInfo, szWeaponModel, sizeof szWeaponModel - 1, szSubBody, sizeof szSubBody - 1)
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_P_MODEL_SUB, str_to_num(szSubBody))
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_P_MODEL, szWeaponModel)
	
	if (!TrieKeyExists(iPrecachedModel, szWeaponModel))
	{
		engfunc(EngFunc_PrecacheModel, szWeaponModel)
		TrieSetCell(iPrecachedModel, szWeaponModel, 1)
	}
	
	// View Model
	read_file(szLoadingFile, LINE_WPN_V_MODEL, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[V_MODEL]", "")
	parse(szTextInfo, szWeaponModel, sizeof szWeaponModel - 1, szSubBody, sizeof szSubBody - 1)
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_V_MODEL_SUB, str_to_num(szSubBody))
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_V_MODEL, szWeaponModel)
	
	if (!TrieKeyExists(iPrecachedModel, szWeaponModel))
	{
		engfunc(EngFunc_PrecacheModel, szWeaponModel)
		TrieSetCell(iPrecachedModel, szWeaponModel, 1)
	}
	
	// [Aim Down Sight 2]
	read_file(szLoadingFile, LINE_ADS_CONFIG, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[AdsConfig]", "")
	new szAlterModel[128], szStartTime[10], szEndTime[10], szSpecialFlag[10], szRof[10], szRecoil[10]
	parse(szTextInfo, szAlterModel, sizeof szAlterModel - 1, szStartTime, sizeof szStartTime - 1, szEndTime, sizeof szEndTime - 1, szSpecialFlag, sizeof szSpecialFlag - 1,
			szRof, sizeof szRof - 1, szRecoil, sizeof szRecoil - 1)
	new iSpecialFlag = read_flags(szSpecialFlag)
	
	if (iWpnFunc & FUNC_ADS)
	{
		if (!iADS_State)
		{
			if (!(iSpecialFlag & ADS_NO_INTRO_ANIM))
				iSpecialFlag |= ADS_NO_INTRO_ANIM
			
			if (!(iSpecialFlag & ADS_NO_OUT_ANIM))
				iSpecialFlag |= ADS_NO_OUT_ANIM
				
			if (iSpecialFlag & ADS_NO_CS_CROSSHAIR)
				iSpecialFlag &= ~ADS_NO_CS_CROSSHAIR
				
			if (iSpecialFlag & ADS_NO_HL_CROSSHAIR)
				iSpecialFlag &= ~ADS_NO_HL_CROSSHAIR
				
			if (iSpecialFlag & ADS_ADDITION_VIEWMODEL)
				iSpecialFlag &= ~ADS_ADDITION_VIEWMODEL
		}
		
		if (iSpecialFlag & ADS_ADDITION_VIEWMODEL)
			TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_SPEC_V_MODEL, szAlterModel)
		else	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_SPEC_V_MODEL, szWeaponModel)
		
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_ADS_CONFIG, iSpecialFlag)
		
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_ADS_START_TIME, str_to_float(szStartTime))
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_ADS_END_TIME, str_to_float(szEndTime))
		
		if (iSpecialFlag & ADS_NEW_ROF)
			TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_ADS_ROF, str_to_float(szRof))
			
		if (iSpecialFlag & ADS_NEW_RECOIL)
			TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_ADS_RECOIL, str_to_float(szRecoil))
	}
	
	/****************************************************************************************/
	
	
	read_file(szLoadingFile, LINE_WPN_WEIGHT, szTextInfo, sizeof szTextInfo - 1 , iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_WEIGHT]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_WEIGHT, str_to_float(szTextInfo))
	
	read_file(szLoadingFile, LINE_WPN_SPEED, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_SPEED]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_SPEED_REDUCTION, str_to_float(szTextInfo))
	
	read_file(szLoadingFile, LINE_WPN_KNOCKBACK, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_KB]", "")
	
	new szKnockBackPower[32], szKnockBackDistance[32]
	
	parse(szTextInfo, szKnockBackPower, sizeof szKnockBackPower - 1, szKnockBackDistance, sizeof szKnockBackDistance - 1)
	
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_KNOCKBACK_POWER, str_to_float(szKnockBackPower))
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_KNOCKBACK_DISTANCE, str_to_num(szKnockBackDistance))
	
	read_file(szLoadingFile, LINE_WPN_SOUND, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_SOUND]", "")
	
	new szSound[128]
	new szShotSound[32], szOtherSound[10]
	
	parse(szTextInfo, szShotSound, sizeof szShotSound - 1, szOtherSound, sizeof szOtherSound - 1)
	
	new iOtherSound = str_to_num(szOtherSound)
	if (!iOtherSound)
		formatex(szSound, sizeof szSound - 1, "weapons/%s/%s.wav", SOUND_DIRECTORY, szShotSound)
	else	formatex(szSound, sizeof szSound - 1, "weapons/TFM_WPN/default/%s.wav", szShotSound)
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_SOUND_ID, engfunc(EngFunc_PrecacheSound, szSound))
	
	
	new szExtraSound[256]
	
	// Check if Burst sound exists
	
	if (!iOtherSound)
	{
		formatex(szExtraSound, sizeof szExtraSound - 1, "sound/weapons/%s/%s-burst.wav", SOUND_DIRECTORY, szShotSound)
		
		if (file_exists(szExtraSound))
		{
			formatex(szExtraSound, sizeof szExtraSound - 1, "weapons/%s/%s-burst.wav", SOUND_DIRECTORY, szShotSound)
			TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_SOUND_ID_BURST, engfunc(EngFunc_PrecacheSound, szExtraSound))
		}
		
		// Check if Silencer sound exists 
		
		formatex(szExtraSound, sizeof szExtraSound - 1, "sound/weapons/%s/%s-silencer.wav", SOUND_DIRECTORY, szShotSound)
		
		if (file_exists(szExtraSound))
		{
			formatex(szExtraSound, sizeof szExtraSound - 1, "weapons/%s/%s-silencer.wav", SOUND_DIRECTORY, szShotSound)
			TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_SOUND_ID_SILENT, engfunc(EngFunc_PrecacheSound, szExtraSound))
		}
	}
	else
	{
		formatex(szExtraSound, sizeof szExtraSound - 1, "sound/weapons/%s-burst.wav", szShotSound)
		
		if (file_exists(szExtraSound))
		{
			formatex(szExtraSound, sizeof szExtraSound - 1, "weapons/%s-burst.wav", szShotSound)
			TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_SOUND_ID_BURST, engfunc(EngFunc_PrecacheSound, szExtraSound)) 
		}
		
		// Check if Silencer sound exists 
		
		formatex(szExtraSound, sizeof szExtraSound - 1, "sound/weapons/%s-silencer.wav", szShotSound)
		
		if (file_exists(szExtraSound))
		{
			formatex(szExtraSound, sizeof szExtraSound - 1, "weapons/%s-silencer.wav", szShotSound)
			TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_SOUND_ID, engfunc(EngFunc_PrecacheSound, szExtraSound))
		}
	}
	
	read_file(szLoadingFile, LINE_WPN_CLASS, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	new szClass[64], szRegisterCommand[3]
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_CLASS]", "")
	parse(szTextInfo, szClass, sizeof szClass - 1, szRegisterCommand, sizeof szRegisterCommand - 1)
	
	if (str_to_num(szRegisterCommand))
	{
		register_clcmd(szClass, "fw_ChangeWeapon")
		
	}
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_CLASS, szClass)
	
	read_file(szLoadingFile, LINE_WPN_AS_MAP, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[AS-MAP]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_EQUIP_TYPE, str_to_num(szTextInfo))
	
	read_file(szLoadingFile, LINE_WPN_BACKWPN, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[BACK_WPN]", "")
	new szBackWpnState[3], szBackSubBody[3], szBackModel[32]
	parse(szTextInfo, szBackWpnState, sizeof szBackWpnState - 1, szBackSubBody, sizeof szBackSubBody - 1, szBackModel, sizeof szBackModel - 1)
	
	if (str_to_num(szBackWpnState))
	{	
		TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_BACKWPN_MODEL, szBackModel)
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_BACKWPN_MODEL, str_to_num(szBackSubBody))
		
		if (!TrieKeyExists(iPrecachedModel, szBackModel))
		{
			engfunc(EngFunc_PrecacheModel, szBackModel)
			TrieSetCell(iPrecachedModel, szBackModel, 1)
		}
	
	}
	else	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_BACKWPN_MODEL, -1)	
	
	
	
	new szSpawnFile[256]
	formatex(szSpawnFile, sizeof szSpawnFile - 1, "%s/%s/%s/%s.cfg", szCfgDir, WPN_SPAWN_DIR, szMapName, szFileName)
	// Add weapon to menu
	new szInfo[10]
	formatex(szInfo, sizeof szInfo - 1, "%d", g_weapon_count)
	
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_SPAWN_FILE, szSpawnFile)
	
	new szPistolName[128]
	TrieGetString(weapon_StringInfo[g_weapon_count], SECTION_NAME, szPistolName, sizeof szPistolName - 1)
	
	menu_additem(iWeaponSpawnMenuIndex, szPistolName, szInfo, ADMIN_ALL, -1)
	
	TrieSetCell(iLoadedINIList, szFileName, 1)
	
	if (file_exists(szSpawnFile))
	{
		new Data[124]
		new pos[11][8];
		new len
		
			
		for (new iSpawnLine = 0; iSpawnLine < file_size(szSpawnFile, 1); iSpawnLine++)
		{
			if (iTotalSpawnPoint > MAX_SPAWN_POINT )
				continue
			
			read_file(szSpawnFile, iSpawnLine, Data, sizeof Data - 1, len)
			parse(Data, pos[1], 7, pos[2], 7, pos[3], 7)
			// Origin
			fSpawnVecs[iTotalSpawnPoint][0] = str_to_float(pos[1]);
			fSpawnVecs[iTotalSpawnPoint][1] = str_to_float(pos[2]);
			fSpawnVecs[iTotalSpawnPoint][2] = str_to_float(pos[3]);
			iSpawnWeaponId[iTotalSpawnPoint] = g_weapon_count
			
			iTotalSpawnPoint++
		}
	}
	
	new iLoadedId = g_weapon_count
	g_weapon_count++
	ExecuteForward(ifw_WeaponLoaded, ifw_Result, iLoadedId)
}

stock IsSecondaryWpn(iWeaponId)
{
	
	if (iWeaponId == CSW_USP)
		return CSW_USP
	if (iWeaponId == CSW_GLOCK18)
		return CSW_GLOCK18
	if (iWeaponId == CSW_DEAGLE)
		return CSW_DEAGLE
	if (iWeaponId == CSW_P228)
		return CSW_P228
	if (iWeaponId == CSW_ELITE)
		return CSW_ELITE
	if (iWeaponId == CSW_FIVESEVEN)
		return CSW_FIVESEVEN
		
	return 0
}

public fw_ChangeWeapon(id)
{
	if (!is_user_alive(id))
		return PLUGIN_CONTINUE
		
	new iSecondaryWpnId = nt_get_user_sec_wpn(id)
	
	if (iSecondaryWpnId < 0)
		return PLUGIN_CONTINUE
		
	new iWeaponId = nt_get_sec_wpn_real_id(iSecondaryWpnId)
	
	new szWeaponName[32]
	get_weaponname(iWeaponId, szWeaponName, sizeof szWeaponName - 1)
	engclient_cmd(id, szWeaponName)
	
	return PLUGIN_HANDLED
}

stock IsValidPistolId(iWeaponId)
{
	if (iWeaponId == CSW_USP)
		return 1
	
	if (iWeaponId == CSW_GLOCK18)
		return 1
		
	if (iWeaponId == CSW_DEAGLE)
		return 1
		
	if (iWeaponId == CSW_P228)
		return 1
		
	if (iWeaponId == CSW_ELITE)
		return 1
		
	if (iWeaponId == CSW_FIVESEVEN)
		return 1
		
	return 0
}

stock IsValidWeapon(iWeaponId)
{
	if (iWeaponId < 1 || iWeaponId > CSW_P90 || iWeaponId == 2)
		return 0
		
	return 1
}

stock IsValidPlayer(id)		
	return is_user_connected(id)

stock CreateArmoury(iPoint, iSecondaryWpnId, Float:fOrigin[3])
{
	
	ExecuteForward(ifw_ArmourySpawn, ifw_Result, iSecondaryWpnId)
	
	if (ifw_Result != PLUGIN_CONTINUE)
		return 0
		
	new iEnt = create_entity("armoury_entity")
			
	if (!iEnt || !pev_valid(iEnt))
		return 0			
		
	dllfunc( DLLFunc_Spawn, iEnt );
	
	new iWeaponId 
	
	
	if (iSecondaryWpnId > - 1)
	{
		iWeaponId = iSecondaryWpnId
		set_pev(iEnt, pev_ArmouryId, iWeaponId)
		set_pev(iEnt, pev_origin, fOrigin)
	}
	else
	{
		iWeaponId = iSpawnWeaponId[iPoint]
		set_pev(iEnt, pev_ArmouryId, iWeaponId)
		set_pev(iEnt, pev_origin, fSpawnVecs[iPoint])
	}
	set_pev(iEnt, pev_solid, SOLID_TRIGGER)
	
	set_pev(iEnt, pev_ArmouryType, ARMOURY_SECONDARY)
	set_pev(iEnt, pev_ArmouryStatus, ARMOURY_ENABLED)
			
	set_pev(iEnt, pev_mins, {-3.0, -3.0, -3.0})
	set_pev(iEnt, pev_maxs, {3.0, 3.0, 3.0})
	
			
	new szWorldModel[128], iSubBody
	
	TrieGetCell(weapon_StringInfo[iWeaponId], SECTION_WORLD_MODEL_SUB, iSubBody)
	TrieGetString(weapon_StringInfo[iWeaponId], SECTION_W_MODEL, szWorldModel, sizeof szWorldModel - 1)
	set_pev(iEnt, pev_body, iSubBody)
	engfunc(EngFunc_SetModel, iEnt, szWorldModel)
	set_pev(iEnt, pev_ArmouryPoint, iPoint)
	return iEnt
}

stock do_scope_function(id, iSecondaryWpnId)
{
	
	if (iSecondaryWpnId < 0 || iSecondaryWpnId > g_weapon_count - 1)
		return 0
		
	new iBasicSetting = get_trie_int(weapon_StringInfo[iSecondaryWpnId], SECTION_BASIC_SETTING)
	
	if (!(iBasicSetting & ST_ZOOM_SUPPORTED))
		return 0
		
	new iCanUpdateScope = 0
	
	new iFirstFov, iSecondFov
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_FIRST_FOV, iFirstFov)
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_SECOND_FOV, iSecondFov)

		
	if (!CheckPlayerBit(g_bUsingZoomFunc, id))
	{
		
		
		if (iFirstFov < 90 && iFirstFov > 0)
		{
			UT_SetPlayerFOV(id, iFirstFov)
		
			SetPlayerBit(g_bUsingZoomFunc, id);
			iCanUpdateScope = 1
			set_trie_int(iPlayerInfo[id], SECTION_USER_ZOOM_LVL, 1)
		}
	}
	else
	{
		if (get_trie_int(iPlayerInfo[id], SECTION_USER_ZOOM_LVL) == 1)
		{
			if ((0 < iSecondFov < 90) && (iSecondFov != iFirstFov))
			{
				if (iSecondFov < 90 && iSecondFov)
					UT_SetPlayerFOV(id, iSecondFov)
				
				set_trie_int(iPlayerInfo[id], SECTION_USER_ZOOM_LVL,  2)
				iCanUpdateScope = 1
				client_cmd(id, "spk weapons/zoom.wav")
			}
		}
		
		if (!iCanUpdateScope)
		{
			if (CheckPlayerBit(g_bUsingZoomFunc, id))
				ClearPlayerBit(g_bUsingZoomFunc, id)
										
			UT_SetPlayerFOV(id, 90)
		}
	}
	
	ExecuteForward(ifw_FuncActivated, ifw_Result, id, iSecondaryWpnId, iCanUpdateScope)
	
	return iCanUpdateScope
}

stock EventToWpnId(iEventId)
{
	
	new EVENT_DEAGLE = 17
	new EVENT_P228 = 18
	new EVENT_GLOCK18 = 20
	new EVENT_ELITE_LEFT = 23
	new EVENT_ELITE_RIGHT = 24
	new EVENT_FIVESEVEN = 15
	new EVENT_USP = 12

	if (iEventId == EVENT_USP)
		return CSW_USP
		
	if (iEventId == EVENT_GLOCK18)
		return CSW_GLOCK18
		
	if (iEventId == EVENT_DEAGLE)
		return CSW_DEAGLE
		
	if (iEventId == EVENT_P228)
		return CSW_P228
		
	if (iEventId == EVENT_ELITE_LEFT)
		return CSW_ELITE
		
	if (iEventId == EVENT_ELITE_RIGHT)
		return CSW_ELITE
	
	if (iEventId == EVENT_FIVESEVEN)
		return CSW_FIVESEVEN
		
	return 0
}

stock spawnStaticSound( const index, const Float:origin[3], const soundIndex, const Float:vol, const Float:atten, const pitch, const flags ) 
{ 
	message_begin( index ? MSG_ONE_UNRELIABLE : MSG_ALL, SVC_SPAWNSTATICSOUND, .player = index );
	write_coord_f( origin[0] ); 
	write_coord_f( origin[1] ); 
	write_coord_f( origin[2] );
	write_short( soundIndex );
	write_byte( clamp_byte( floatround( vol * 255 ) ) );
	write_byte( clamp_byte( floatround( atten * 64 ) ) );
	write_short( index );        
	write_byte( pitch ); 
	write_byte( flags );   
	message_end();
}

stock can_player_open_weapon_menu(id)
{
	if (!is_user_alive(id))
		return 0
		
	if (!(cs_get_user_mapzones(id) & CS_MAPZONE_BUY))
		return 0
		
	if (csred_IsUserGhost(id) || g4u_get_user_zombie(id))
		return 0
		
	return 1
}

stock set_weapon_ability(iEnt, iSecondaryWpnId)
{
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	new iBasicSetting
	TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BASIC_SETTING, iBasicSetting)
	
	if (!(iBasicSetting & ST_ACTIVE_DEFAULT_FUNC))
		return

	if (iWeaponId == CSW_USP)
		cs_set_weapon_silen(iEnt, 1, 0)
	else if (iWeaponId == CSW_GLOCK18)
		UT_set_weapon_burst(iEnt, 1)
}

stock UT_set_weapon_burst(entity, burstmode=1)
{
	new weapon = cs_get_weapon_id(entity);
	if( weapon != CSW_GLOCK18 && weapon != CSW_FAMAS ) return;
	
	new firemode = get_pdata_int(entity, OFFSET_SILENCER_FIREMODE, EXTRAOFFSET_WEAPONS);
	
	switch( weapon )
	{
		case CSW_GLOCK18:
		{
			if( burstmode && firemode == GLOCK18_SEMIAUTOMATIC )
			{
				
				firemode = GLOCK18_BURST;
			}
			else if( !burstmode && firemode == GLOCK18_BURST )
			{
				
				firemode = GLOCK18_SEMIAUTOMATIC;
			}
			else return;
		}
		case CSW_FAMAS:
		{
			if( burstmode && firemode == FAMAS_AUTOMATIC )
			{
				
				firemode = FAMAS_BURST;
			}
			else if( !burstmode && firemode == FAMAS_BURST )
			{
				
				firemode = FAMAS_AUTOMATIC;
			}
			else return;
		}
	}
	
	set_pdata_int(entity, OFFSET_SILENCER_FIREMODE, firemode, EXTRAOFFSET_WEAPONS);
}

stock is_Ent_Breakable(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return 0
	
	if ((entity_get_float(iEnt, EV_FL_health) > 0.0) && (entity_get_float(iEnt, EV_FL_takedamage) > 0.0) && !(entity_get_int(iEnt, EV_INT_spawnflags) & SF_BREAK_TRIGGER_ONLY))
		return 1
	
	return 0
}

stock ScreenBlind(id,iAmount, second) 
{
	if (!is_user_alive(id) || is_user_bot(id))
		return
		
	emessage_begin(MSG_ONE_UNRELIABLE, iMsgScreenFade, _, id)
	ewrite_short((1<<12)*second) // duration
	ewrite_short((1<<12)*second) // hold time
	ewrite_short(0x0000) // fade type
	ewrite_byte(255) // red
	ewrite_byte(255) // green
	ewrite_byte(255) // blue
	ewrite_byte(iAmount) // alpha
	emessage_end()
}

stock IsSniper(iWeaponId)
{
	if (iWeaponId == CSW_SCOUT)
		return CSW_SCOUT
		
	if (iWeaponId == CSW_AWP)
		return CSW_AWP
		
	if (iWeaponId == CSW_G3SG1)
		return CSW_G3SG1
		
	if (iWeaponId == CSW_SG550)
		return CSW_SG550
		
	return 0
}

stock play_idle_animation(id, iWeaponEnt)
{
	new iIdleAnimation = 0
	
	if (!cs_get_weapon_silen(iWeaponEnt) && cs_get_weapon_id(iWeaponEnt) == CSW_USP && !cs_get_user_shield(id))
		iIdleAnimation = 8
		
	UT_PlayWeaponAnim(id, iIdleAnimation)
}

stock _find_sec_wpn_by_model(szModel[])
{
	for (new i = 0; i < g_weapon_count; i++)
	{
		new szWorldModel[128]
		TrieGetString(weapon_StringInfo[i], SECTION_W_MODEL, szWorldModel, sizeof szWorldModel - 1)
		
		if (equal(szModel, szWorldModel))
			return i
	}
	
	return -1
}


stock can_player_equip_sec_wpn(id)
{
	ExecuteForward(ifw_UserCanEquipWpn, ifw_Result, id)
	
	if (ifw_Result != PLUGIN_CONTINUE)
		return 0
		
	return 1
}
	
stock can_player_touch_wpnbox(id)
{
	ExecuteForward(ifw_UserCanTouchWpnBox, ifw_Result, id)
	
	if (ifw_Result != PLUGIN_CONTINUE)
		return 0
		
	return 1
}
	
stock can_player_touch_armoury(id)
{
	ExecuteForward(ifw_UserCanTouchArmoury, ifw_Result, id)
	
	if (ifw_Result != PLUGIN_CONTINUE)
		return 0
		
	return 1
}
	
stock forward_section()
{
	ifw_StartLoadData = CreateMultiForward("SW_WeaponLoadData", ET_IGNORE)
	ifw_ArmouryPickUp = CreateMultiForward("SW_ArmouryPickUp", ET_IGNORE, FP_CELL, FP_CELL)
	ifw_CheckSecWpnSerial = CreateMultiForward("SW_WeaponCheckSerial", ET_CONTINUE, FP_STRING)
	ifw_FuncActivated = CreateMultiForward("SW_SpecialFuncToggle", ET_IGNORE, FP_CELL, FP_CELL, FP_CELL)
	
	ifw_UserCanTouchWpnBox = CreateMultiForward("SW_UserCanTouchWpnBox", ET_CONTINUE, FP_CELL)
	ifw_UserCanTouchArmoury = CreateMultiForward("SW_UserCanTouchArmoury", ET_CONTINUE, FP_CELL)
	ifw_UserCanEquipWpn = CreateMultiForward("SW_UserCanEquipSecWpn", ET_CONTINUE, FP_CELL)
	ifw_ArmourySpawn = CreateMultiForward("SW_ArmouryEntitySpawn", ET_CONTINUE, FP_CELL)
	ifw_WeaponLoaded = CreateMultiForward("SW_WeaponLoaded", ET_IGNORE, FP_CELL)
}

stock show_specific_view_model(id, iSecondaryWpnId)
{
	new iWpnFunc = nt_get_sec_wpn_func(iSecondaryWpnId)
	
	if (!(iWpnFunc & FUNC_ADS))
		return
		
	new szSpecViewModel[256]
	TrieGetString(weapon_StringInfo[iSecondaryWpnId], SECTION_SPEC_V_MODEL, szSpecViewModel, sizeof szSpecViewModel - 1)
					
	set_pev(id, pev_viewmodel2, szSpecViewModel)
}

stock reset_view_model(id, iSecondaryWpnId)
{
	new szViewModel[256]
	TrieGetString(weapon_StringInfo[iSecondaryWpnId], SECTION_V_MODEL, szViewModel, sizeof szViewModel - 1)
					
	set_pev(id, pev_viewmodel2, szViewModel)
}

stock is_valid_grenade(iGrenadeType)
{
	switch (iGrenadeType)
	{
		case SW_CLASS_EXPLOSIVE:
			return 1
		
		case SW_CLASS_FLASH:
			return 1
	}
	return 0
}

stock user_has_secondary(id)
{
	if (user_has_weapon(id, CSW_GLOCK18))
		return 1
		
	if (user_has_weapon(id, CSW_USP))
		return 1
		
	if (user_has_weapon(id, CSW_DEAGLE))
		return 1
		
	if (user_has_weapon(id, CSW_P228))
		return 1
		
	if (user_has_weapon(id, CSW_ELITE))
		return 1
		
	if (user_has_weapon(id, CSW_FIVESEVEN))
		return 1
		
	return 0
}


stock SW_do_special_attack(id, iEnt, iSecondaryWpnId, ucHandle, iButton, iClip, iOpenFire)
{
	if (!iOpenFire)
		return
		
	if (CheckPlayerBit(g_SpecialBurstMode, id))
	{
		set_uc(ucHandle, UC_Buttons, iButton &= ~IN_ATTACK)
						
		new iMaxBurstAmmo 
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BURST_BULLET, iMaxBurstAmmo)
		if (iMaxBurstAmmo > iClip)
			iMaxBurstAmmo = iClip
									
		for (new iBulletId = 0; iBulletId < iMaxBurstAmmo; iBulletId++)
			UT_MakeWpnPrimAtk(iEnt)
										
		new Float:fFmTime
		TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_TIME_FM_DELAY, fFmTime)
		fm_set_next_attack(id, fFmTime)	
									
		engclient_cmd(id, "-attack")
	}	
	else if (CheckPlayerBit(g_SpecialBurstFamas, id))
	{
		set_uc(ucHandle, UC_Buttons, iButton &= ~IN_ATTACK)
							
		if (iClip)
		{		
			new iMaxBurstAmmo
			TrieGetCell(weapon_StringInfo[iSecondaryWpnId], SECTION_BURST_BULLET, iMaxBurstAmmo)
			if (iMaxBurstAmmo > iClip)
				iMaxBurstAmmo = iClip
							
			new iParam[3]
							
			iParam[0] = iSecondaryWpnId
			iParam[1] = iEnt
			iParam[2] = iMaxBurstAmmo - 1
										
									
			ExecuteHamB(Ham_Weapon_PrimaryAttack, iEnt)
			fm_set_next_attack(id, 9999.0)
								
			remove_task(id + TASK_FAMAS_BURST)
									
			set_task(BURST_CYCLE, "DoFamasBurst_TASK", id + TASK_FAMAS_BURST, iParam, sizeof iParam) 
		}
	}
}

stock set_v_SubBody(id, iSubBody)
{
	if (!is_user_connected(id))
		return
		
	if (is_user_bot(id))
		return
		
	MMCL_SetViewEntityBody(id, iSubBody)
}

stock get_trie_int(Trie:iTrieId, szKey[], iDefaultOutput = 0)
{
	if (!iTrieId)
		return iDefaultOutput
		
	if (!TrieKeyExists(iTrieId, szKey))
		return iDefaultOutput
		
	new iOutput
	TrieGetCell(iTrieId, szKey, iOutput)
	return iOutput
}

stock set_trie_int(Trie:iTrieId, szKey[], iInput)
{
	if (!iTrieId)
		return
		
	TrieSetCell(iTrieId, szKey, iInput)
}

stock delete_trie_key(Trie:iTrieId, szKey[])
{
	if (!iTrieId)
		return 0
		
	if (!TrieKeyExists(iTrieId, szKey))
		return 0
		
	TrieDeleteKey(iTrieId, szKey)
	return 1
}


/*************************************************************************************/

#define m_fResumeZoom  110
#define m_flAccuracy 	 62
#define m_iId 		43
#define m_fInReload 	54
#define	m_bGotNVG	516
#define m_bIsNVGSwitchedOn 	 517  
#define m_fInSpecialReload 	 55
#define m_pActiveItem 	 373
#define m_flNextAttack 	 83
#define m_iLastZoom 	109

stock fm_get_active_item(id)
	return get_pdata_cbase(id, m_pActiveItem, 5)

stock Float:fm_get_next_attack(id)
	return get_pdata_float(id, m_flNextAttack, 5)

stock fm_set_next_attack(id, Float:fTime)
	set_pdata_float(id, m_flNextAttack, fTime, 5)

stock fm_set_last_zoom(id, iFOV)
	set_pdata_int(id, m_iLastZoom, iFOV, 5)

stock fm_set_resume_zoom(id, bool:bToggle)
	set_pdata_int(id, m_fResumeZoom, bToggle, 5)

stock fm_set_accuracy(iEnt, Float:fAccuracy)
	set_pdata_float(iEnt, m_flAccuracy, fAccuracy, 4)

stock fm_get_weapon_id(iEnt)
	return get_pdata_int(iEnt, m_iId, 4)

stock fm_set_weapon_id(iEnt, iWeaponId)
	set_pdata_int(iEnt, m_iId, iWeaponId, 4)


stock fm_get_weapon_reload(iEnt)
	return get_pdata_int(iEnt, m_fInReload, 4)

stock fm_set_weapon_reload(iEnt, iToggle)
	set_pdata_int(iEnt, m_fInReload, iToggle, 4)


stock fm_set_weapon_special_reload(iEnt, iToggle)
	set_pdata_int(iEnt, m_fInSpecialReload, iToggle, 4)

stock fm_get_weapon_special_reload(iEnt)
	return get_pdata_int(iEnt, m_fInSpecialReload, 4)

stock fm_set_user_nightvision(id, iToggle, iTurnOn = 0)
{
	  
	
	iToggle?set_pdata_int(id, m_bGotNVG, 1, 5):set_pdata_int(id, m_bGotNVG, 0, 5)
	iTurnOn?set_pdata_int(id, m_bIsNVGSwitchedOn, 1, 5):set_pdata_int(id, m_bIsNVGSwitchedOn, 0, 5)
}

stock fm_get_user_nightvision(id)
	return get_pdata_int(id, m_bGotNVG, 5)
/*************************************************************************************/
