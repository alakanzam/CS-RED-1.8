/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <cstrike>
#include <hamsandwich>
#include <mmcl_util>
#include <player_api>
#include <celltrie>

#include <GamePlay_Included/Tools.inc>

/************************************************/

#define PLUGIN "Player Mark"
#define VERSION "-No Info-"
#define AUTHOR "Nguyen Duy Linh"

/************************************************/

#define TASK_HAM_CZ	1000
#define TASK_SHOWMARK 3000

/************************************************/

#define MARK_HOLDTIME -1.0

/************************************************/

/************************************************/

#define MARK_DIRECTORY "MARK_PLAYER"

#define BL_MARK "MARK_TER"
#define GR_MARK "MARK_CT"
#define DEATH_MARK "MARK_DEATH"

/************************************************/

new Trie:iUserInfo[33]

/************************************************/

#define SECTION_TER_MARK_X	"TER_MARK_X"
#define SECTION_TER_MARK_Y	"TER_MARK_Y"
#define SECTION_CT_MARK_X	"CT_MARK_X"
#define SECTION_CT_MARK_Y	"CT_MARK_Y"
#define SECTION_MARK_PER_ROW	"MARK_PER_ROW"
#define SECTION_ROW_SPACE	"ROW_SPACE"
#define SECTION_MARK_TER_SPACE	"MARK_TER_SPACE"
#define SECTION_MARK_CT_SPACE	"MARK_CT_SPACE"
#define SECTION_LAST_CT_NUM	"LAST_CT_NUM"

// -------------------------------------------- //

/************************************************/

new iHamCz = 0
new iMaxPlayer


new iAliveCt, iDeathCt
new iAliveTer, iDeathTer


public plugin_init() 
{
	
	register_plugin(PLUGIN, VERSION, AUTHOR)
	register_concmd("TFM_HUD/PlayerMark/TER_MARK_X", "SPR_TER_MARK_X")
	register_concmd("TFM_HUD/PlayerMark/TER_MARK_Y", "SPR_TER_MARK_Y")
	register_concmd("TFM_HUD/PlayerMark/CT_MARK_X", "SPR_CT_MARK_X")
	register_concmd("TFM_HUD/PlayerMark/CT_MARK_Y", "SPR_CT_MARK_Y")
	
	register_concmd("TFM_HUD/PlayerMark/MARK_PER_ROW", "SPR_MARK_PER_ROW")
	
	register_concmd("TFM_HUD/PlayerMark/ROW_SPACE", "SPR_ROW_SPACE")
	
	register_concmd("TFM_HUD/PlayerMark/TER_MARK_SPACE", "SPR_TER_MARK_SPACE")
	register_concmd("TFM_HUD/PlayerMark/CT_MARK_SPACE", "SPR_CT_MARK_SPACE")
	
	register_event("TeamInfo" , "Event_TeamInfo" , "a" )
	
	RegisterHam(Ham_Spawn, "player", "fw_PlayerSpawnPost", 1)
	RegisterHam(Ham_Killed, "player", "fw_PlayerKilledPost", 1)
	
	iMaxPlayer = get_maxplayers()
	
}

	
/*			PLAYER MARK POSITION			*/

//	Terrorist Mark
public SPR_TER_MARK_X(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_key(id, SECTION_TER_MARK_X, str_to_float(szArg))
}

public SPR_TER_MARK_Y(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_key(id, SECTION_TER_MARK_Y, str_to_float(szArg))
}

//	CT Mark 

public SPR_CT_MARK_X(id, level, cid)
{
	if (!cmd_access(id, level, cid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_key(id, SECTION_CT_MARK_X, str_to_float(szArg))
}

public SPR_CT_MARK_Y(id, level, cid)
{
	if (!cmd_access(id, level, cid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_key(id, SECTION_CT_MARK_Y, str_to_float(szArg))
}


/****************************************************************/

//		MARK PER ROW
public SPR_MARK_PER_ROW(id, level, cid)
{
	if (!cmd_access(id, level, cid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_int_to_key(id, SECTION_MARK_PER_ROW, str_to_num(szArg))
}

//		ROW SPACE
public SPR_ROW_SPACE(id, level, cid)
{
	if (!cmd_access(id, level, cid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_key(id, SECTION_ROW_SPACE, str_to_float(szArg))
}

//		BL COLUMN SPACE
public SPR_TER_MARK_SPACE(id, level, cid)
{
	if (!cmd_access(id, level, cid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_key(id, SECTION_MARK_TER_SPACE, str_to_float(szArg))
}


//		GR COLUMN SPACE
public SPR_CT_MARK_SPACE(id, level, cid)
{
	if (!cmd_access(id, level, cid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_key(id, SECTION_MARK_CT_SPACE, str_to_float(szArg))
}

/****************************************************************/

public client_putinserver(id)
{
	
	set_task(0.1, "RegisterCzBotFunc_TASK", id + TASK_HAM_CZ)
	if (!is_user_bot(id))
	{
		if (iUserInfo[id])
			return
			
		iUserInfo[id] = TrieCreate()
		
		return
	}
	
	
	
	
}

public RegisterCzBotFunc_TASK(TASKID)
{
	if (!get_cvar_num("bot_quota"))
		return
		
	new id = TASKID - TASK_HAM_CZ
	
	if (!is_user_bot(id))
		return
		
	if (iHamCz)
	{
		if (is_user_alive(id))
			fw_PlayerSpawnPost(id)
			
		return
	}
	
	RegisterHamFromEntity(Ham_Spawn, id, "fw_PlayerSpawnPost", 1)
	RegisterHamFromEntity(Ham_Killed, id, "fw_PlayerKilledPost", 1)
	
	iHamCz = 1
}

public client_disconnect(id)
{
	remove_task(id + TASK_SHOWMARK)
	
	if (!iUserInfo[id])
		return
		
	TrieDestroy(iUserInfo[id])
}

public fw_PlayerKilledPost(iVictim, iKiller)
	ReUpdate_PlayerMark()
	
public fw_PlayerSpawnPost(id)
	ReUpdate_PlayerMark()

public Event_TeamInfo()
{
	/* UPDATE PLAYER INFO */
	ReUpdate_PlayerMark()
}


public Draw_PlayerMark(TASKID)
{
	new id = TASKID - TASK_SHOWMARK
	
	if (!is_user_connected(id))
		return
		
	if (is_user_bot(id))
		return
		
	draw_player_mark_icon(id)
	
}


public draw_player_mark_icon(id)
{
	new iWeaponMode
	
	if (is_ffa_on(iWeaponMode))
		return
		
	if (is_user_bot(id))
		return
	
	new iMarkPerRow = get_int_from_key(id, SECTION_MARK_PER_ROW)
	new Float:fRowSpace = get_float_from_key(id, SECTION_ROW_SPACE)
	new Float:fMarkSpace
	
	fMarkSpace = get_float_from_key(id, SECTION_MARK_CT_SPACE)
	DrawMark_CT(id, iMarkPerRow, fRowSpace, fMarkSpace)
}

stock DrawMark_CT(id, iMarkPerRow, Float:fRowSpace,Float:fMarkSpace)
{	
	new Float:fX = get_float_from_key(id, SECTION_CT_MARK_X)
	new Float:fY = get_float_from_key(id, SECTION_CT_MARK_Y)
	
	new iCount = 0
	new Float:fReduceX, Float:fReduceY
	
	new iCHANNEL_TGA = 0
	
	for (new i = 0; i < iAliveCt ; i++)
	{
		new Float:fFixedX = fX - fReduceX
		new Float:fFixedY = fY + fReduceY
		
		draw_player_mark(id, GR_MARK, fFixedX, fFixedY, CHANNEL_GR_START_TGA + iCHANNEL_TGA)
		
		fReduceX += fMarkSpace
		
		iCHANNEL_TGA++
		iCount++
		
		if (iCount > iMarkPerRow - 1)
		{
			iCount = 0
			fReduceY += fRowSpace
			fReduceX = 0.0
		}
	}
	
	
	for (new j = 0; j < iDeathCt; j++)
	{
		new Float:fFixedX = fX - fReduceX
		new Float:fFixedY = fY + fReduceY
		
		draw_player_mark(id, DEATH_MARK, fFixedX, fFixedY,CHANNEL_GR_START_TGA + iCHANNEL_TGA)
		
		fReduceX += fMarkSpace
		
		iCount++
		
		iCHANNEL_TGA++
		if (iCount > iMarkPerRow - 1)
		{
			iCount = 0
			fReduceY += fRowSpace
			fReduceX = 0.0
		}
	}
	
	new iTotal = iAliveCt + iDeathCt
	new iLastTotal = get_int_from_key(id, SECTION_LAST_CT_NUM)
	
	if (iTotal < iLastTotal)
	{
		new iResult = iLastTotal - iTotal
		for (new iResetId = 0 ; iResetId < iResult ; iResetId++)
		{
			MMCL_RemoveImage(id, HUDTYPE_TGA, CHANNEL_GR_START_TGA + iCHANNEL_TGA)
			iCHANNEL_TGA++
		}
	}
	
	set_int_to_key(id, SECTION_LAST_CT_NUM, iTotal)
}


stock draw_player_mark(id, szHud[], Float:fX, Float:fY, iChannel)
{
	if (!is_user_connected(id))
		return
	
	new szFullHud[128]
	
	formatex(szFullHud, sizeof szFullHud - 1, "%s/%s/%s.tga", TFM_TGA_DIRECTORY, MARK_DIRECTORY, szHud)
	
	if (!file_exists(szFullHud))
	{
		log_amx("CAN'T DRAW %s", szFullHud)
		return
	}
	formatex(szFullHud, sizeof szFullHud - 1, "%s/%s/%s", TFM_TGA_DIRECTORY, MARK_DIRECTORY, szHud)
	log_amx("DRAW %s", szFullHud)
	MMCL_DrawTGA(id, szFullHud, 255, 255, 255, 255, fX, fY, 1, 0, 0.0, 0.0, -1.0, iChannel)
}

stock ReUpdate_PlayerMark()
{
	iAliveCt = 0
	iAliveTer = 0
	iDeathCt = 0
	iDeathTer = 0
	
	new iListPlayer[33]
	new iListCounter = 0
	
	for (new id = 1; id <= iMaxPlayer; id++)
	{
		if (!is_user_connected(id))
			return
			
		if (!is_user_bot(id))
		{
			iListPlayer[iListCounter] = id
			iListCounter++
		}
		
		if (cs_get_user_team(id) == CS_TEAM_CT)
		{
			if (is_user_alive(id))
				iAliveCt++
			else	iDeathCt++
		}
		else	
		{
			if (is_user_alive(id))
				iAliveTer++
			else	iDeathTer++
		}
	}
	
	for (new i = 0; i < iListCounter; i++)
	{
		new id = iListPlayer[i]
		
		remove_task(id + TASK_SHOWMARK)
		set_task(1.0, "Draw_PlayerMark", id + TASK_SHOWMARK)
	}
	
	client_print(0, print_center, "CTA : %d | CTD : %d", iAliveCt, iDeathCt)
}

stock set_float_to_key(id, szKey[], Float:fInput)
{
	if (is_user_bot(id))
		return
		
	if (!iUserInfo[id])
		return
		
	TrieSetCell(iUserInfo[id],szKey, fInput)
}

stock Float:get_float_from_key(id, szKey[])
{
	if (is_user_bot(id))
		return 0.0
		
	if (!iUserInfo[id])
		return 0.0
		
	new Float:fOutput
	TrieGetCell(iUserInfo[id],szKey, fOutput)
	return fOutput
}
	

stock set_int_to_key(id, szKey[], iInput)
{
	if (is_user_bot(id))
		return
		
	if (!iUserInfo[id])
		return
		
	TrieSetCell(iUserInfo[id],szKey, iInput)
}

stock get_int_from_key(id, szKey[])
{
	if (is_user_bot(id))
		return 0
		
	if (!iUserInfo[id])
		return 0
		
	new iOutput
	TrieGetCell(iUserInfo[id],szKey, iOutput)
	return iOutput
}
