/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <cstrike>
#include <fakemeta>
#include <hamsandwich>
#include <xs>
#include <engine>
#include <ArmouryManager>
#include <weaponbox_info>
#include <player_api>
#include <xs>
#include <mmcl>

#include <cstrike_pdatas>
#include <cswpn_ultilities>

#include <fakemeta_util>
#include <celltrie>

#include <WpnMod_Included/LineInfo_Grenade.inc>
#include <WpnMod_Included/WM_COMMAND.inc>
#include <WpnMod_Included/WM_GlobalConstant.inc>
#include <WpnMod_Included/WM_BackWeapon.inc>
#include <WpnMod_Included/WM_DefaultArmoury>


#define MAX_WPN	32
#define MAX_SPAWN_POINT 15

/**************** TASK SECTION *************************/

#define TASK_CROSSHAIR_TOGGLE 2000

enum ( <<= 1)
{
	ST_NO_CROSSHAIR = 1, // a
	ST_MANUAL_DROP
}


/*		    TRIE KEY SECTION			*/

//	String
#define SECTION_WPN_SERIAL	"WPN_SERIAL"

#define SECTION_BASIC_SETTING	"BASIC_SETTING"

#define SECTION_V_MODEL "VIEW_MODEL"
#define SECTION_P_MODEL "PLAYER_MODEL"
#define SECTION_W_MODEL "WORLD_MODEL"

#define SECTION_WEAPON_NAME	"WEAPON_NAME"
#define SECTION_WPN_CLASS	"WEAPON_CLASS"
#define SECTION_SPAWN_FILE	"WEAPON_SPAWN_FILE"
#define SECTION_WPN_HUD		"WEAPON_HUD"
#define SECTION_WPN_SOUND	"WEAPON_SOUND"
#define SECTION_BACK_MODEL	"BACK_MODEL"

//	Integer
#define SECTION_GRENADE_ID	"GRENADE_ID" // THIS GRENADE REPLACES TO WHAT ? - Contact to CSW_
#define SECTION_COST_TYPE	"GRENADE_COST_TYPE"	// PAY COIN OR GP TO BUY GRENADE ?
#define SECTION_COST	"GRENADE_COST" // HOW MUCH DOES IT COST ?
#define SECTION_LEVEL	"GRENADE_LEVEL"	// WHAT LEVEL CAN BUY THIS GRENADE ?
	
	
#define SECTION_GRENADE_FRAMERATE	"GRENADE_FRAMERATE"
#define SECTION_GRENADE_SCALE	"GRENADE_SCALE"
#define SECTION_GRENADE_SPR_ID "GRENADE_SPR_ID"

#define SECTION_P_SUB	"P_MODEL_SUB"
#define SECTION_W_SUB	"W_MODEL_SUB"
#define SECTION_V_SUB	"V_MODEL_SUB"

#define SECTION_EQUIP_METHOD	"EQUIP_METHOD"

#define SECTION_GRENADE_VELOCITY	"GRENADE_VELOCITY"
#define SECTION_DETONATE_FLAG	"GRENADE_DETONATE_FLAG"


#define SECTION_GRENADE_RED	"GR_R"
#define SECTION_GRENADE_GREEN	"GR_G"
#define SECTION_GRENADE_BLUE	"GR_B"
#define SECTION_GRENADE_TW	"GR_TW"
#define SECTION_GRENADE_TRBN	"GR_BN"
#define SECTION_GRENADE_TSPR	"GR_TSPR"
#define SECTION_GRENADE_TRL	"GR_TRL"

#define SECTION_GRENADE_RED_2	"GR_R_2"
#define SECTION_GRENADE_GREEN_2	"GR_G_2"
#define SECTION_GRENADE_BLUE_2	"GR_B_2"
#define SECTION_GRENADE_TW_2	"GR_TW_2"
#define SECTION_GRENADE_TRBN_2	"GR_BN_2"
#define SECTION_GRENADE_TSPR_2	"GR_TSPR_2"
#define SECTION_GRENADE_TRL_2	"GR_TRL_2"

#define SECTION_WPN_DMG_BIT	"WPN_DMGBIT"

//	Float
#define SECTION_DMG_RADIUS	"DMG_RADIUS"
#define SECTION_WPN_DMG	"WPN_DMG"
#define SECTION_WPN_ACTIVE_TIME	"ACTIVE_TIME"
#define SECTION_WPN_REMOVE_TIME	"REMOVE_TIME"
#define SECTION_WPN_WEIGHT	"WPN_WEIGHT"
#define SECTION_SPEED_REDUCTION	"SPEED_REDUCTION"
#define SECTION_KNOCKBACK_POWER	"KNOCKBACK_POWER"
#define SECTION_DEPLOY_TIME	"DEPLOY_TIME"
#define SECTION_WPN_FALL_TIME	"FALL_TIME"
/********************************************************/

	
enum
{
	SLOT_HEGRENADE,
	SLOT_FLASHBANG,
	SLOT_SMOKEGRENADE
}

enum ( <<= 1 )
{
	DETONATE_ONTOUCH = 1, // a
	DETONATE_NO_SPR, // b
	DETONATE_NO_SOUND, // c
	TRAIL_ON_DETONATE, // d
	TRAIL_ON_MOVE, // e
	DAMAGE_ON_TOUCH // f
}
/************************** TRIE SECTION *******************************/


new Trie:weapon_StringInfo[MAX_WPN]

new Trie:iPrecachedModel
//	STORE INFORMATION OF WHAT FILE WAS ALREADY LOADED
new Trie:INI_Loaded

/***********************************************************************/



/*			MENU ID				*/
new iArmouryMenuID

/********************************************************/

/*		         ARRAY				*/
new iHasWeapon[33][3]


new Float:fSpawnVecs[MAX_SPAWN_POINT][3]
new iSpawnWeaponId[MAX_SPAWN_POINT]


/********************************************************/


/*			INTEGER				*/
new g_LoadType

new iTotalSpawnPoint
/********************************************************/

/*			ENUMERATION			*/

enum
{
	LOAD_NONE = 0,
	LOAD_FULL
}
/********************************************************/


/*			BIT TOOLS			*/

#define SetPlayerBit(%1,%2)      (%1 |= (1<<(%2&31)))
#define ClearPlayerBit(%1,%2)    (%1 &= ~(1 <<(%2&31)))
#define CheckPlayerBit(%1,%2)    (%1 & (1<<(%2&31)))


#define SetBit(%1,%2)      (%1[%2>>5] |= (1<<(%2 & 31)))
#define ClearBit(%1,%2)    (%1[%2>>5] &= ~(1<<(%2 & 31)))
#define CheckBit(%1,%2)    (%1[%2>>5] & (1<<(%2 & 31)))  

/********************************************************/

/*			BIT FIELD			*/



/********************************************************/

new g_weapon_count = 0

#define WPN_CONFIG_DIR	"WPN_MOD/GRENADE/CONFIGS"
#define WPN_SPAWN_DIR	"WPN_MOD/GRENADE/SPAWN"
#define WPN_SPEC_DIR	"WPN_MOD/GRENADE/SPEC"
#define WPN_ADD_DIR	"WPN_MOD/GRENADE/ADD"
#define WPN_MANAGER_DIR	"WPN_MOD/GRENADE"
#define	WPN_MANAGER_FILE	"MANAGER.CFG"

/*************************************************************/
#define HEGRENADE_MDL	"hegrenade"
#define FLASHBANG_MDL	"flashbang"
#define SMOKEGRENADE_MDL	"smokegrenade"

/*************************************************************/
//	FORWARDS

new ifw_GrenadeLoadData
new ifw_GrenadeCheckSerial
new ifw_GrenadeCreateArmoury
new ifw_GrenadeDamage
new ifw_ArmouryPickedUp

new ifw_UserCanEquipWpn
new ifw_UserCanTouchWpnBox
new ifw_UserCanTouchArmoury
new ifw_GrenadeLoaded

new ifw_Result

//	Trie

public plugin_natives()
{
	register_native("give_user_grenade", "_give_user_grenade", 1)
	register_native("get_grenade_real_id", "_get_grenade_real_id", 1)
	register_native("get_user_grenade", "_get_user_grenade", 1)
	register_native("find_grenade_by_model", "_find_grenade_model", 1)
	register_native("find_grenade_by_serial", "_find_grenade_by_serial", 1)
	register_native("get_grenade_level", "_get_grenade_level", 1)
	register_native("get_grenade_cost", "_get_grenade_cost", 1)
	register_native("get_grenade_cost_type", "_get_grenade_cost_type", 1)
	register_native("get_grenade_hud", "_get_grenade_hud", 1)
	register_native("get_grenade_weight", "_get_grenade_weight", 1)
	register_native("get_grenade_speed", "_get_grenade_speed", 1)
	register_native("get_grenade_radius", "_get_grenade_radius", 1)
	register_native("get_grenade_kb_power", "_get_grenade_kb_power",1 )
	register_native("set_grenade_load", "_set_grenade_load", 1)
	register_native("load_grenade_file", "_load_grenade_file", 1)
	register_native("get_grenade_count", "_get_grenade_count", 1)
	register_native("get_grenade_name", "_get_grenade_name", 1)
	register_native("reset_grenade_slot", "_reset_grenade_slot", 1)
	register_native("set_grenade_spawn", "nt_set_grenade_spawn", 1)
	register_native("is_valid_grenade", "nt_is_valid_grenade", 1)

}


public _give_user_grenade(id, iGrenadeId)
{
	if (!is_user_alive(id))
		return 0
		
	if (!nt_is_valid_grenade(iGrenadeId))
		return 0
	
	new iVip = cs_get_user_vip(id)
	
	new iEquipMethod = get_wpn_int_of_key(iGrenadeId, SECTION_EQUIP_METHOD)
	
	if ((iVip && !iEquipMethod)  || (!iVip && iEquipMethod  == EQ_VIP_ONLY))
		return 0
	
	if (!can_player_equip_grenade(id))	
		return 0
		
	if (iVip)
		cs_set_user_vip(id, 0 , 0, 0)
		
	new iGrenadeType = get_wpn_int_of_key(iGrenadeId, SECTION_GRENADE_ID)
	
	if (iGrenadeType == CSW_HEGRENADE)
	{
		engclient_cmd(id, "drop", "weapon_hegrenade")
		UT_StripPlayerWeapon(id, "weapon_hegrenade")
		iHasWeapon[id][SLOT_HEGRENADE] = iGrenadeId
	}
	else if (iGrenadeType == CSW_SMOKEGRENADE)
	{
		engclient_cmd(id, "drop", "weapon_smokegrenade")
		UT_StripPlayerWeapon(id, "weapon_smokegrenade")
		iHasWeapon[id][SLOT_SMOKEGRENADE] = iGrenadeId
	}
	else if (iGrenadeType == CSW_FLASHBANG)
	{
		engclient_cmd(id, "drop", "weapon_flashbang")
		UT_StripPlayerWeapon(id, "weapon_flashbang")
		iHasWeapon[id][SLOT_FLASHBANG] = iGrenadeId
	}
	
	new szGrenadeClass[32]
	get_weaponname(iGrenadeType, szGrenadeClass, sizeof szGrenadeClass - 1)
	
	new iGrenadeEnt = fm_give_item(id, szGrenadeClass)
	
	if (!iGrenadeEnt || !pev_valid(iGrenadeEnt))
		return 0
	
	engclient_cmd(id, szGrenadeClass)
	
	ExecuteHamB(Ham_Item_Deploy, iGrenadeEnt)
	
	if (iVip)
	{
		iVip = 0
		cs_set_user_vip(id, 0 , 0, 0)
	}
	return 1
}

public _get_grenade_real_id(iGrenadeId)
{
	if (!nt_is_valid_grenade(iGrenadeId))
		return 0
	
	new iGrenadeType = get_wpn_int_of_key(iGrenadeId, SECTION_GRENADE_ID)
	
	return iGrenadeType
}

public _get_user_grenade(id, iSLOT)
{
	if (!is_user_connected(id))
		return - 1
		
	if (iSLOT == CSW_HEGRENADE)
		return iHasWeapon[id][SLOT_HEGRENADE]
	else if (iSLOT == CSW_FLASHBANG)
		return iHasWeapon[id][SLOT_FLASHBANG]
	else if (iSLOT == CSW_SMOKEGRENADE)
		return iHasWeapon[id][SLOT_SMOKEGRENADE]
		
	return - 1
}

public _find_grenade_model(szModel[])
{
	param_convert(1)
	for (new i = 0; i < g_weapon_count; i++)
	{
		new szWorldModel[128]
		get_wpn_string_of_key(i, SECTION_W_MODEL, szWorldModel, sizeof szWorldModel - 1)
		
		if (equal(szModel, szWorldModel))
			return i
	}
	return -1
}

public _find_grenade_by_serial(szSerial[])
{
	param_convert(1)
	
	for (new i = 0; i < g_weapon_count; i++)
	{
		new szRealSerial[64]
		get_wpn_string_of_key(i, SECTION_WPN_SERIAL, szRealSerial, sizeof szRealSerial - 1)
		
		if (equal(szRealSerial, szSerial))
			return i
			
	}
	
	return -1
}

public _get_grenade_level(iGrenadeId)
{
	if (!nt_is_valid_grenade(iGrenadeId))
		return 0
		
	new iGrenadeLevel = get_wpn_int_of_key(iGrenadeId, SECTION_LEVEL)
	return iGrenadeLevel
}

public _get_grenade_cost(iGrenadeId)
{
	if (!nt_is_valid_grenade(iGrenadeId))
		return 0
		
	new iCost = get_wpn_int_of_key(iGrenadeId, SECTION_COST)
	return iCost
}

public _get_grenade_cost_type(iGrenadeId)
{
	if (!nt_is_valid_grenade(iGrenadeId))
		return 0
		
	new iCostType = get_wpn_int_of_key(iGrenadeId, SECTION_COST_TYPE)
	return iCostType
}

public _get_grenade_hud(iGrenadeId, szHud[], iLen)
{
	param_convert(2)
	
	if (!nt_is_valid_grenade(iGrenadeId))	
		return 
		
	get_wpn_string_of_key(iGrenadeId, SECTION_WPN_HUD, szHud, iLen)
}

public Float:_get_grenade_weight(iGrenadeId)
{
	if (!nt_is_valid_grenade(iGrenadeId))
		return 0.0
		
	new Float:fWeight = get_wpn_float_of_key(iGrenadeId, SECTION_WPN_WEIGHT, fWeight)
	
	return fWeight
}

public Float:_get_grenade_speed(iGrenadeId)
{
	if (!nt_is_valid_grenade(iGrenadeId))
		return 0.0
		
	new Float:fSpeed = get_wpn_float_of_key(iGrenadeId, SECTION_SPEED_REDUCTION)
	return fSpeed
}

public Float:_get_grenade_radius(iGrenadeId)
{
	if (!nt_is_valid_grenade(iGrenadeId))
		return 0.0
		
	new Float:fRadius = get_wpn_float_of_key(iGrenadeId, SECTION_DMG_RADIUS)
	return fRadius
}

public Float:_get_grenade_kb_power(iGrenadeId)
{
	if (!nt_is_valid_grenade(iGrenadeId))
		return 0.0
		
	new Float:fKnockBackPower = get_wpn_float_of_key(iGrenadeId, SECTION_KNOCKBACK_POWER)
	return fKnockBackPower
}

public _set_grenade_load(iLoadType)
	g_LoadType = iLoadType

public _load_grenade_file(szFile[], szExtension[], iIgnoreCondition)
{
	param_convert(1)
	param_convert(2)
	
	load_grenade_file(WPN_CONFIG_DIR, szFile, szExtension, iIgnoreCondition)
}

public _get_grenade_count()
	return g_weapon_count
	
public _get_grenade_name(iGrenadeId, szName[], iLen)
{
	if (!nt_is_valid_grenade(iGrenadeId))
		return
		
	get_wpn_string_of_key(iGrenadeId, SECTION_WEAPON_NAME, szName, iLen)
}

public _reset_grenade_slot(id, iSLOT_ID)
{
	if (iSLOT_ID == CSW_HEGRENADE)
	{
		iHasWeapon[id][SLOT_HEGRENADE] = -1
		return
	}
	
	if (iSLOT_ID == CSW_SMOKEGRENADE)
	{
		iHasWeapon[id][SLOT_SMOKEGRENADE] = -1
		return
	}
	
	if (iSLOT_ID == CSW_FLASHBANG)
	{
		iHasWeapon[id][SLOT_FLASHBANG] = -1
		return
	}
}

public nt_set_grenade_spawn(iArmouryPoint, iGrenadeId, Float:fOrigin[3])
	CreateArmoury(iArmouryPoint, iGrenadeId, fOrigin)
	
public nt_is_valid_grenade(iGrenadeId)
{
	if (iGrenadeId < 0 || iGrenadeId > g_weapon_count - 1)
		return 0
		
	return 1
}

public plugin_precache()
{
	register_forward(FM_SetModel, "fw_SetModelPost", 1)
	
	register_dictionary("TFM_Dictionary.txt")
	
	new szMenuTitle[128]
	formatex(szMenuTitle, sizeof szMenuTitle - 1, "%L", LANG_SERVER, "ARMOURY_MENU_TITLE")
	iArmouryMenuID = menu_create(szMenuTitle, "fw_ArmouryMenuSelected", -1)	
}

public plugin_init() 
{
	#define PLUGIN	 "[WPN MOD] Grenade"
	#define VERSION	 "- No Info -"
	#define AUTHOR	  "Redplane"
	
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	if (!iPrecachedModel)
		iPrecachedModel = TrieCreate()
		
	INI_Loaded = TrieCreate()
	
	forward_create()
	
	register_event("HLTV", "Event_RoundStart", "a", "1=0", "2=0")
	
	//	Console Command
	register_concmd(GRENADE_ARMOURY_CMD, "concmd_OpenArmouryMenu", ADMIN_ADMIN)
	
	//	Log Event
	register_logevent("LogEvent_RoundBegin" , 2 , "1=Round_Start")
	
	register_touch("armoury_entity", "player", "fw_ArmouryTouch")
	register_touch("weaponbox", "player", "fw_WpnBoxTouch")
	
	//	Message
	register_message(get_user_msgid("DeathMsg"), "fw_DeathMSG")
	
	RegisterHam(Ham_Touch, "grenade", "fw_GrenadeTouch")
	RegisterHam(Ham_Think, "grenade", "fw_GrenadeThink")
	
	RegisterHam(Ham_CS_Item_CanDrop, "weapon_hegrenade", "fw_ItemCanDrop")
	RegisterHam(Ham_CS_Item_CanDrop, "weapon_flashbang", "fw_ItemCanDrop")
	RegisterHam(Ham_CS_Item_CanDrop, "weapon_smokegrenade", "fw_ItemCanDrop")
	
	
	g_LoadType = LOAD_FULL
	
	new szManagerFile[256], szCfgDir[128], szMapName[32]
	
	get_mapname(szMapName, sizeof szMapName - 1)
	get_configsdir(szCfgDir, sizeof szCfgDir - 1)
	
	
	ExecuteForward(ifw_GrenadeLoadData, ifw_Result)
	
	formatex(szManagerFile, sizeof szManagerFile - 1, "%s/%s/%s.ngocvinh", szCfgDir, WPN_SPEC_DIR, szMapName)
	
	if (file_exists(szManagerFile))
	{
		for (new i = 0; i < file_size(szManagerFile, 1); i++)
		{
			new szTextInfo[64], iTextLen
			
			read_file(szManagerFile, i, szTextInfo, sizeof szTextInfo - 1, iTextLen)
			load_grenade_file(WPN_CONFIG_DIR, szTextInfo, "ini", 1)
		}
	}
	else
	{
		formatex(szManagerFile, sizeof szManagerFile - 1, "%s/%s/%s", szCfgDir, WPN_MANAGER_DIR, WPN_MANAGER_FILE)
		
		for (new i = 0; i < file_size(szManagerFile, 1); i++)
		{
			new szTextInfo[64], iTextLen
			
			read_file(szManagerFile, i, szTextInfo, sizeof szTextInfo - 1, iTextLen)
			load_grenade_file(WPN_CONFIG_DIR, szTextInfo, "ini", 0)
		}
	}
	
	formatex(szManagerFile, sizeof szManagerFile - 1, "%s/%s/%s.cfg", szCfgDir, WPN_ADD_DIR, szMapName)
	
	if (file_exists(szManagerFile))
	{
		for (new i = 0; i < file_size(szManagerFile, 1); i++)
		{
			new szTextInfo[64], iTextLen
			
			read_file(szManagerFile, i, szTextInfo, sizeof szTextInfo - 1, iTextLen)
			load_grenade_file(WPN_CONFIG_DIR, szTextInfo, "redplane", 1)
		}
	}
}



/*				SECTION	- CONSOLE COMMAND				*/

public concmd_OpenArmouryMenu(id)
{
	if (!is_user_alive(id))
		return
		
	if (!is_user_admin(id))
		return
		
	menu_display(id, iArmouryMenuID, 0)
}

/*****************************************************************************************/

/*				SECTION	- CONSOLE COMMAND				*/

public fw_HeGrenadeSelected(id)
{
	if (!is_user_alive(id))
		return
		
	if (_get_user_grenade(id, SLOT_HEGRENADE) < 0)
		return
		
	client_cmd(id, "weapon_hegrenade")
}

public fw_FlashBangSelected(id)
{
	if (!is_user_alive(id))
		return
		
	if (_get_user_grenade(id, SLOT_FLASHBANG) < 0)
		return
		
	client_cmd(id, "weapon_flashbang")
}

public fw_SmokeGrenadeSelected(id)
{
	if (!is_user_alive(id))
		return
		
	if (_get_user_grenade(id, SLOT_SMOKEGRENADE) < 0)
		return
		
	client_cmd(id, "weapon_smokegrenade")
}

/*****************************************************************************************/


/*                              SECTION EVENT						*/

public csred_WpnAttachToPlayerPost(id, iEnt, iWeaponId)
{
	if (!is_grenade(iWeaponId))
		return
		
	new iGrenadeId 
	
	if (iWeaponId == CSW_HEGRENADE)
		iGrenadeId = _get_user_grenade(id, SLOT_HEGRENADE)
	else if (iWeaponId == CSW_FLASHBANG)
		iGrenadeId = _get_user_grenade(id, SLOT_FLASHBANG)
	else if (iWeaponId == CSW_SMOKEGRENADE)
		iGrenadeId = _get_user_grenade(id, SLOT_SMOKEGRENADE)
	
	new szWeaponClass[32]
	
	if (!nt_is_valid_grenade(iGrenadeId))
	{
		get_weaponname(iWeaponId, szWeaponClass, sizeof szWeaponClass - 1)
		UT_UpdateWpnList(id, iWeaponId, 1, szWeaponClass, 1, 0)
		return
	}
	
	get_wpn_string_of_key(iGrenadeId, SECTION_WPN_CLASS, szWeaponClass, sizeof szWeaponClass - 1)
	UT_UpdateWpnList(id, iWeaponId, 1, szWeaponClass, 1, 0)
}

public csred_WpnDeploy_Pre(id, iEnt, iWeaponId)
{
	if (!is_user_alive(id))
	{
		if (is_grenade(iWeaponId))
			return PLUGIN_HANDLED
			
		return PLUGIN_CONTINUE
	}
	if (!is_grenade(iWeaponId))
	{
		remove_task(id + TASK_CROSSHAIR_TOGGLE)
		return PLUGIN_CONTINUE
	}
	
	
	if (UT_GetPlayerFOV(id) != 90)
		UT_SetPlayerFOV(id, 90)
	
	remove_task(id + TASK_CROSSHAIR_TOGGLE)
	
	new iParam[3]	
	
	
	new iGrenadeId 
	
	if (iWeaponId == CSW_HEGRENADE)
		iGrenadeId = _get_user_grenade(id, SLOT_HEGRENADE)
	else if (iWeaponId == CSW_FLASHBANG)
		iGrenadeId = _get_user_grenade(id, SLOT_FLASHBANG)
	else if (iWeaponId == CSW_SMOKEGRENADE)
		iGrenadeId = _get_user_grenade(id, SLOT_SMOKEGRENADE)
	
	if (!nt_is_valid_grenade(iGrenadeId) || _get_grenade_real_id(iGrenadeId) != iWeaponId)
	{
		iParam[0] = 0
		iParam[1] = iWeaponId
		iParam[2] = iEnt
		
		remove_task(id + TASK_CROSSHAIR_TOGGLE)
		set_task(0.1, "ToggleCrosshair_TASK", id + TASK_CROSSHAIR_TOGGLE, iParam, 3)
		fm_set_entity_visibility(iEnt, 0)
		
		set_pdata_int(id, m_bHasShield , 0, 5)
		
		DefaultDeploy(id, iEnt, iWeaponId)
		
		return PLUGIN_HANDLED
	}
	
	new iBasicSetting
	get_wpn_int_of_key(iGrenadeId, SECTION_BASIC_SETTING, iBasicSetting)
	
	iParam[0] = iBasicSetting
	iParam[1] = iWeaponId
	iParam[2] = iEnt
	
	//if (!CheckBit(b_CrosshairToggle, has_weapon[id]))
	//	iParam[0] = 0
	//else	
	//	iParam[1] = 1
	
	remove_task(id + TASK_CROSSHAIR_TOGGLE)
	set_task(0.1, "ToggleCrosshair_TASK", id + TASK_CROSSHAIR_TOGGLE, iParam, 3)
	
	fm_set_entity_visibility(iEnt)
	
	new Float:fDeployTime = get_wpn_float_of_key(iGrenadeId, SECTION_DEPLOY_TIME, fDeployTime)
	
	if (fDeployTime <= 0.0)
		fDeployTime = 1.5
		
	set_pdata_float(id, m_flNextAttack, fDeployTime, 5)
	set_pdata_float(iEnt, m_flNextPrimaryAttack, fDeployTime, 4)
	set_pdata_float(iEnt, m_flNextSecondaryAttack, fDeployTime, 4)
	set_pdata_float(iEnt, m_flTimeWeaponIdle, fDeployTime, 4)
	
	new szModelBuffer[250], iSubBody
	
	get_wpn_string_of_key(iGrenadeId, SECTION_V_MODEL, szModelBuffer, sizeof szModelBuffer - 1)
	set_pev(id, pev_viewmodel2, szModelBuffer)
	
	
	get_wpn_string_of_key(iGrenadeId, SECTION_P_MODEL, szModelBuffer, sizeof szModelBuffer - 1)
	iSubBody = get_wpn_int_of_key(iGrenadeId, SECTION_P_SUB)
	engfunc(EngFunc_SetModel, iEnt, szModelBuffer)
	set_pev(iEnt, pev_body, iSubBody)
	set_pev(id, pev_weaponmodel2, "")
	
	
	return PLUGIN_HANDLED
}

public csred_WpnHolster_Post(id, iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return
		
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	if (!is_grenade(iWeaponId))
		return
	
	new iGrenadeId = -1
	
	if (iWeaponId == CSW_HEGRENADE)
		iGrenadeId = _get_user_grenade(id, SLOT_HEGRENADE)
	else if (iWeaponId == CSW_FLASHBANG)
		iGrenadeId = _get_user_grenade(id, SLOT_FLASHBANG)
	else if (iWeaponId == CSW_SMOKEGRENADE)
		iGrenadeId = _get_user_grenade(id, SLOT_SMOKEGRENADE)
		
	if (!nt_is_valid_grenade(iGrenadeId))
	{
		if (BackWeapon_iSubBody[iWeaponId] > -1)
		{
			engfunc(EngFunc_SetModel, iEnt, BackWeapon_szModel[iWeaponId])
			set_pev(id, pev_body, BackWeapon_iSubBody[iWeaponId])
			fm_set_entity_visibility(iEnt, 1)
		}
		else
			fm_set_entity_visibility(iEnt, 0)
		return
	}
		
	new iSubBody = get_wpn_int_of_key(iGrenadeId, SECTION_BACK_MODEL)
	
	if (iSubBody > -1)
	{
		new szBackModel[128]
		get_wpn_string_of_key(iGrenadeId, SECTION_BACK_MODEL, szBackModel, sizeof szBackModel - 1)
		engfunc(EngFunc_SetModel, iEnt, szBackModel)
		set_pev(iEnt, pev_body, iSubBody)
		fm_set_entity_visibility(iEnt, 1)
	}
	else	fm_set_entity_visibility(iEnt, 0)
}

public ToggleCrosshair_TASK(iParam[3], TASKID)
{
	new id = TASKID - TASK_CROSSHAIR_TOGGLE
	
	if (!is_user_alive(id))
		return
		
	if (is_user_bot(id))
		return
		
	new iEnt = fm_get_active_item(id)
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	if (iEnt != iParam[2])
		return
		
	if (!is_grenade(iWeaponId))
		return

		
	if (!(iParam[0] & ST_NO_CROSSHAIR))
		UT_CS_Crosshair_Toggle(id, 1, 0)
	else	UT_CS_Crosshair_Toggle(id, 0, 0)
	
}

public Event_RoundStart()
{
	
}

public LogEvent_RoundBegin()
{
	for (new iArmouryPoint = 0; iArmouryPoint < iTotalSpawnPoint; iArmouryPoint++)
		CreateArmoury(iArmouryPoint, -1, Float:{0.0, 0.0, 0.0})
}
/*				ENGINE FUNCTION				*/

public fw_ArmouryTouch(iEnt, id)
{
	if (!iEnt || !pev_valid(iEnt))
		return PLUGIN_HANDLED
		
	if (!is_user_alive(id))
		return PLUGIN_CONTINUE
			
	new iArmouryId = pev(iEnt, pev_ArmouryId)
	new iArmouryType = pev(iEnt, pev_ArmouryType)
	
	if (iArmouryType != ARMOURY_GRENADE)
		return PLUGIN_CONTINUE
	
	new iGrenadeType
	TrieGetCell(weapon_StringInfo[iArmouryId], SECTION_GRENADE_ID, iGrenadeType)
	
	if (user_has_weapon(id, iGrenadeType))
		return PLUGIN_HANDLED
	
	if (cs_get_user_shield(id))
		return PLUGIN_HANDLED;
		
	if (!can_player_touch_armouy(id))
		return PLUGIN_HANDLED
		
	if (iGrenadeType == CSW_HEGRENADE)
		iHasWeapon[id][SLOT_HEGRENADE] = iArmouryId
	else if (iGrenadeType == CSW_FLASHBANG)
		iHasWeapon[id][SLOT_FLASHBANG] = iArmouryId
	else if (iGrenadeType == CSW_SMOKEGRENADE)
		iHasWeapon[id][SLOT_SMOKEGRENADE] = iArmouryId
		
		
	new szGrenadeClass[32]
	get_weaponname(iGrenadeType, szGrenadeClass, sizeof szGrenadeClass - 1)
	
	new iGrenadeEnt = fm_give_item(id, szGrenadeClass)
	
	engclient_cmd(id, szGrenadeClass)
	
	ExecuteHamB(Ham_Item_Deploy, iGrenadeEnt)
	
	UT_SendCurWeaponMsg(id, 1, iGrenadeType, 1, 1)
	
	ExecuteForward(ifw_ArmouryPickedUp, ifw_Result, id, iEnt)
	
	engfunc(EngFunc_RemoveEntity, iEnt)
	
	return PLUGIN_HANDLED
}



public fw_WpnBoxTouch(iEnt, id)
{
	if (!is_user_alive(id))
		return PLUGIN_CONTINUE
		
	if (!iEnt || !pev_valid(iEnt))
		return PLUGIN_CONTINUE
	
	if (!IsWeaponBoxCanTouch(iEnt))	
		return PLUGIN_HANDLED
		
	if (!IsCsRedWpnBox(iEnt))
		return PLUGIN_CONTINUE
		
	new iState = pev(iEnt, pev_iWpnBoxState)
	
	new iGrenadeId = pev(iEnt, pev_iGrenadeId)
	
	if (iState == WpnBoxGrenadeReady)
	{	
		new iGrenadeType
		TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_ID, iGrenadeType)
		
		if (user_has_weapon(id, iGrenadeType))
			return PLUGIN_HANDLED
			
		if (!can_player_touch_wpnbox(id)) 
			return PLUGIN_HANDLED
			
		if (iGrenadeType == CSW_FLASHBANG)
			iHasWeapon[id][SLOT_FLASHBANG] = iGrenadeId
		else if (iGrenadeType == CSW_SMOKEGRENADE)
			iHasWeapon[id][SLOT_SMOKEGRENADE] = iGrenadeId
		else if (iGrenadeType == CSW_HEGRENADE)
			iHasWeapon[id][SLOT_HEGRENADE] = iGrenadeId
			
		new szGrenadeClass[32]
		get_weaponname(iGrenadeType, szGrenadeClass, sizeof szGrenadeClass - 1)
		
		new iGrenadeEnt = fm_give_item(id, szGrenadeClass)
		
		if (iGrenadeEnt < 0|| !pev_valid(iGrenadeEnt))
			return PLUGIN_HANDLED
			
		engclient_cmd(id, szGrenadeClass)
		ExecuteHamB(Ham_Item_Deploy, iGrenadeEnt)
		UT_SendCurWeaponMsg(id, 1, iGrenadeType, 1, 1)
		
		//engfunc(EngFunc_RemoveEntity, iEnt)
		fm_remove_weaponbox(iEnt)
		return PLUGIN_HANDLED
	}
	else if (iState == WpnBoxNormalGrenadeReady)
	{		
		if (user_has_weapon(id, iGrenadeId))
		{
			if (iGrenadeId == CSW_FLASHBANG)
			{
				if (_get_user_grenade(id, SLOT_FLASHBANG) > -1)
					return PLUGIN_HANDLED
			}
			else if (iGrenadeId == CSW_SMOKEGRENADE)
			{
				if (_get_user_grenade(id, SLOT_SMOKEGRENADE) > - 1)
					return PLUGIN_HANDLED
			}
			else if (iGrenadeId == CSW_HEGRENADE)
			{
				if (_get_user_grenade(id, SLOT_HEGRENADE) > - 1)
					return PLUGIN_HANDLED
			}
		}
			
		if (!can_player_touch_wpnbox(id))
			return PLUGIN_HANDLED
		
		new szWeaponName[32]
		get_weaponname(iGrenadeId, szWeaponName, sizeof szWeaponName - 1)
		new iGrenadeEnt = fm_give_item(id, szWeaponName)
		
		if (iGrenadeEnt < 0 || !pev_valid(iGrenadeEnt))
			return PLUGIN_HANDLED
			
		engclient_cmd(id, szWeaponName)
		ExecuteHamB(Ham_Item_Deploy, iGrenadeEnt)
		UT_SendCurWeaponMsg(id, 1, iGrenadeId, 1, 1)
		
		fm_remove_weaponbox(iEnt)
		return PLUGIN_HANDLED
	}
	return PLUGIN_CONTINUE
	
}
/************************************************************************/

/***************		MESSAGE FUNCTION		*************************/

public fw_DeathMSG(msg_id, msg_dest, msg_entity)
{
	static szTruncatedWeapon[33], iAttacker, iVictim
	get_msg_arg_string(4, szTruncatedWeapon, charsmax(szTruncatedWeapon))
	
	// Get attacker and victim
	iAttacker = get_msg_arg_int(1)
	iVictim = get_msg_arg_int(2)
	
	if (!is_user_connected(iVictim))
		return PLUGIN_CONTINUE
		
	if (!is_user_connected(iAttacker))
		return PLUGIN_CONTINUE
		
	if (!equal(szTruncatedWeapon, "grenade"))
		return PLUGIN_CONTINUE
		
	//if (iTakeGrenadeDmg[iVictim])
	//{
	//	iTakeGrenadeDmg[iVictim] = 0
	//	return PLUGIN_HANDLED
	//}
	
	return PLUGIN_CONTINUE
}

/*****************************************************************************************/

public fw_GrenadeTouch(iGrenadeEnt, id)
{
	if (iGrenadeEnt < 0)
		return 
	
	if (!pev_valid(iGrenadeEnt))
		return 
	
	if (id == pev(iGrenadeEnt, pev_owner))
		return
		
	new iGrenadeId = pev(iGrenadeEnt, pev_iGrenadeId)
	new iGrenadeType = pev(iGrenadeEnt,  pev_iGrenadeType)
	
	new Float:fOrigin[3]
	pev(iGrenadeEnt, pev_origin, fOrigin)
			
	if (iGrenadeType != GRENADE_CLASS_NEW)
		return 
	
	if (!nt_is_valid_grenade(iGrenadeId))
		return 
	
	new iDetonateFlag
	
	TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_DETONATE_FLAG, iDetonateFlag)
	
	set_pev(iGrenadeEnt, pev_fGrenadeFallStatus, 1.0)
	
	if (iDetonateFlag & DETONATE_ONTOUCH)
	{	
		new Float:fActiveTime
		pev(iGrenadeEnt, pev_fGrenadeActiveTime, fActiveTime)
		
		new Float:fDamage
		TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_WPN_DMG, fDamage)
		
		new szGrenadeHud[64]
		TrieGetString(weapon_StringInfo[iGrenadeId], SECTION_WPN_HUD, szGrenadeHud, sizeof szGrenadeHud - 1)
		
		if (get_gametime() < fActiveTime)
		{
			new iSpriteId
			new szSound[128]
			
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_SPR_ID, iSpriteId)
			TrieGetString(weapon_StringInfo[iGrenadeId], SECTION_WPN_SOUND, szSound, sizeof szSound - 1)
			
			GrenadeDamage(iGrenadeEnt, iGrenadeId, id, 20.0, fDamage, DMG_CRUSH, szGrenadeHud, iSpriteId, szSound)
		}
		else
		{
			new iSpriteId
			new szSound[128]
			
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_SPR_ID, iSpriteId)
			TrieGetString(weapon_StringInfo[iGrenadeId], SECTION_WPN_SOUND, szSound, sizeof szSound - 1)
			
			GrenadeDamage(iGrenadeEnt, iGrenadeId, -1, 20.0, fDamage, DMG_CRUSH, szGrenadeHud, iSpriteId, szSound)
		}
	}
	else
	{
		if (!pev(iGrenadeEnt, pev_iGrenadeActive))
		{
			set_pev(iGrenadeEnt, pev_movetype, MOVETYPE_NONE)
			set_pev(iGrenadeEnt, pev_gravity, 0.1)
			engfunc(EngFunc_DropToFloor, iGrenadeEnt)
			set_pev(iGrenadeEnt, pev_iGrenadeActive, 1)
		}
	}
}

public fw_GrenadeThink(iEnt)
{
	if (iEnt < 0)
		return HAM_IGNORED
	
	if (!pev_valid(iEnt))
		return HAM_IGNORED
	
	new iGrenadeId = pev(iEnt, pev_iGrenadeId)
	new iGrenadeType = pev(iEnt,  pev_iGrenadeType)
	
	new Float:fOrigin[3]
	pev(iEnt, pev_origin, fOrigin)
			
	if (iGrenadeType != GRENADE_CLASS_NEW)
		return HAM_IGNORED
	
	if (!nt_is_valid_grenade(iGrenadeId))
		return HAM_SUPERCEDE
	
	new Float:fFallStatus
	pev(iEnt, pev_fGrenadeFallStatus, fFallStatus)
	
	if (fFallStatus <= 0.0)
	{
		new Float:fThinkTime, Float:fFallDownTime
				
		TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_WPN_REMOVE_TIME, fThinkTime)
		TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_WPN_FALL_TIME, fFallDownTime)
				
				
		set_pev(iEnt, pev_movetype, MOVETYPE_BOUNCE)
		set_pev(iEnt, pev_nextthink, get_gametime() + (fThinkTime - fFallDownTime))
		set_pev(iEnt, pev_fGrenadeFallStatus, 1.0)
				
		//	Set Angle
		new Float:fOrigin[3]
		pev(iEnt, pev_origin, fOrigin)
		new Float:fEndOrigin[3]
		pev(iEnt, pev_fGrenadeEndOrigin, fEndOrigin)
				
		new Float:fVecAngle[3]
		xs_vec_sub(fEndOrigin, fOrigin, fVecAngle)
		xs_vec_normalize(fVecAngle, fVecAngle)
		engfunc(EngFunc_MakeVectors, fVecAngle)
		vector_to_angle(fVecAngle, fVecAngle)
		set_pev(iEnt, pev_angles, fVecAngle)
		
		return HAM_SUPERCEDE
	}
	
	new szWeaponHUD[128]
	TrieGetString(weapon_StringInfo[iGrenadeId], SECTION_WPN_HUD, szWeaponHUD, sizeof szWeaponHUD - 1)
	
	new szWeaponSound[128]
	TrieGetString(weapon_StringInfo[iGrenadeId], SECTION_WPN_SOUND, szWeaponSound, sizeof szWeaponSound - 1)
	
	new iSPR_ID
	TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_SPR_ID, iSPR_ID)
	
	new Float:fDamageRadius
	TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_DMG_RADIUS, fDamageRadius)
	
	new Float:fDamage
	TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_WPN_DMG, fDamage)
	
	new iDamageBit
	TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_WPN_DMG_BIT, iDamageBit)
	
	GrenadeDamage(iEnt, iGrenadeId, -1 ,fDamageRadius, fDamage, iDamageBit, szWeaponHUD, iSPR_ID, szWeaponSound)
	
	return HAM_SUPERCEDE
}

public fw_ItemCanDrop(iEnt)
{
	
	if (!pev_valid(iEnt))
		return HAM_IGNORED
		
	new id = pev(iEnt, pev_owner)
	
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	if (!is_grenade(iWeaponId))
		return HAM_IGNORED
	
	new iGrenadeId = _get_user_grenade(id, iWeaponId)
	
	if (nt_is_valid_grenade(iGrenadeId))
	{
		new iBasicSetting
		TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_BASIC_SETTING, iBasicSetting)
		
		if (!(iBasicSetting & ST_MANUAL_DROP))
			return HAM_IGNORED
	}
	
	SetHamReturnInteger(1)
	return HAM_SUPERCEDE
}
/*********************** FAKEMETA FUNCTION ******************************/

public fw_SetModelPost(iEnt, szModel[])
{
	if (!pev_valid(iEnt))
		return 
		
	new iWeaponId = UT_WorldModelToWeaponId(szModel)
	
	if (!is_grenade(iWeaponId))
		return
		
	new szClassName[32]
	pev(iEnt, pev_classname, szClassName, sizeof szClassName - 1)
	
	new id = pev(iEnt, pev_owner)
	
	if (!is_user_connected(id))
		return
		
	if (equal(szClassName, "grenade"))
	{	
		new iGrenadeType = cs_get_grenade_type(iEnt)
		
		new iGrenadeId = -1 
		
		if (iGrenadeType == CSW_HEGRENADE)
			iGrenadeId = _get_user_grenade(id, SLOT_HEGRENADE)
		else if (iGrenadeType == CSW_SMOKEGRENADE)
			iGrenadeId = _get_user_grenade(id, SLOT_SMOKEGRENADE)
		else if (iGrenadeType == CSW_SMOKEGRENADE)
			iGrenadeId = _get_user_grenade(id, SLOT_SMOKEGRENADE)
			
		if( nt_is_valid_grenade(iGrenadeId))
		{
			set_pev(iEnt, pev_iGrenadeId, iGrenadeId)
			set_pev(iEnt,  pev_iGrenadeType, GRENADE_CLASS_NEW)
			set_pev(iEnt, pev_owner, id)
			set_pev(iEnt , pev_iGrenadeActive, 0)
			
			
				
			new Float:fTime
			new Float:fCurrentTime = get_gametime()
		
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_WPN_ACTIVE_TIME, fTime)
			set_pev(iEnt, pev_fGrenadeActiveTime, fCurrentTime + fTime)
			
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_WPN_REMOVE_TIME, fTime)
			
			new Float:fFallTime
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_WPN_FALL_TIME, fFallTime)
			
			if (fFallTime < fTime)
			{
				set_pev(iEnt, pev_fGrenadeFallStatus, 0.0)
				set_pev(iEnt, pev_nextthink, fCurrentTime + fFallTime) // Falldown Time
			}
			else	
			{
				set_pev(iEnt, pev_fGrenadeFallStatus, 1.0)
				set_pev(iEnt, pev_nextthink, fCurrentTime + fTime) // Explode time
			}
			
			//	TRAIL
			
			new iDetonationFlag
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_DETONATE_FLAG, iDetonationFlag)
			
			if (iDetonationFlag & TRAIL_ON_MOVE)
			{
				new iSpriteId, iRed, iBlue, iGreen, iWidth, iBrightness, iLife
				
				TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_TSPR, iSpriteId)
				TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_RED, iRed)
				TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_GREEN, iGreen)
				TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_BLUE, iBlue)
				TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_TW, iWidth)
				TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_TRBN, iBrightness)
				TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_TRL, iLife)
				
				UT_DrawGrenadeTrail(iEnt, iSpriteId, iRed, iGreen, iBlue, iWidth, iBrightness, iLife)
			}
			
			new szModelBuffer[250], iSubBody
			TrieGetString(weapon_StringInfo[iGrenadeId], SECTION_W_MODEL, szModelBuffer, sizeof szModelBuffer - 1)
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_W_SUB, iSubBody)
			engfunc(EngFunc_SetModel, iEnt, szModelBuffer)
			set_pev(iEnt, pev_body, iSubBody)
			
			/****************************************************/
	
	
			new iOrigin[3], iEndOrigin[3]
			new Float:fOrigin[3], Float:fEndOrigin[3]
			
		
			/****************************************************/
			
			//	Retrieve Origin (Weapon Origin | End Origin)
			
			get_user_origin(id, iOrigin, 1)
			get_user_origin(id, iEndOrigin, 3)
			
			IVecFVec(iOrigin, fOrigin)
			IVecFVec(iEndOrigin, fEndOrigin)
			
			set_pev(iEnt, pev_origin, fOrigin)
			set_pev(iEnt, pev_fGrenadeEndOrigin, fEndOrigin)
			/****************************************************/
			
			//	Calculate Velocity
			new Float:flSpeed
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_VELOCITY, flSpeed)
			
			
			new Float:fVelocity[3]
			xs_vec_sub(fEndOrigin, fOrigin, fVelocity)
			xs_vec_normalize(fVelocity, fVelocity)
			
			xs_vec_mul_scalar(fVelocity, flSpeed, fVelocity)  
			
			set_pev(iEnt, pev_velocity, fVelocity)
			set_pev(iEnt, pev_movetype, MOVETYPE_FLY)
			
			/****************************************************/
			
			//	Calculate Angle
			
			new Float:fVecAngle[3]
			xs_vec_sub(fEndOrigin, fOrigin, fVecAngle)
			xs_vec_normalize(fVecAngle, fVecAngle)
			engfunc(EngFunc_MakeVectors, fVecAngle)
			vector_to_angle(fVecAngle, fVecAngle)
			set_pev(iEnt, pev_angles, fVecAngle)
			
			/****************************************************/
			
		}
		else
		{
			set_pev(iEnt , pev_iGrenadeId, -1)
			set_pev(iEnt, pev_iGrenadeType, GRENADE_CLASS_NORMAL)
		}
		
	}
	else if (equal(szClassName, "weaponbox"))
	{
		new iGrenadeType = cs_get_grenade_type_model(szModel)
		
		new iGrenadeId = -1 
		
		if (iGrenadeType == CSW_HEGRENADE)
			iGrenadeId = _get_user_grenade(id, SLOT_HEGRENADE)
		else if (iGrenadeType == CSW_FLASHBANG)
			iGrenadeId = _get_user_grenade(id, SLOT_FLASHBANG)
		else if (iGrenadeType == CSW_SMOKEGRENADE)
			iGrenadeId = _get_user_grenade(id, SLOT_SMOKEGRENADE)
		else	return	
			
		if (!nt_is_valid_grenade(iGrenadeId))
		{	
			set_pev(iEnt, pev_iGrenadeId, iGrenadeType)
			set_pev(iEnt, pev_iWpnBoxState, WpnBoxNormalGrenadeWait)
			set_task(WEAPONBOX_ACTIVE_TIME, "ActiveWeaponBox_TASK", iEnt + TASK_ACTIVE_WEAPONBOX)	
			
			
			
		}
		else
		{	
			new szModelBuffer[250], iSubBody
			TrieGetString(weapon_StringInfo[iGrenadeId], SECTION_W_MODEL, szModelBuffer, sizeof szModelBuffer - 1)
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_W_SUB, iSubBody)
			engfunc(EngFunc_SetModel, iEnt, szModelBuffer)
			set_pev(iEnt, pev_body, iSubBody)
			
			set_pev(iEnt, pev_iGrenadeId, iGrenadeId)
			set_pev(iEnt, pev_iWpnBoxState, WpnBoxGrenadeWait)
			set_pev(iEnt, pev_owner, id)
				
			set_task(WEAPONBOX_ACTIVE_TIME, "ActiveWeaponBox_TASK", iEnt + TASK_ACTIVE_WEAPONBOX)
			
		}
	}
}

/***************************		TASK SECTION		***********************************************/

public ActiveWeaponBox_TASK(TASKID)
{
	new iEnt = TASKID - TASK_ACTIVE_WEAPONBOX
	
	if (!pev_valid(iEnt))
		return
		
	new iWeaponBoxState = pev(iEnt, pev_iWpnBoxState)
	
	if (iWeaponBoxState == WpnBoxNormalGrenadeWait)
		set_pev(iEnt, pev_iWpnBoxState, WpnBoxNormalGrenadeReady)
	else if (iWeaponBoxState == WpnBoxGrenadeWait)
		set_pev(iEnt, pev_iWpnBoxState, WpnBoxGrenadeReady)
}

/**************************************       GRENADE MENU SECTION	******************************************/



			// 	CALL WHEN GRENADE ARMOURY MENU OPENS
		
public fw_ArmouryMenuSelected(id, iMenuId, iItemId)
{
	if (!is_user_alive(id))
		return
		
	if (iItemId == MENU_EXIT)
		return
	
	if (iTotalSpawnPoint > MAX_SPAWN_POINT - 1)
		return
		
	new szItemName[32], szInfo[3], iCALL_BACK, iACCESS_TYPE
	menu_item_getinfo(iMenuId, iItemId, iACCESS_TYPE, szInfo, sizeof szInfo - 1, szItemName, sizeof szItemName - 1, iCALL_BACK)
	
	new iWeaponId = str_to_num(szInfo)
	
	new szCfgDir[128], szMapName[32]
	
	get_mapname(szMapName, sizeof szMapName - 1)
	get_configsdir(szCfgDir, sizeof szCfgDir - 1)
	
	new szWeaponDirectory[256]
	formatex(szWeaponDirectory, sizeof szWeaponDirectory - 1, "%s/%s/%s", szCfgDir, WPN_SPAWN_DIR,szMapName)
	
	if (!dir_exists(szWeaponDirectory))
		mkdir(szWeaponDirectory)
	
	if (!dir_exists(szWeaponDirectory))
		return
		
	new iOrigin[3]
	get_user_origin(id, iOrigin, 0)
	
	new line[128]
	format(line, 127, "%d %d %d", iOrigin[0] ,iOrigin[1], iOrigin[2])
	
	new szSpawnFile[128]
	
	TrieGetString(weapon_StringInfo[iWeaponId], SECTION_SPAWN_FILE, szSpawnFile, sizeof szSpawnFile - 1)
	
	write_file(szSpawnFile, line, -1)
	
	
	IVecFVec(iOrigin, fSpawnVecs[iTotalSpawnPoint])
	
	menu_display(id, iMenuId, 0)
	iSpawnWeaponId[iTotalSpawnPoint] = iWeaponId
	
	iTotalSpawnPoint++
}



/**************************************       ******* **** *******	******************************************/






/********************************************	AMXX FORWARD	***************************************************/
public client_putinserver(id)
{
	iHasWeapon[id][SLOT_HEGRENADE] = -1
	iHasWeapon[id][SLOT_FLASHBANG] = -1
	iHasWeapon[id][SLOT_SMOKEGRENADE] = - 1
}

stock load_grenade_file(szDirectory[], szFile[], szExtension[], iIgnore_AllConditions)
{
	if (g_weapon_count > MAX_WPN - 1)
		return
	
	if (TrieKeyExists(INI_Loaded, szFile))
		return
		
	new szLoadingFile[256]
	new szCfgDir[128]
	
	get_configsdir(szCfgDir, sizeof szCfgDir - 1)
	
	formatex(szLoadingFile, sizeof szLoadingFile - 1, "%s/%s/%s.%s", szCfgDir, szDirectory, szFile, szExtension)
	
	if (!file_exists(szLoadingFile))
		return
		
	if (!iIgnore_AllConditions)
	{
		if (g_LoadType == LOAD_NONE)
			return
	}
	
	new szTextInfo[256], iTextLen
	
	read_file(szLoadingFile, LINE_WPN_NAME, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[iSerial]", "")
	if (!iIgnore_AllConditions)
	{
		ExecuteForward(ifw_GrenadeCheckSerial, ifw_Result,  szTextInfo)
		if (ifw_Result != PLUGIN_CONTINUE)
			return
	}
	
	//	Create weapon storage
	weapon_StringInfo[g_weapon_count] = TrieCreate()
	
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_WPN_SERIAL, szTextInfo)
	
	read_file(szLoadingFile, LINE_WPN_NAME, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_NAME]", "")
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_NAME, szTextInfo)
	
	read_file(szLoadingFile, LINE_WPN_ID, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_ID]", "")
	new iGrenadeType = str_to_num(szTextInfo)
	
	if (!is_grenade(iGrenadeType))
	{
		TrieDestroy(weapon_StringInfo[g_weapon_count])
		return
	}
	
	TrieGetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_ID, iGrenadeType)
	
		
	read_file(szLoadingFile, LINE_WPN_SETTING, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[iBasicSetting]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_BASIC_SETTING, read_flags(szTextInfo))
	
	/*					MODEL SECTION					*/
	
	new szWeaponModel[250], szSubBody[3]
	read_file(szLoadingFile, LINE_WPN_W_MODEL, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[W_MODEL]", "")
	parse(szTextInfo, szWeaponModel, sizeof szWeaponModel - 1, szSubBody, sizeof szSubBody - 1)
	
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_W_SUB, str_to_num(szSubBody))
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_W_MODEL, szWeaponModel)
	engfunc(EngFunc_PrecacheModel, szWeaponModel)
	
	// Player Model
	read_file(szLoadingFile, LINE_WPN_P_MODEL, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[P_MODEL]", "")
	parse(szTextInfo, szWeaponModel, sizeof szWeaponModel - 1, szSubBody, sizeof szSubBody - 1)
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_P_SUB, str_to_num(szSubBody))
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_P_MODEL, szWeaponModel)
	engfunc(EngFunc_PrecacheModel, szWeaponModel)
	
	// View Model
	read_file(szLoadingFile, LINE_WPN_V_MODEL, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[V_MODEL]", "")
	parse(szTextInfo, szWeaponModel, sizeof szWeaponModel - 1, szSubBody, sizeof szSubBody - 1)
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_V_SUB, str_to_num(szSubBody))
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_V_MODEL, szWeaponModel)
	engfunc(EngFunc_PrecacheModel, szWeaponModel)
	
	
	/****************************************************************************************/
	
	read_file(szLoadingFile, LINE_WPN_HUD, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_HUD]", "")
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_WPN_HUD, szTextInfo)
	
	/****************************************************************************************/
	
	read_file(szLoadingFile, LINE_WPN_DEPLOYTIME, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_DEPLOY-TIME]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_DEPLOY_TIME, str_to_float(szTextInfo))
	
	/****************************************************************************************/
	
	read_file(szLoadingFile, LINE_WPN_RADIUS, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_RADIUS]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_DMG_RADIUS, str_to_float(szTextInfo))
	
	/****************************************************************************************/
	
	read_file(szLoadingFile, LINE_WPN_DMG, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_DMG]", "")
	new szDamage[10], szDamageBit[32]
	parse(szTextInfo, szDamage ,sizeof szDamage - 1, szDamageBit, sizeof szDamageBit - 1)
	
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WPN_DMG, str_to_float(szDamage))
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WPN_DMG_BIT, str_to_float(szDamageBit))
	
	/****************************************************************************************/
	
	read_file(szLoadingFile, LINE_WPN_WEIGHT, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WEIGHT]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WPN_WEIGHT, str_to_float(szTextInfo))
	
	/****************************************************************************************/
	
	read_file(szLoadingFile, LINE_WPN_SPEED, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[SPEED]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_SPEED_REDUCTION, str_to_float(szTextInfo))
	
	/****************************************************************************************/
	
	read_file(szLoadingFile, LINE_WPN_KB_POWER, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_KB]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_KNOCKBACK_POWER,  str_to_float(szTextInfo))
	
	/****************************************************************************************/
	
	read_file(szLoadingFile, LINE_WPN_COST, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_COST]", "")
	
	new szCost[10], szCostType[10], szLevel[10]
	
	parse(szTextInfo, szCost, sizeof szCost - 1, szCostType, sizeof szCostType - 1, szLevel, sizeof szLevel - 1)
	
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_COST, str_to_num(szCost))
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_COST_TYPE, str_to_num(szCostType))
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_LEVEL, str_to_num(szLevel))
	
	/****************************************************************************************/
	
	read_file(szLoadingFile, LINE_WPN_DELAY, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_DELAY]", "")
	new szActiveTime[10], szRemoveTime[10], szFallTime[10]
	parse(szTextInfo, szActiveTime, sizeof szActiveTime - 1, szRemoveTime, sizeof szRemoveTime - 1, szFallTime, sizeof szFallTime - 1)
	
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WPN_ACTIVE_TIME, str_to_float(szActiveTime))
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WPN_REMOVE_TIME, str_to_float(szRemoveTime))
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_WPN_FALL_TIME, str_to_float(szFallTime))
	
	/****************************************************************************************/
	
	read_file(szLoadingFile, LINE_WPN_MOVETYPE, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_MOVEMENT]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_VELOCITY, str_to_float(szTextInfo))
	
	/****************************************************************************************/
	
	read_file(szLoadingFile, LINE_WPN_DETONATION, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_DETONATION]", "")
	new iGrenDetonation = read_flags(szTextInfo)
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_DETONATE_FLAG, iGrenDetonation)
	
	
	if (!(iGrenDetonation & DETONATE_NO_SOUND))
	{
		read_file(szLoadingFile, LINE_WPN_SOUND, szTextInfo, sizeof szTextInfo - 1, iTextLen)
		replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_SOUND]", "")
		engfunc(EngFunc_PrecacheSound, szTextInfo)
		TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_WPN_SOUND, szTextInfo)
	}
	
	if (!(iGrenDetonation & DETONATE_NO_SPR))
	{
		read_file(szLoadingFile, LINE_WPN_SPR, szTextInfo, sizeof szTextInfo - 1, iTextLen)
		replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_SPR]", "")
		new szSPR[230], szFramerate[10], szScale[10]
		parse(szTextInfo, szSPR, sizeof szSPR - 1, szFramerate, sizeof szFramerate - 1, szScale, sizeof szScale - 1)
		new iSPR_ID = engfunc(EngFunc_PrecacheModel, szSPR)
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_SPR_ID, iSPR_ID)
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_FRAMERATE,  str_to_num(szFramerate))
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_SCALE, str_to_num(szScale))
	}
	
	if (iGrenDetonation & TRAIL_ON_DETONATE)
	{
		read_file(szLoadingFile, LINE_WPN_DETONATE_TRAIL, szTextInfo, sizeof szTextInfo - 1, iTextLen)
		replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_TRAIL]", "")
		new szSprite[64], szRed[5], szGreen[5], szBlue[5], szWidth[5], szBrightness[5], szLife[5]
		parse(szTextInfo, szSprite, sizeof szSprite - 1  ,szRed, sizeof szRed - 1, szGreen, sizeof szGreen - 1, szBlue, sizeof szBlue - 1, 
			szWidth, sizeof szWidth - 1,
			szBrightness, sizeof szBrightness - 1, szLife, sizeof szLife - 1)
				
				
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_RED, str_to_num(szRed))
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_GREEN, str_to_num(szGreen))
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_BLUE, str_to_num(szBlue))
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_TW, str_to_num(szWidth))
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_TRBN, str_to_num(szBrightness))
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_TRL, str_to_num(szLife))	
				
		new szSprFullName[256]
		formatex(szSprFullName, sizeof szSprFullName - 1, "sprites/%s.spr", szSprite)
				
		if (TrieKeyExists(iPrecachedModel, szSprFullName))
			TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_TSPR, engfunc(EngFunc_ModelIndex, szSprFullName))
		else
		{
			TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_TSPR, engfunc(EngFunc_PrecacheModel, szSprFullName))
			TrieSetCell(iPrecachedModel, szSprFullName, 1)
		}
	}
	
	if (iGrenDetonation & TRAIL_ON_MOVE)
	{
		read_file(szLoadingFile, LINE_WPN_MOVE_TRAIL, szTextInfo, sizeof szTextInfo - 1, iTextLen)
		replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_TRAIL2]", "")
		new szSprite[64], szRed[10], szGreen[10], szBlue[10], szWidth[10], szBrightness[5], szLife[5]
		parse(szTextInfo, szSprite, sizeof szSprite - 1  ,szRed, sizeof szRed - 1, szGreen, sizeof szGreen - 1, szBlue, sizeof szBlue - 1, 
		szWidth, sizeof szWidth - 1,
			szBrightness, sizeof szBrightness - 1, szLife, sizeof szLife - 1)
				
				
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_RED_2, str_to_num(szRed))
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_GREEN_2, str_to_num(szGreen))
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_BLUE_2, str_to_num(szBlue))
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_TW_2, str_to_num(szWidth))
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_TRBN_2, str_to_num(szBrightness))
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_TRL_2, str_to_num(szLife))	
				
		new szSprFullName[256]
		formatex(szSprFullName, sizeof szSprFullName - 1, "sprites/%s.spr", szSprite)
				
		if (TrieKeyExists(iPrecachedModel, szSprFullName))
			TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_TSPR_2, engfunc(EngFunc_ModelIndex, szSprFullName))
		else
		{
			TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_GRENADE_TSPR_2, engfunc(EngFunc_PrecacheModel, szSprFullName))
			TrieSetCell(iPrecachedModel, szSprFullName, 1)
		}
	}
	/****************************************************************************************/
	read_file(szLoadingFile, LINE_WPN_CLASS, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[WPN_CLASS]", "")
	
	switch (iGrenadeType)
	{
		case CSW_HEGRENADE:
			register_clcmd(szTextInfo, "fw_HeGrenadeSelected")
		case CSW_FLASHBANG:
			register_clcmd(szTextInfo, "fw_FlashBangSelected")
		case CSW_SMOKEGRENADE:
			register_clcmd(szTextInfo, "fw_SmokeGrenadeSelected")
	}
	
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_WPN_CLASS, szTextInfo)
	
	new szToggle[3]
	read_file(szLoadingFile, LINE_WPN_BACKWPN, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[BACK_WPN]", "")
	parse(szTextInfo, szToggle, sizeof szToggle - 1, szWeaponModel, sizeof szWeaponModel, szSubBody, sizeof szSubBody - 1)
	
	if (str_to_num(szToggle))
	{
		engfunc(EngFunc_PrecacheModel, szWeaponModel)
		TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_BACK_MODEL, szWeaponModel)
		TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_BACK_MODEL, str_to_num(szSubBody))
	}
	else	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_BACK_MODEL, -1)
	
	read_file(szLoadingFile, LINE_WPN_AS, szTextInfo, sizeof szTextInfo - 1, iTextLen)
	replace(szTextInfo, sizeof szTextInfo - 1, "[AS-MAP]", "")
	TrieSetCell(weapon_StringInfo[g_weapon_count], SECTION_EQUIP_METHOD,  str_to_num(szTextInfo))
	
	
	
	new szSpawnFile[256], szMapName[32]
	get_mapname(szMapName, sizeof szMapName - 1)
	
	formatex(szSpawnFile, sizeof szSpawnFile - 1, "%s/%s/%s/%s.cfg", szCfgDir, WPN_SPAWN_DIR, szMapName, szFile)
	
	TrieSetString(weapon_StringInfo[g_weapon_count], SECTION_SPAWN_FILE, szSpawnFile)
	
	new szInfo[10]
	formatex(szInfo, sizeof szInfo - 1, "%d", g_weapon_count)
	
	new szWeaponName[128]
	TrieGetString(weapon_StringInfo[g_weapon_count], SECTION_WEAPON_NAME, szWeaponName, sizeof szWeaponName - 1)
	
	menu_additem(iArmouryMenuID, szWeaponName, szInfo, ADMIN_ALL, -1)
	
	
	if (file_exists(szSpawnFile))
	{
		new Data[124]
		new pos[11][8]
		new len
		for (new iSpawnLine = 0; iSpawnLine < file_size(szSpawnFile, 1); iSpawnLine++)
		{
			
			if (iTotalSpawnPoint > MAX_SPAWN_POINT - 1)
				continue
				
			read_file(szSpawnFile , iSpawnLine , Data , 123 , len)
			
			parse(Data, pos[1], 7, pos[2], 7, pos[3], 7)
			// Origin
			fSpawnVecs[iTotalSpawnPoint][0] = str_to_float(pos[1]);
			fSpawnVecs[iTotalSpawnPoint][1] = str_to_float(pos[2]);
			fSpawnVecs[iTotalSpawnPoint][2] = str_to_float(pos[3]);
				
				
			iTotalSpawnPoint++
		}
	}
	
	TrieSetCell(INI_Loaded, szFile, 1)
	
	new iLoadedId = g_weapon_count 
	g_weapon_count++
	ExecuteForward(ifw_GrenadeLoaded, ifw_Result, iLoadedId)
}

stock cs_get_grenade_type( iEnt ) // VEN
{
	
	new iBits = get_pdata_int(iEnt, 114)
	if (iBits & (1<<0))
	{
		return CSW_HEGRENADE
	}
	else if (iBits & (1<<1))
	{
		return CSW_SMOKEGRENADE
	}
	else if (!iBits)
	{
		return CSW_FLASHBANG        
	}
	return 0
}

stock cs_get_grenade_type_model(szModel[])
{
	if (equal(szModel[7], "w_hegrenade", 11))
		return CSW_HEGRENADE
		
	if (equal(szModel[7], "w_flashbang", 11))
		return CSW_FLASHBANG
		
	if (equal(szModel[7], "w_smokegrenade", 14))
		return CSW_SMOKEGRENADE
		
	return 0
}

stock GrenadeDamage(iGrenadeEnt, iGrenadeId, iSpecificVictim, Float:fRadius, Float:fDamage, iDamageBit, szGrenadeHud[], iSPR_ID, szExplosionSound[])
{
	if (!iGrenadeEnt || !pev_valid(iGrenadeEnt))
		return
		
	new Float:fOrigin[3], Float:fVictimOrigin[3]
	
	new id = pev(iGrenadeEnt, pev_owner)
	
	if (!is_user_connected(id))
	{
		engfunc(EngFunc_RemoveEntity, iGrenadeEnt)
		return
	}
		
	pev(iGrenadeEnt, pev_origin, fOrigin)
	
	
	new iEntityId = 0
	
	for (iEntityId = 0; iEntityId < entity_count() ; iEntityId++)
	{
			
		if (!iEntityId || !pev_valid(iEntityId))
			continue
			
		if (iEntityId == iGrenadeEnt)
			continue
			
		if (!is_Ent_Breakable(iEntityId))
			continue
			
		
		if (ExecuteHamB(Ham_IsPlayer, iEntityId))
		{
			if (!is_user_connected(iEntityId))
				continue
				
			if (!is_user_alive(iEntityId))
				continue
			
			pev(iEntityId, pev_origin, fVictimOrigin)
			new Float:fDistance = get_distance_f(fOrigin, fVictimOrigin)
				
			if (iSpecificVictim != -1)
			{
				if (iEntityId != iSpecificVictim)
					continue
					
				fDistance = 0.0
			}
			
			if (fDistance >= fRadius)
				continue
				
			new CsTeams:iOwnerTeam = cs_get_user_team(id)
			new CsTeams:iVictimTeam = cs_get_user_team(iEntityId)
			
			if (!get_cvar_num("mp_friendlyfire"))
			{
				if (iOwnerTeam == iVictimTeam)		
					continue
			}
			
				
			
		
			new Float:fTmpDmg = fDamage - (fDamage / fRadius) * fDistance;	
			
			if (fTmpDmg <= 0.0)
				continue
				
			ExecuteHamB(Ham_TakeDamage, iEntityId, iGrenadeEnt, id, fTmpDmg, iDamageBit)
			
			if (!is_user_alive(iEntityId))
			{
				
				make_deathmsg(id, iEntityId, 0, szGrenadeHud)
				ExecuteForward(ifw_GrenadeDamage, ifw_Result, id, iEntityId, iGrenadeId)
			}
			
		}
		else
		{
			new szClassName[32]
			pev(iEntityId, pev_classname, szClassName, sizeof szClassName - 1)
			
			if (UT_IsBrushEnt(szClassName))
				get_brush_entity_origin(iEntityId, fVictimOrigin)
			else	pev(iEntityId, pev_origin, fVictimOrigin)
			
			new Float:fDistance = get_distance_f(fOrigin, fVictimOrigin)
			
			if (iSpecificVictim != -1)
			{
				if (iEntityId != iSpecificVictim)
					continue
					
				fDistance = 0.0
			}
				
			if (fDistance >= fRadius)
				continue
				
			new szClassname[32]
			pev(iEntityId, pev_classname, szClassname, sizeof szClassname - 1)
			
			
			new Float:fTmpDmg = fDamage - (fDamage / fRadius) * fDistance;	
			
			if (fTmpDmg <= 0.0)
			{
				//free_tr2(iTr)
				continue
			}
			
			//ExecuteHamB(Ham_TraceAttack, iEntityId, iGrenadeEnt, fTmpDmg, fDirection, iTr, DMG_GRENADE)
			ExecuteHamB(Ham_TakeDamage, iEntityId, iGrenadeEnt, id, fTmpDmg, iDamageBit)			
			
			if (pev(iEntityId, pev_spawnflags) & SF_BREAK_TOUCH)
				fm_fake_touch(id, iEntityId)
			//free_tr2(iTr)
			
		}
	}
	
	if (pev(iGrenadeEnt, pev_iGrenadeActive))
	{
		new iDetonationFlag
		TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_DETONATE_FLAG, iDetonationFlag)
		
		if (!(iDetonationFlag & DETONATE_NO_SPR))
		{
			new iFramerate
			new iScale
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_FRAMERATE, iFramerate)
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_SCALE, iScale)
			
			new iGrenOrigin[3]
			FVecIVec(fOrigin, iGrenOrigin)
			
			message_begin(MSG_BROADCAST, SVC_TEMPENTITY, iGrenOrigin)
			write_byte(TE_EXPLOSION)
			write_coord(iGrenOrigin[0])
			write_coord(iGrenOrigin[1])
			write_coord(iGrenOrigin[2])
			write_short(iSPR_ID)
			write_byte(iScale)
			write_byte(iFramerate) 
			write_byte(TE_EXPLFLAG_NOSOUND|TE_EXPLFLAG_NOPARTICLES)
			message_end()
			
		}
		
		if (!(iDetonationFlag & DETONATE_NO_SOUND))
			emit_sound(iGrenadeEnt, CHAN_AUTO, szExplosionSound, 1.0, ATTN_NORM, 0, PITCH_NORM)
			
		if (iDetonationFlag & TRAIL_ON_DETONATE)
		{
			new iGrenOrigin[3]
		
			FVecIVec(fOrigin, iGrenOrigin)
			
				
			new iSpriteId, iRed, iGreen, iBlue, iWidth, iBrightness, iLife
			
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_TSPR_2, iSpriteId)
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_RED_2, iRed)
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_GREEN_2, iGreen)
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_BLUE_2, iBlue)
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_TW_2, iWidth)
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_TRBN_2, iBrightness)
			TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_GRENADE_TRL_2, iLife)
			
				
				
			engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, fOrigin, 0)
			write_byte(TE_BEAMCYLINDER) // TE id
			engfunc(EngFunc_WriteCoord, fOrigin[0]) // x
			engfunc(EngFunc_WriteCoord, fOrigin[1]) // y
			engfunc(EngFunc_WriteCoord, fOrigin[2]) // z
			engfunc(EngFunc_WriteCoord, fOrigin[0]) // x axis
			engfunc(EngFunc_WriteCoord, fOrigin[1]) // y axis
			engfunc(EngFunc_WriteCoord, fOrigin[2] + (fRadius / 2)) // z axis
			write_short(iSpriteId) // sprite
			write_byte(0) // startframe
			write_byte(0) // framerate
			write_byte(iLife) // life
			write_byte(iWidth) // width
			write_byte(0) // noise
			write_byte(iRed) // red
			write_byte(iGreen) // green
			write_byte(iBlue) // blue
			write_byte(iBrightness) // brightness
			write_byte(0) // speed
			message_end()
			
		}
	}
	
	engfunc(EngFunc_RemoveEntity, iGrenadeEnt)

}

stock CreateArmoury(iPoint, iGrenadeId, Float:fOrigin[3])
{
	ExecuteForward(ifw_GrenadeCreateArmoury, ifw_Result, iGrenadeId)
	
	if (ifw_Result != PLUGIN_CONTINUE)
		return 0
		
	new iEnt = create_entity("armoury_entity")
	
	dllfunc( DLLFunc_Spawn, iEnt );
	
	
	set_pev(iEnt, pev_solid, SOLID_TRIGGER)
	set_pev(iEnt, pev_mins, {-3.0, -3.0, -3.0})
	set_pev(iEnt, pev_maxs, {3.0, 3.0, 3.0})
	set_pev(iEnt, pev_ArmouryType, ARMOURY_GRENADE)
	
	new iWeaponId
	
	if (iPoint < 0)
	{
		iWeaponId = iGrenadeId	
		set_pev(iEnt, pev_origin, fOrigin)
	}
	else	
	{
		iWeaponId = iSpawnWeaponId[iPoint]
		set_pev(iEnt, pev_origin, fSpawnVecs[iPoint])
	}
	
	set_pev(iEnt, pev_ArmouryId, iWeaponId)
	csred_SetArmouryStatus(iEnt, ARMOURY_ENABLED)
				
	
	new szModelBuffer[250], iSubBody
	TrieGetString(weapon_StringInfo[iGrenadeId], SECTION_W_MODEL, szModelBuffer, sizeof szModelBuffer - 1)
	TrieGetCell(weapon_StringInfo[iGrenadeId], SECTION_W_SUB, iSubBody)
	engfunc(EngFunc_SetModel, iEnt, szModelBuffer)
	set_pev(iEnt, pev_body, iSubBody)

	set_pev(iEnt, pev_ArmouryPoint, iPoint)
	return 1
}

stock is_Ent_Breakable(iEnt)
{
	if (!iEnt || !pev_valid(iEnt))
		return 0
	
	if ((entity_get_float(iEnt, EV_FL_health) > 0.0) && (entity_get_float(iEnt, EV_FL_takedamage) > 0.0) && !(entity_get_int(iEnt, EV_INT_spawnflags) & SF_BREAK_TRIGGER_ONLY))
		return 1
	
	return 0
}

stock can_player_touch_armouy(id)
{
	ExecuteForward(ifw_UserCanTouchArmoury, ifw_Result, id)
	
	if (ifw_Result != PLUGIN_CONTINUE)
		return 0
		
	return 1
}

stock can_player_touch_wpnbox(id)
{
	ExecuteForward(ifw_UserCanTouchWpnBox, ifw_Result, id)
	
	if (ifw_Result != PLUGIN_CONTINUE)
		return 0
		
	return 1
}

stock can_player_equip_grenade(id)
{
	ExecuteForward(ifw_UserCanEquipWpn, ifw_Result, id)
	
	if (ifw_Result != PLUGIN_CONTINUE)
		return 0
		
	return 1
}

stock forward_create()
{
	ifw_GrenadeLoadData = CreateMultiForward("GM_WeaponLoadData", ET_IGNORE)
	ifw_GrenadeCheckSerial = CreateMultiForward("GM_CheckWeaponSerial", ET_CONTINUE, FP_STRING)
	ifw_GrenadeCreateArmoury = CreateMultiForward("GM_ArmouryCreating", ET_CONTINUE, FP_CELL)
	ifw_GrenadeDamage = CreateMultiForward("GM_GrenadeDamage", ET_IGNORE, FP_CELL, FP_CELL, FP_CELL)
	ifw_ArmouryPickedUp = CreateMultiForward("GM_ArmouryPickedUp", ET_IGNORE, FP_CELL, FP_CELL)
	
	ifw_UserCanEquipWpn = CreateMultiForward("GM_UserCanEquipWpn", ET_CONTINUE, FP_CELL)
	ifw_UserCanTouchArmoury = CreateMultiForward("GM_UserCanTouchArmoury", ET_CONTINUE, FP_CELL)
	ifw_UserCanTouchWpnBox = CreateMultiForward("GM_UserCanTouchWpnBox", ET_CONTINUE, FP_CELL)
	ifw_GrenadeLoaded = CreateMultiForward("GM_WeaponLoaded", ET_CONTINUE, FP_CELL)
}

stock IsValidPlayer(id)
{
	if (!(1<= id <= iMaxPlayers))
		return 0
		
	if (!is_user_connected(id))
		return 0
		
	return 1
}

stock UT_DrawGrenadeTrail(iGrenadeEnt, iSpriteId, iRed, iGreen, iBlue, iWidth, iBrightness, iLife)
{
	if (!pev_valid(iGrenadeEnt))
		return
		
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_BEAMFOLLOW) // TE id
	write_short(iGrenadeEnt) // entity
	write_short(iSpriteId) // sprite
	write_byte(iLife) // life
	write_byte(iWidth) // width
	write_byte(iRed) // r
	write_byte(iGreen) // g
	write_byte(iBlue) // b
	write_byte(iBrightness) // brightness
	message_end()
}

/********************************************************************************/

#define m_pActiveItem 	373
#define m_flNextAttack 	 83
#define m_flNextPrimaryAttack	46

stock fm_get_active_item(id)
	return get_pdata_cbase(id, m_pActiveItem, 5)


stock Float:fm_get_next_attack(id)
	return get_pdata_float(id, m_flNextAttack, 5)

stock fm_set_next_attack(id, Float:fTime)
	set_pdata_float(id, m_flNextAttack, fTime, 5)

stock fm_set_weapon_next_attack(iEnt, Float:fTime)
	set_pdata_float(iEnt, m_flNextPrimaryAttack, fTime, 4)

stock Float:fm_get_weapon_next_attack(iEnt)
	return get_pdata_float(iEnt, m_flNextPrimaryAttack, 4)

/********************************************************************************/
stock set_wpn_int_to_key(iGrenadeId, szKey[], iInput)
{
	if (!weapon_StringInfo[iGrenadeId])	
		return 0
		
	new szFullInfo[128]
	formatex(szFullInfo, sizeof szFullInfo - 1, "%s", szKey)
	TrieSetCell(weapon_StringInfo[iGrenadeId], szFullInfo, iInput)
}

stock get_wpn_int_of_key(iGrenadeId, szKey[], iDefaultOutput = 0)
{
	if (!weapon_StringInfo[iGrenadeId])	
		return iDefaultOutput
		
	new szFullInfo[128]
	formatex(szFullInfo, sizeof szFullInfo - 1, "%s", szKey)
	TrieGetCell(weapon_StringInfo[iGrenadeId], szFullInfo, iDefaultOutput)
	return iDefaultOutput
}

stock set_wpn_float_to_key(iGrenadeId, szKey[], Float:fInput)
{
	if (!weapon_StringInfo[iGrenadeId])	
		return 0
		
	new szFullInfo[128]
	formatex(szFullInfo, sizeof szFullInfo - 1, "%s", szKey)
	TrieSetCell(weapon_StringInfo[iGrenadeId], szFullInfo, fInput)
}

stock Float:get_wpn_float_of_key(iGrenadeId, szKey[], Float:fDefaultOutput = 0.0)
{
	if (!weapon_StringInfo[iGrenadeId])	
		return fDefaultOutput
		
	new szFullInfo[128]
	formatex(szFullInfo, sizeof szFullInfo - 1, "%s", szKey)
	TrieGetCell(weapon_StringInfo[iGrenadeId], szFullInfo, fDefaultOutput)
	return fDefaultOutput
}

stock set_wpn_string_to_key(iGrenadeId, szKey[], szInput[])
{
	if (!weapon_StringInfo[iGrenadeId])	
		return 0
		
	new szFullInfo[128]
	formatex(szFullInfo, sizeof szFullInfo - 1, "%s", szKey)
	TrieSetString(weapon_StringInfo[iGrenadeId], szFullInfo, szInput)
}

stock get_wpn_string_of_key(iGrenadeId, szKey[], szOutput[], iLen)
{
	if (!weapon_StringInfo[iGrenadeId])	
		return 0
		
	new szFullInfo[128]
	formatex(szFullInfo, sizeof szFullInfo - 1, "%s", szKey)
	TrieGetString(weapon_StringInfo[iGrenadeId], szFullInfo, szOutput, iLen)
	return 0
}

/*************************************************************************************/

stock get_cs_weapon_model(iWeaponId, szOutput[], iLen)
{
	if (!is_grenade(iWeaponId))
		return 0
	
	switch (iWeaponId)
	{
		case CSW_HEGRENADE:
			formatex(szOutput, iLen, HEGRENADE_MDL)
		case CSW_FLASHBANG:	
			formatex(szOutput, iLen, FLASHBANG_MDL)
		default:
			formatex(szOutput, iLen, SMOKEGRENADE_MDL)
	}
	
	return 1
}

stock get_cs_replace_model(iWeaponId, szOutput[], iLen)
{
	if (!is_grenade(iWeaponId))
		return 0
	
	switch (iWeaponId)
	{
		case CSW_HEGRENADE:
			formatex(szOutput, iLen, HEGRENADE_REPLACE_MDL)
		case CSW_FLASHBANG:	
			formatex(szOutput, iLen, FLASHBANG_REPLACE_MDL)
		default:
			formatex(szOutput, iLen, SMOKEGRENADE_REPLACE_MDL)
	}
	
	return 1
}

stock get_cs_v_mdl_subbody(iWeaponId)
{	
	if (iWeaponId == CSW_HEGRENADE)
		return HEGRENADE_V_BODY
		
	if (iWeaponId == CSW_FLASHBANG)
		return FLASHBANG_V_BODY
		
	if (iWeaponId == CSW_SMOKEGRENADE)
		return SMOKEGRENADE_V_BODY
	
	return 0
}

stock get_cs_p_mdl_subbody(iWeaponId)
{
	if (iWeaponId == CSW_HEGRENADE)
		return HEGRENADE_P_BODY
		
	if (iWeaponId == CSW_FLASHBANG)
		return FLASHBANG_P_BODY
		
	if (iWeaponId == CSW_SMOKEGRENADE)
		return SMOKEGRENADE_P_BODY
	
	return 0
}

stock get_cs_w_mdl_subbody(iWeaponId)
{
	if (iWeaponId == CSW_HEGRENADE)
		return HEGRENADE_W_BODY
		
	if (iWeaponId == CSW_FLASHBANG)
		return FLASHBANG_W_BODY
		
	if (iWeaponId == CSW_SMOKEGRENADE)
		return SMOKEGRENADE_W_BODY
	
	return 0
}

stock DefaultDeploy(id, iEnt, iWeaponId)
{	
	new szCsModel[32]
	new szWeaponModel[128]
	
	
	UT_Get_CS_WpnModel(iWeaponId, szCsModel, sizeof szCsModel - 1)
	
	if (strlen(szCsModel) > 0)
	{
		formatex(szWeaponModel, sizeof szWeaponModel - 1, "models/v_%s.mdl", szCsModel)	
		set_pev(id, pev_viewmodel2, szWeaponModel)
		
		
		set_pev(id, pev_weaponmodel2, "")
		set_pev(iEnt, pev_body, 0)
		formatex(szWeaponModel, sizeof szWeaponModel - 1, "models/p_%s.mdl", szCsModel)
		engfunc(EngFunc_SetModel, iEnt, szWeaponModel)
		fm_set_entity_visibility(iEnt, 1)
	}
	
	UT_CS_Crosshair_Toggle(id, 0, 1)
	
	new iShield = cs_get_user_shield(id)
	new iSilen = cs_get_weapon_silen(iEnt)
	
	new szAnimExtension[32]
	UT_GetWeaponExtension(iWeaponId, iShield, szAnimExtension, sizeof szAnimExtension - 1)
	UT_SetPlayerSequence(id, szAnimExtension)
	
	new iDrawAnimation = Get_CSWPN_Anim_Draw(iWeaponId, iSilen, iShield)
	UT_PlayWeaponAnim(id, iDrawAnimation)

	set_pdata_float(id, m_flNextAttack, 0.75, 5)
	set_pdata_float(iEnt, m_flTimeWeaponIdle, 1.5, 4)
	set_pdata_float(iEnt, m_flDecreaseShotsFired, get_gametime(), 4)
	
	set_pdata_int(id, m_iFOV, 90, 5)
	set_pdata_bool(id, m_fResumeZoom, false, 5)
	set_pdata_int(id, m_iLastZoom, 90, 5)
	
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
