/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>

#include <TFM_WPN>
#include <CHARACTER_MOD>

#include <fakemeta>
#include <cstrike>
#include <hamsandwich>
#include <xs>
#include <cswpn_info>
#include <player_api>
#include <cswpn_ultilities>
#include <cstrike_pdatas>


#include <GamePlay_Included/Tools.inc>

#define PLUGIN "WEAPON MANAGER"
#define VERSION "1.0"
#define AUTHOR "Nguyen Duy Linh"

#define PRIMARY_WEAPON_BITSUMS (1<<CSW_M3 | 1<<CSW_XM1014 | 1<<CSW_SCOUT | 1<<CSW_MAC10 | 1<<CSW_AUG | 1<<CSW_UMP45 | 1<<CSW_SG550 | 1<<CSW_GALIL | 1<<CSW_FAMAS | 1<<CSW_AWP | 1<<CSW_MP5NAVY | 1<<CSW_M249 | 1<<CSW_M4A1 | 1<<CSW_TMP | 1<<CSW_G3SG1 | 1<<CSW_SG552 | 1<<CSW_AK47 | 1<<CSW_P90)
#define SECONDARY_WEAPON_BITSUMS (1<<CSW_USP | 1<<CSW_GLOCK18 | 1<<CSW_DEAGLE | 1<<CSW_P228 | 1<<CSW_ELITE | 1<<CSW_FIVESEVEN)
#define GRENADE_BITSUM ((1<<CSW_HEGRENADE)|(1<<CSW_SMOKEGRENADE)|(1<<CSW_FLASHBANG))

#define is_primary_wpn(%1)      (PRIMARY_WEAPON_BITSUMS & (1<<%1))
#define is_secondary_wpn(%1)	(SECONDARY_WEAPON_BITSUMS & (1<<%1))
#define is_grenade(%1) 		(GRENADE_BITSUM & (1<<%1))


#define MIN_PERCENT 0.6

new iRoundBegin = 0


#define SHIELD_RUN_DECREASE_SPEED 20.0
#define SHIELD_CROUCH_DECREASE_SPEED 16.5
#define SHIELD_WEIGHT	0.05

#define TASK_WPN_DEPLOY	1000
#define TASK_FUNCTION_CZ	2000


#define SPEED_WHILE_ADS	0.7


public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_event("HLTV", "EventRoundStart", "a", "1=0", "2=0")
	register_logevent("Logevent_RoundBegin" , 2 , "1=Round_Start")
		
	register_event("CurWeapon", "Event_CurWeapon", "b", "1=1")
}

public EventRoundStart()
	iRoundBegin = 0
	
public Logevent_RoundBegin()
	iRoundBegin = 1

public Event_CurWeapon(id)
{
	if (!is_user_connected(id))
		return
		
	if (!is_user_alive(id))
		return
		
	new iWeaponId = read_data(2)
	
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90 || iWeaponId == 2)
		return
		
	calculate_speed(id, iWeaponId)
}

public csred_WpnReload_Post(id, iEnt, iWeaponId)
{
	if (iWeaponId < CSW_P228 || iWeaponId > CSW_P90 || iWeaponId == 2)
		return
		
	calculate_speed(id, iWeaponId)
}

stock calculate_speed(id, iWeaponId)
{
	if (!is_user_alive(id))
		return 0
		
	if (is_user_zombie(id))
		return 0
		
	
	new Float:fCurrentSpeed, Float:fCurrentGravity
	pev(id, pev_maxspeed, fCurrentSpeed)
	pev(id, pev_gravity, fCurrentGravity)
	
	if (!check_can_move())
	{
		set_pev(id, pev_maxspeed, 0.0)
		engfunc(EngFunc_SetClientMaxspeed, id, 0.0)
		
		return 1
	}
	
	
	
	new Float:fFov = float(UT_GetPlayerFOV(id))
	
	if (fFov > 90.0 || fFov <= 0.0)
		fFov = 90.0
		
	new Float:fFOV_Percent = fFov / 90.0
	
	if (fFOV_Percent < MIN_PERCENT)
		fFOV_Percent = MIN_PERCENT
		
	new CsTeams:iTeam = cs_get_user_team(id)
	
	new iCharacterSpeed
	new Float:fCharacterSpeed
	new Float:fCharacterGravity
	
	new iCharacterId = get_user_character(id)
	
	if (iCharacterId > -1)
	{
		iCharacterSpeed = get_character_speed(iCharacterId, iTeam)
		fCharacterGravity = get_character_gravity(iCharacterId, iTeam)
	}
	else
	{
		new iInternalModel = fm_get_user_internal_model(id)
		iCharacterSpeed = CS_INTERNAL_SPEED[iInternalModel]
		fCharacterGravity = CS_INTERNAL_GRAVITY[iInternalModel]
	}
	
	fCharacterSpeed = float(iCharacterSpeed)
	
	if (IsPlayerDucking(id))
	{
		if (fCurrentSpeed != fCharacterSpeed)
			set_player_speed(id, fCharacterSpeed)
			
		return 1
	}
	
	
	if (is_grenade(iWeaponId))
	{
		
		new iGrenadeId = get_user_grenade(id, iWeaponId)
		
		if (iGrenadeId < 0)
		{
			if (cs_get_user_shield(id))
				fCharacterSpeed -= SHIELD_RUN_DECREASE_SPEED
		}
		else
		{
			new Float:fGrenadeSpeed = get_grenade_speed(iGrenadeId)
			new Float:fGrenadeWeight = get_grenade_weight(iGrenadeId)
			fCharacterSpeed -= fGrenadeSpeed
			fCharacterGravity -= fGrenadeWeight
			
		}
		if (fCurrentSpeed != fCharacterSpeed)
			set_player_speed(id, fCharacterSpeed)
		if (fCurrentGravity != fCharacterGravity)
			set_pev(id, pev_gravity, fCharacterGravity)
	}
	else if (is_secondary_wpn(iWeaponId))
	{
		new iSecondaryWpnId = get_user_sec_wpn(id)
		
		if (iSecondaryWpnId >= 0)
		{
			iWeaponId = iSecondaryWpnId
			
			new Float:fWeaponWeight = get_sec_wpn_weight(iWeaponId)
			new Float:fWeaponSpeed = get_sec_wpn_speed(iWeaponId)
			
			fCharacterGravity += fWeaponWeight
			
			
			fCharacterSpeed -= fWeaponSpeed
			fCharacterSpeed *= fFOV_Percent
			
			if (sw_is_user_ads(id))
				fCharacterSpeed *= SPEED_WHILE_ADS
			
			if (fCharacterGravity != fCurrentGravity)	
				set_pev(id, pev_gravity, fCharacterGravity)
			if (fCharacterSpeed != fCurrentSpeed)
				set_player_speed(id, fCharacterSpeed)
		}
		else
		{
				
			
			if (cs_get_user_shield(id))
			{
				fCharacterSpeed -= SHIELD_RUN_DECREASE_SPEED
				fCharacterGravity += SHIELD_WEIGHT
			}
			
			fCharacterSpeed *= fFOV_Percent
			
			if (sw_is_user_ads(id))
				fCharacterSpeed *= SPEED_WHILE_ADS
			
			if (fCurrentSpeed != fCharacterSpeed)
				set_player_speed(id, fCharacterSpeed)
			if (fCurrentGravity != fCharacterGravity)
				set_pev(id, pev_gravity, fCharacterGravity)
			
		}
	}
	else if (iWeaponId == CSW_KNIFE)
	{
		
		new iMeleeId = get_user_sec_wpn(id)
		
		if (iMeleeId < 0)
		{
			if (cs_get_user_shield(id))
			{
				fCharacterSpeed -= SHIELD_RUN_DECREASE_SPEED
				fCharacterGravity += SHIELD_WEIGHT
			}
			if (fCurrentSpeed != fCharacterSpeed)
				set_player_speed(id, fCharacterSpeed)
			if (fCurrentGravity != fCharacterGravity)
				set_pev(id, pev_gravity, fCharacterGravity)
				
		}
		else
		{
			new Float:fWeaponWeight = get_sec_wpn_weight(iMeleeId)
			new Float:fWeaponSpeed = get_sec_wpn_speed(iMeleeId)
			
			fCharacterGravity += fWeaponWeight
			fCharacterSpeed -= fWeaponSpeed
			
			
			if (fCurrentGravity != fCharacterGravity)	
				set_pev(id, pev_gravity, fCharacterGravity)
			if (fCurrentSpeed != fCharacterSpeed)
				set_player_speed(id, fCharacterSpeed)
		}
	}		
	else if (iWeaponId == CSW_C4)
	{
		
		fCharacterSpeed -= UT_Get_CS_Speed(CSW_C4)
		
		if (fCurrentSpeed != fCharacterSpeed)
			set_player_speed(id, fCharacterSpeed)
		if (fCurrentGravity != fCharacterGravity)
			set_pev(id, pev_gravity, fCharacterGravity)
			
	}
	if (is_primary_wpn(iWeaponId))
	{
		new iPrimaryWpnId = get_user_pw(id)
		
		
		if (iPrimaryWpnId > - 1)
		{
			iWeaponId = iPrimaryWpnId
			
			new Float:fWeaponWeight = get_pw_weight(iWeaponId)
			new Float:fWeaponSpeed = get_pw_speed(iWeaponId)
			
			fCharacterGravity += fWeaponWeight
			fCharacterSpeed -= fWeaponSpeed
			
				
			fCharacterSpeed *= fFOV_Percent
			
			if (pw_user_attack_stage(id) != STAGE_NONE)
				fCharacterSpeed *= (70.0/100.0)
			
			if (pw_is_ads(id))
			{
				fCharacterSpeed *= SPEED_WHILE_ADS
			}
			
			if (fCurrentGravity != fCharacterGravity)	
				set_pev(id, pev_gravity, fCharacterGravity)
			if (fCurrentSpeed != fCharacterSpeed)
				set_player_speed(id, fCharacterSpeed)
			
		}
		else
		{
			
			fCharacterGravity += UT_Get_CS_Weight(iWeaponId)
			fCharacterSpeed -= UT_Get_CS_Speed(iWeaponId)
			fCharacterSpeed *= fFOV_Percent
			
			if (pw_is_ads(id))
				fCharacterSpeed *= SPEED_WHILE_ADS
				
			
			if (fCurrentSpeed != fCharacterSpeed)
				set_player_speed(id, fCharacterSpeed)
			if (fCurrentGravity != fCharacterGravity)
				set_pev(id, pev_gravity, fCharacterGravity)
				
		
		}
	}
	return 1
}
	
stock check_can_move()
{
	new iWeaponMode, iFightYard
	if (is_deathmatch_on(iWeaponMode, iFightYard))
		return iRoundBegin
			
		
	return 1
}

stock CalculateSpeed(id, Float:fSpeed, &Float:fOutput)
{
	new iDucking
	iDucking = pev(id, pev_flags) & (FL_DUCKING | FL_ONGROUND) == (FL_DUCKING | FL_ONGROUND)
	
	if (iDucking)
		fOutput = fSpeed * (25 / 100)
	else	fOutput = fSpeed
}


stock IsPlayerDucking(id)
{
	new iFlag = pev(id, pev_flags)
	
	if (!(iFlag & FL_ONGROUND))
		return 0
		
	if (!(iFlag & FL_DUCKING))
		return 0
		
	return 1
}

		
stock fm_get_user_internal_model(id)
	return get_pdata_int(id, m_iInternalModel , 5)

stock fm_set_user_internal_model(id, iInternalModel)
	set_pdata_int(id, m_iInternalModel, iInternalModel, 5)

stock set_player_speed(id, Float:fSpeed)
{
	set_pev(id, pev_maxspeed, fSpeed)
	engfunc(EngFunc_SetClientMaxspeed, id, fSpeed)
	
	
}
