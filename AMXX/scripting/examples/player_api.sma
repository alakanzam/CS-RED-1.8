/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <hamsandwich>
#include <fakemeta>
#include <engine>
#include <cstrike>




#define TASK_CZ_FUNCTION 1000

new ifw_PlayerRespawnPre, ifw_PlayerRespawnPost
new ifw_PlayerKilledPre, ifw_PlayerKilledPost
new ifw_PlayerStrippedWpn
new ifw_PlayerUseStation_Pre
new ifw_PlayerUseStation_Post
new ifw_PlayerResetHud
new ifw_CameraChanged
new ifw_SetSpectating

new ifw_Result


new iHamCZ = 0


new iMSG_ScoreAttrib
new iMSG_ScoreInfo
new iMSG_NightVision 

new iMSG_HostagePOS
new iMSG_HostageKilled
new iMSG_TeamInfo

const USE_USING = 2
const USE_STOPPED = 0

//	BIT TOOLS

#define SetPlayerBit(%1,%2)      (%1 |= (1<<(%2&31)))
#define ClearPlayerBit(%1,%2)    (%1 &= ~(1 <<(%2&31)))
#define CheckPlayerBit(%1,%2)    (%1 & (1<<(%2&31)))

new bUsingStationary
new iFirstPerson

new iUserTarget[33]

#define  m_iFOV			363
#define	m_iInternalModel	126
#define m_bIsNVGSwitchedOn	517
#define m_flFlashedUntil	514

public plugin_natives()
{
	register_native("UT_SetPlayerFOV", "_SetFOV", 1)
	register_native("UT_GetPlayerFOV", "_GetFOV", 1)
	
	register_native("UT_RemoveDeathFrag", "_RemoveDeathFrag", 1)
	register_native("UT_UpdateScoreBoard", "_UpdateScoreBoard", 1)
	register_native("UT_IsUsingStationaryWeapon", "_IsUsingStationaryWeapon", 1)
	register_native("UT_GetUserNVG_State", "_IsUsingNVG", 1)
	register_native("UT_SetUserNVG_State", "_SetUserNVG_State", 1)
	register_native("UT_RadarFakeHostagePos", "_RadarFakeHostagePos", 1)
	register_native("UT_RadarFakeHostageKilled", "_RadarFakeHostageKilled", 1)
	register_native("UT_RespawnPlayer", "_RespawnPlayer", 1)
	register_native("UT_GetUserInternalModel", "_GetUserInternalModel", 1)
	register_native("UT_SetUserInternalModel", "_SetUserInternalModel", 1)
	register_native("UT_IsUserFlashed", "_IsUserFlashed", 1)
	register_native("UT_UpdatePlayerTeam", "_UpdatePlayerTeam", 1)
	
	
	register_native("UT_GetSpecPlayer", "_get_SpecPlayer", 1)
	register_native("UT_IsFirstPersonSpec", "_IsFirstPersonSpec", 1)
	
}


public _RadarFakeHostagePos(id, iHostageID, iOrigin[3], iEngineMessage)
{
	if (!is_user_connected(id))
		return
		
	if (is_user_bot(id))
		return
		
	if (!iEngineMessage)
	{
		message_begin(MSG_ONE_UNRELIABLE, iMSG_HostagePOS, {0,0,0}, id);
		write_byte(id);
		write_byte(iHostageID);
		write_coord(iOrigin[0]);
		write_coord(iOrigin[1]);
		write_coord(iOrigin[2]);
		message_end()
		return
	}
	emessage_begin(MSG_ONE_UNRELIABLE, iMSG_HostagePOS, {0,0,0}, id);
	ewrite_byte(id);
	ewrite_byte(iHostageID);
	ewrite_coord(iOrigin[0]);
	ewrite_coord(iOrigin[1]);
	ewrite_coord(iOrigin[2]);
	emessage_end()
}

public _RadarFakeHostageKilled(id, iHostageID, iEngineMessage)
{
	if (!is_user_connected(id))
		return
		
	if (is_user_bot(id))
		return
		
	if (iEngineMessage)
	{
		emessage_begin(MSG_ONE_UNRELIABLE, iMSG_HostageKilled, {0,0,0}, id)
		ewrite_byte(iHostageID);
		emessage_end()
		return
			
	}
	message_begin(MSG_ONE_UNRELIABLE, iMSG_HostageKilled, {0,0,0}, id)
	write_byte(iHostageID);
	message_end()
		
	
}

public _RespawnPlayer(id)
{
	if (!is_user_connected(id))
		return
	
	ExecuteHamB(Ham_CS_RoundRespawn, id)
}

public _GetUserInternalModel(id)
	return get_pdata_int(id, m_iInternalModel, 5)

public _SetUserInternalModel(id, iInternalModel)
	set_pdata_int(id, m_iInternalModel, iInternalModel, 5)
	
public _SetUserNVG_State(id, iToggle, iEngineMSG)
{
	if (!is_user_connected(id))
		return
		
	if (iEngineMSG)
	{
		emessage_begin(MSG_ONE_UNRELIABLE, iMSG_NightVision, _, id)
		ewrite_byte(iToggle)
		emessage_end()
		
		
	}
	else
	{
		message_begin(MSG_ONE_UNRELIABLE, iMSG_NightVision, _, id)
		write_byte(iToggle)
		message_end()
	}
	
	
	set_pdata_int(id, m_bIsNVGSwitchedOn, iToggle, 5)
	
}

public _IsUsingNVG(id)
	return get_pdata_int(id, m_bIsNVGSwitchedOn, 5)

public _IsUsingStationaryWeapon(id)
	return CheckPlayerBit(bUsingStationary, id)
	
public _RemoveDeathFrag(id, iEngineMessage)
{
	if (!iEngineMessage)
	{
		message_begin(MSG_BROADCAST, iMSG_ScoreAttrib)
		write_byte(id) // id
		write_byte(0) // attrib
		message_end()
		return
	}
	emessage_begin(MSG_BROADCAST, iMSG_ScoreAttrib)
	ewrite_byte(id) // id
	ewrite_byte(0) // attrib
	emessage_end()
}

public _IsUserFlashed(id)
{
	
	return ( get_pdata_float( id, m_flFlashedUntil, 5 ) >= get_gametime( ) )
}

public _UpdatePlayerTeam(id, iTeam, iEngineMessage)
{
	if (!is_user_connected(id))
		return
	
	
	new szTeam[32]
	
	switch (iTeam)
	{
		case 1:
			formatex(szTeam, sizeof szTeam - 1, "TERRORIST")
		case 2:
			formatex(szTeam, sizeof szTeam - 1, "CT")
		case 3 :
			formatex(szTeam, sizeof szTeam - 1, "SPECTATOR")
		default:
			formatex(szTeam, sizeof szTeam - 1, "UNASSIGNED")
		
	}
	
	if (iEngineMessage)
	{
		emessage_begin(MSG_ALL, iMSG_TeamInfo)
		ewrite_byte(id) // player
		ewrite_string(szTeam) 
		emessage_end()
		return
	}
	
	message_begin(MSG_ALL, iMSG_TeamInfo)
	write_byte(id) // player
	write_string(szTeam) 
	message_end()
	
}

public _UpdateScoreBoard(id, iFrags, iDeaths, iEngineMessage) 
{
	if (!iEngineMessage)
	{
		message_begin(MSG_BROADCAST, iMSG_ScoreInfo)
		write_byte(id) // id
		write_short(iFrags) // frags
		write_short(iDeaths) // deaths
		write_short(0) // class?
		write_short(get_user_team(id)) // team
		message_end()
		return
	}
	emessage_begin(MSG_BROADCAST, iMSG_ScoreInfo)
	ewrite_byte(id) // id
	ewrite_short(iFrags) // frags
	ewrite_short(iDeaths) // deaths
	ewrite_short(0) // class?
	ewrite_short(get_user_team(id)) // team
	emessage_end()
}

public _get_SpecPlayer(id)
	return iUserTarget[id]
	
public _IsFirstPersonSpec(id)
{
	if (CheckPlayerBit(iFirstPerson, id))
		return 1
	return 1
}

public plugin_init() {
	
	new PLUGIN[] = "Player API"
	new VERSION[] = "1.0"
	new AUTHOR[] =  "Nguyen Duy Linh"
	
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	ifw_PlayerRespawnPre = CreateMultiForward("csred_PlayerSpawnPre", ET_IGNORE, FP_CELL)
	ifw_PlayerRespawnPost = CreateMultiForward("csred_PlayerSpawnPost", ET_IGNORE, FP_CELL)
	ifw_PlayerKilledPre = CreateMultiForward("csred_PlayerKilledPre", ET_IGNORE, FP_CELL, FP_CELL)
	ifw_PlayerKilledPost = CreateMultiForward("csred_PlayerKilledPost", ET_IGNORE, FP_CELL, FP_CELL)
	ifw_PlayerUseStation_Pre = CreateMultiForward("csred_PlayerUseStationPre", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL, FP_CELL)
	ifw_PlayerUseStation_Post = CreateMultiForward("csred_PlayerUseStationPost", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL, FP_CELL)
	ifw_PlayerStrippedWpn = CreateMultiForward("csred_PlayerStripWeapons", ET_IGNORE, FP_CELL)
	ifw_PlayerResetHud = CreateMultiForward("csred_ResetHud", ET_IGNORE, FP_CELL)
	ifw_CameraChanged = CreateMultiForward("TFM_CameraChanged", ET_IGNORE, FP_CELL, FP_CELL)
	ifw_SetSpectating = CreateMultiForward("TFM_SetSpectating", ET_IGNORE, FP_CELL, FP_CELL)
	
	iMSG_ScoreAttrib = get_user_msgid("ScoreAttrib")
	iMSG_ScoreInfo = get_user_msgid("ScoreInfo")
	iMSG_NightVision = get_user_msgid("NVGToggle")

	iMSG_TeamInfo = get_user_msgid("TeamInfo")
	
	iMSG_HostagePOS = get_user_msgid("HostagePos")
	iMSG_HostageKilled = get_user_msgid("HostageK")
	
	register_event("ResetHUD", "Event_ResetHUD", "be")  
	
	register_event( "StatusValue", "SpectatingTarget", "bd", "1=2" );
	register_event( "SpecHealth2", "SpectatingTarget", "bd" );
	register_event( "TextMsg", "SpectatingMode", "b", "2&#Spec_Mode" )
	
	RegisterHam(Ham_Spawn, "player", "fw_PlayerSpawnPre")
	RegisterHam(Ham_Spawn, "player", "fw_PlayerSpawnPost", 1)
	RegisterHam(Ham_Killed, "player", "fw_PlayerKilledPre")
	RegisterHam(Ham_Killed, "player", "fw_PlayerKilledPost", 1)
	RegisterHam(Ham_Use, "player_weaponstrip", "fw_StripPlayerWeaponPost", 1)
	
	new STATIONARY_ENTITY[][] = {"func_tank", "func_tankmortar", "func_tankrocket", "func_tanklaser"}
	
	for (new i = 0; i < sizeof STATIONARY_ENTITY; i++)
	{
		
		RegisterHam(Ham_Use, STATIONARY_ENTITY[i], "fw_UseStationary")
		RegisterHam(Ham_Use, STATIONARY_ENTITY[i], "fw_UseStationaryPost", 1)
	}
	
	register_concmd("SetView_3rd", "concmd_Set3rdView")
	//RegisterHam(Ham_Touch, "player_weaponstrip", "fw_PlayerWpnStrip", 1)
}
	
public client_putinserver(id)
{
	iUserTarget[id] = -1;
	ClearPlayerBit(iFirstPerson, id)
	set_task(0.1, "Register_CZ_BotFunction", id + TASK_CZ_FUNCTION)
}

public client_disconnect(id)
{
	iUserTarget[id] = -1;
	ClearPlayerBit(iFirstPerson, id)
	remove_task(id + TASK_CZ_FUNCTION)
}

public Register_CZ_BotFunction(TASKID)
{
	new id = TASKID - TASK_CZ_FUNCTION
	
	if (!is_user_connected(id))
		return
		
	if (!is_user_bot(id))
		return
		
	if (iHamCZ)
	{
		if (!is_user_alive(id))
			return
			
		fw_PlayerSpawnPre(id)
		fw_PlayerSpawnPost(id)
		return
	}
	
		
	RegisterHamFromEntity(Ham_Spawn, id, "fw_PlayerSpawnPre")
	RegisterHamFromEntity(Ham_Spawn, id, "fw_PlayerSpawnPost", 1)
	RegisterHamFromEntity(Ham_Killed, id, "fw_PlayerKilledPre")
	RegisterHamFromEntity(Ham_Killed, id, "fw_PlayerKilledPost", 1)
	iHamCZ = 1
	
}



public _SetFOV(id, iFOV)
{
	if (!is_user_connected(id))
		return
		
	
	if (iFOV > 90 || iFOV <= 0)
		iFOV = 90
		
	set_pdata_int(id, m_iFOV, iFOV, 5)
	
}

public _GetFOV(id)	
	return get_pdata_int(id, m_iFOV,  5)
	
	
public Event_ResetHUD(id)
	ExecuteForward(ifw_PlayerResetHud, ifw_Result, id)
	
public SpectatingMode(id)
{
	if( !is_user_connected(id))
	{
		iUserTarget[id] = -1;
		ClearPlayerBit(iFirstPerson, id)
		return
	}
	if (is_user_bot(id))
		return
		
	new szSpecMode[12];
	read_data( 2, szSpecMode, sizeof szSpecMode );
	
	if( equal( szSpecMode, "#Spec_Mode4" ) )
	{
		SetPlayerBit(iFirstPerson, id)
		ExecuteForward(ifw_CameraChanged, ifw_Result, id, 4)
	}
	else if (equal(szSpecMode, "#Spec_Mode1") || equal(szSpecMode, "#Spec_Mode2") || equal(szSpecMode, "#Spec_Mode3"))
	{
		ExecuteForward(ifw_CameraChanged, ifw_Result, id, 0)
		ClearPlayerBit(iFirstPerson, id)
	}
	
	
}

/* -------------------------------------------------------------------------
 * Who spec who ?
 * ------------------------------------------------------------------------- */
public SpectatingTarget( idPlayer )
{
	if( !is_user_connected( idPlayer ) )
		return 
	
	new idTarget = read_data(2);
	
	if( !is_user_alive(idTarget))
	{
		iUserTarget[idPlayer] = -1;
		return
	}
		
	iUserTarget[idPlayer] = idTarget;
	
	ExecuteForward(ifw_SetSpectating, ifw_Result, idPlayer, idTarget)
}



public fw_PlayerSpawnPre(id)
	ExecuteForward(ifw_PlayerRespawnPre, ifw_Result, id)
	
public fw_PlayerSpawnPost(id)
{
	ClearPlayerBit(bUsingStationary, id)
	ExecuteForward(ifw_PlayerRespawnPost, ifw_Result, id)
	
	iUserTarget[id] = -1;
	ClearPlayerBit(iFirstPerson, id)
}

public fw_PlayerKilledPre(iVictim, iKiller)
	ExecuteForward(ifw_PlayerKilledPre, ifw_Result, iVictim, iKiller)
	
public fw_PlayerKilledPost(iVictim, iKiller)
{
	ClearPlayerBit(bUsingStationary, iVictim)
	ExecuteForward(ifw_PlayerKilledPost, ifw_Result, iVictim, iKiller)
}

public fw_StripPlayerWeaponPost(iEnt, id)
{
	if (!iEnt || !pev_valid(iEnt))
		return
		
	if (!is_user_connected(id))
		return
		
	ExecuteForward(ifw_PlayerStrippedWpn, ifw_Result, id)
}

public fw_UseStationary(iEnt, iCaller, iActivator, iUSE_TYPE)
{
	if (!is_user_connected(iCaller))
		return HAM_IGNORED
	
	ExecuteForward(ifw_PlayerUseStation_Pre, ifw_Result, iEnt, iCaller, iActivator, iUSE_TYPE)
	
	if (ifw_Result != PLUGIN_CONTINUE)
		return HAM_SUPERCEDE
	
	if (iUSE_TYPE == USE_USING)
		SetPlayerBit(bUsingStationary, iCaller)
		
	else if (iUSE_TYPE == USE_STOPPED)
		ClearPlayerBit(bUsingStationary, iCaller)
		
	return HAM_IGNORED
	
}

public fw_UseStationaryPost(iEnt, iCaller, iActivator, iUSE_TYPE)
{
	if (!is_user_connected(iCaller))
		return HAM_IGNORED
	
	ExecuteForward(ifw_PlayerUseStation_Post, ifw_Result, iEnt, iCaller, iActivator, iUSE_TYPE)
	
	if (ifw_Result != PLUGIN_CONTINUE)
		return HAM_SUPERCEDE
	
	return HAM_IGNORED
	
}


public concmd_Set3rdView(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[3]
	read_argv(1, szArg, sizeof szArg - 1)
	
	(str_to_num(szArg))?set_view(id, CAMERA_3RDPERSON):set_view(id, CAMERA_NONE)
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
