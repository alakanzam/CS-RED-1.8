/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <cstrike>
#include <hamsandwich>
#include <mmcl_util>
#include <celltrie>
#include <player_api>

#define PLUGIN "GET ACE"
#define VERSION "1.0"
#define AUTHOR "Nguyen Duy Linh"

#define MAX_PLAYERS 33

#define GOLD_ACE_SPR "GOLD_ACE"
#define SILVER_ACE_SPR "SILVER_ACE"


#define ACE_SHOW_TIME 1.5
#define ACE_HOLD_TIME -1.0


#define TASK_CZ_FUNCTION 1000
#define TASK_UPDATE_ACE	2000


enum
{
	ACE_NONE,
	ACE_SILVER,
	ACE_GOLD
}

/*			TRIE SECTION			*/

//	Trie
new Trie:iUserInfo[MAX_PLAYERS]

//	Key
#define SECTION_GOLD_ACE_X_TGA	"GOLD_ACE_X_TGA"
#define SECTION_GOLD_ACE_Y_TGA	"GOLD_ACE_Y_TGA"

#define SECTION_SILVER_ACE_X_TGA	"SILVER_ACE_X"
#define SECTION_SILVER_ACE_Y_TGA	"SILVER_ACE_Y"


#define SECTION_ACE_TYPE	"ACE_TYPE"
#define SECTION_LAST_ACE_TYPE	"LAST_ACE_TYPE"

/********************************************************/

//		INTEGER

///////////////////////////////////////////////

new iGoldAcer = 0
new iSilverAcer = 0
new iAceCheckingState = 1
new iHighestScore = 0

///////////////////////////////////////////////




new iMaxPlayers 

#define GOLD_ACE_SOUND "misc/UI_Ace_Inform.wav"
#define SILVER_ACE_SOUND "misc/UI_Ace_Inform_Gray.wav"
#define LOST_ACE_SOUND "misc/UI_Ace_Lost.wav"

#define HUD_HOLD_TIME	-1.0

public plugin_natives()
{
	register_native("TFM_GetUserAceType", "native_GetAceType", 1)
	register_native("TFM_AceCheckingState", "native_AceCheckingState", 1)
	register_native("TFM_GetHighestScore", "native_GetHighestScore", 1)
	register_native("TFM_GetGoldAcer", "native_GetGoldAcer", 1)
	register_native("TFM_GetSilverAcer", "native_GetSilverAcer", 1)
}

public native_GetAceType(id)
	return get_int_from_trie(iUserInfo[id], SECTION_ACE_TYPE)

public native_AceCheckingState(iState)
{
	
	new id = 1
	
	if (iState < 1)
	{
		iAceCheckingState = 0
		
		while (id <= iMaxPlayers)
		{
			if (!is_user_connected(id))
				continue
				
			if (is_user_bot(id))
				continue
			
			if (!iState)
			{
				set_int_to_trie(iUserInfo[id], SECTION_ACE_TYPE, ACE_NONE)
				MMCL_RemoveImage(id, HUDTYPE_TGA, CHANNEL_ACE_TGA)
				continue
			}
		
			id++
		}
		
		return
	}
	
	fnGetAce()
}

public native_GetHighestScore()
	return iHighestScore
	
public native_GetGoldAcer()
	return iGoldAcer
	
public native_GetSilverAcer()	
	return iSilverAcer
	
public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
		
	
	register_concmd("TFM_HUD/Ace/GoldAce_X", "fw_TGA_GoldAce_X")
	register_concmd("TFM_HUD/Ace/GoldAce_Y", "fw_TGA_GoldAce_Y")
	
	register_concmd("TFM_HUD/Ace/SilverAce_X", "fw_TGA_SilverAce_X")
	register_concmd("TFM_HUD/Ace/SilverAce_Y", "fw_TGA_SilverAce_Y")
	
	register_concmd("RDR_HUD/Ace", "clcmd_RedrawAce")
		
}

public plugin_cfg()
	iMaxPlayers = get_maxplayers()
	
/*			Client Command Hud Position			*/

/*		Gold Ace		*/

//	Tga

public fw_TGA_GoldAce_X(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_trie(iUserInfo[id], SECTION_GOLD_ACE_X_TGA, str_to_float(szArg))
}


public fw_TGA_GoldAce_Y(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_trie(iUserInfo[id], SECTION_GOLD_ACE_Y_TGA, str_to_float(szArg))
}

/****************************************/

/*		Silver Ace		*/

//	Tga

public fw_TGA_SilverAce_X(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_trie(iUserInfo[id], SECTION_SILVER_ACE_X_TGA, str_to_float(szArg))
}


public fw_TGA_SilverAce_Y(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_trie(iUserInfo[id], SECTION_SILVER_ACE_Y_TGA, str_to_float(szArg))
}


//		REDRAW HUD
public clcmd_RedrawAce(id)
	display_user_ace(id)

/****************************************/

public client_putinserver(id)
{
	if (iUserInfo[id])
	{
		if (is_user_bot(id))
		{
			TrieDestroy(iUserInfo[id])
			return
		}
		
		set_int_to_trie(iUserInfo[id], SECTION_ACE_TYPE, ACE_NONE)
		return
	}
	
	iUserInfo[id] = TrieCreate()
	
	set_int_to_trie(iUserInfo[id], SECTION_ACE_TYPE, ACE_NONE)
	set_int_to_trie(iUserInfo[id], SECTION_LAST_ACE_TYPE, ACE_NONE)
}
	
public client_disconnect(id)
{
	if (iUserInfo[id])
		TrieDestroy(iUserInfo[id])
}

public csred_PlayerKilledPost(iVictim, iKiller)
{
	if (!iAceCheckingState)
		return
	
	if (task_exists(TASK_UPDATE_ACE))
		remove_task(TASK_UPDATE_ACE)
		
	set_task(3.0, "UpdateAce_TASK", TASK_UPDATE_ACE)
	
	
}

public csred_PlayerSpawnPost(id)
{
	if (!iAceCheckingState)
		return
		
	if (is_user_bot(id))
		return
		
	ShowAce(id, get_int_from_trie(iUserInfo[id], SECTION_ACE_TYPE))
}

public UpdateAce_TASK(TASKID)
{
	if (!iAceCheckingState)
		return
		
	fnGetAce()
}

stock fnGetAce()
{
	new id = 1
	new iPosition = 0
	
	new iAceKill[MAX_PLAYERS]
	new iAceDeath[MAX_PLAYERS]
	new iAceId[MAX_PLAYERS]
	
	while (id <= iMaxPlayers)
	{
		if (is_valid_player(id))
		{
		
			iAceKill[iPosition] = pev(id, pev_frags)
			iAceDeath[iPosition] = cs_get_user_deaths(id)
			iAceId[iPosition] = id
		
			iPosition++
		}
		id++
	}
	
	//	Less than 2 players ?
	
	if (iPosition < 2) 
		return 0
		
	new i = 0
	//	SORT BY KILL
	
	for (i = 0; i < iPosition - 1; i++)
	{
		new j
		for (j = i; j < iPosition; j++)
		{
			if (iAceKill[i] > iAceKill[j])
			{
				new iTemporary
				
				//	Sort the kill
				iTemporary = iAceKill[i]
				iAceKill[i] = iAceKill[j]
				iAceKill[j] = iTemporary
				
				//	Sort the death
				
				iTemporary = iAceDeath[i]
				iAceDeath[i] = iAceDeath[j]
				iAceDeath[j] = iTemporary
				
				//	Sort the id
				
				iTemporary = iAceId[i]
				iAceId[i] = iAceId[j]
				iAceId[j] = iTemporary
				
			}
		}
	}
	
	//	SORT BY DEATH
	
	for (i = 0; i < iPosition - 1; i++)
	{
		new j
		for (j = i; j < iPosition; j++)
		{
			if (iAceKill[i] != iAceKill[j])
				continue
				
			if (iAceDeath[i] < iAceDeath[j])
			{
				new iTemporary
				
				//	Sort the kill
				iTemporary = iAceKill[i]
				iAceKill[i] = iAceKill[j]
				iAceKill[j] = iTemporary
				
				//	Sort the death
				
				iTemporary = iAceDeath[i]
				iAceDeath[i] = iAceDeath[j]
				iAceDeath[j] = iTemporary
				
				//	Sort the id
				
				iTemporary = iAceId[i]
				iAceId[i] = iAceId[j]
				iAceId[j] = iTemporary
				
			}
		}
	}
	
	
	iGoldAcer = iAceId[iPosition - 1]
	set_int_to_trie(iUserInfo[iGoldAcer], SECTION_ACE_TYPE , ACE_GOLD)
	display_user_ace(iGoldAcer)
	iHighestScore = iAceKill[iPosition - 1]
	
	iSilverAcer = iAceId[iPosition - 2]
	set_int_to_trie(iUserInfo[iSilverAcer], SECTION_ACE_TYPE , ACE_SILVER)
	display_user_ace(iSilverAcer)
	
	
	
	i = 0
	
	while (i < iPosition - 2)
	{
		id = iAceId[i]
		
		set_int_to_trie(iUserInfo[id], SECTION_ACE_TYPE , ACE_NONE)
		display_user_ace(id)
		i++;
	}
	
	return 1
	
}

public display_user_ace(id)
{
	if (!is_user_connected(id))
		return
		
	if (is_user_bot(id))
		return
		
	new iAceType = get_int_from_trie(iUserInfo[id], SECTION_ACE_TYPE)
	new iLastAceType = get_int_from_trie(iUserInfo[id], SECTION_LAST_ACE_TYPE)
	
	if (iAceType == ACE_GOLD)
	{
		ShowAce(id, ACE_GOLD)
			
		if (iLastAceType != ACE_GOLD)
			Received_GoldAce(id)
		
		iLastAceType = ACE_GOLD
	}
	else if (iAceType == ACE_SILVER)
	{
		
		ShowAce(id, ACE_SILVER)
		
		if (iLastAceType == ACE_GOLD)
			LostAce(id)
		else	
		{
			if (iLastAceType != ACE_SILVER)
				Received_SilverAce(id)
		}
			
		iLastAceType = ACE_SILVER	
	}
	else
	{
		if (iLastAceType != ACE_NONE)
		{
			LostAce(id)
			ShowAce(id, iLastAceType, 1)
		}
		
		iLastAceType = ACE_NONE
	}
	
	set_int_to_trie(iUserInfo[id], SECTION_LAST_ACE_TYPE, iLastAceType)
}


stock ShowAce(id, iACE_TYPE, iLostAce = 0)
{
	if (!is_user_connected(id))
		return
		
	if (is_user_bot(id))
		return
		
	
		
	new Float:fX, Float:fY
	new szHud[128]
	
	MMCL_RemoveImage(id, HUDTYPE_TGA, CHANNEL_ACE_TGA)
	
	if (iLostAce)
		return
		
	if (!is_user_alive(id))
		return
		
	if (iACE_TYPE == ACE_GOLD)
	{	
		formatex(szHud, sizeof szHud - 1, "%s/ACE/%s.tga", TFM_TGA_DIRECTORY, GOLD_ACE_SPR)
		
		
		if (!file_exists(szHud))
			return
				
		formatex(szHud, sizeof szHud - 1, "%s/ACE/%s", TFM_TGA_DIRECTORY, GOLD_ACE_SPR)
		
		fX = get_float_from_trie(iUserInfo[id], SECTION_GOLD_ACE_X_TGA)
		fY = get_float_from_trie(iUserInfo[id], SECTION_GOLD_ACE_Y_TGA)
			
		
		MMCL_DrawTGA(id, szHud, 255, 255, 255, 255, fX, fY, 1, 0, 0.0, 0.0, HUD_HOLD_TIME, CHANNEL_ACE_TGA)
		
	}
	else if (iACE_TYPE == ACE_SILVER)
	{
		
		formatex(szHud, sizeof szHud - 1, "%s/ACE/%s.tga", TFM_TGA_DIRECTORY, SILVER_ACE_SPR)
		
		
		
		if (!file_exists(szHud))
			return
		
		formatex(szHud, sizeof szHud - 1, "%s/ACE/%s", TFM_TGA_DIRECTORY, SILVER_ACE_SPR)
		
		fX = get_float_from_trie(iUserInfo[id], SECTION_SILVER_ACE_X_TGA)
		fY = get_float_from_trie(iUserInfo[id], SECTION_SILVER_ACE_Y_TGA)
			
		
		MMCL_DrawTGA(id, szHud, 255, 255, 255, 255, fX, fY, 1, 0, 0.0, 0.0, HUD_HOLD_TIME, CHANNEL_ACE_TGA)
			
	}
}

stock Received_GoldAce(id)
	client_cmd(id, "spk %s", GOLD_ACE_SOUND)

stock Received_SilverAce(id)
	client_cmd(id, "spk %s", SILVER_ACE_SOUND)

	
stock LostAce(id)
	client_cmd(id, "spk %s", LOST_ACE_SOUND)
	
stock is_valid_player(id)
{
	if (!(1<= id <= iMaxPlayers))
		return 0

	return is_user_connected(id)
}

	
stock set_float_to_trie(Trie:iTrieId, szKey[], Float:fInput)
{
	if (!iTrieId)
		return
		
	TrieSetCell(iTrieId , szKey, fInput)
}

stock Float:get_float_from_trie(Trie:iTrieId, szKey[])
{
	if (!iTrieId)
		return 0.0
		
	new Float:fOutput
	TrieGetCell(iTrieId ,szKey, fOutput)
	return fOutput
}

stock set_int_to_trie(Trie:iTrieId, szKey[], iInput)
{
	if (!iTrieId)
		return
		
	TrieSetCell(iTrieId,szKey, iInput)
}

stock get_int_from_trie(Trie:iTrieId, szKey[])
{
	if (!iTrieId)
		return 0
		
	new iOutput
	TrieGetCell(iTrieId,szKey, iOutput)
	return iOutput
}

