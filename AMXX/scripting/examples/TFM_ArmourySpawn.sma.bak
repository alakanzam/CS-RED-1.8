/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <hamsandwich>


#include <TFM_WPN>


#include <GamePlay_Included/Tools.inc>
#include <GamePlay_Included/GamePlay_FFA.inc>
#include <GamePlay_Included/GamePlay_TDM.inc>

#include <ArmouryManager>
#include <WpnMod_Included/WM_DefaultArmoury.inc>


#define PLUGIN "[TFM] Armoury Spawn"
#define VERSION "-[No Info]-"
#define AUTHOR "Redplane"

#define TASK_ARMOURY_RESPAWN	1500

new Float:fRESPAWN_TIME = 10.0

new iArmouryRespawn = 0


public plugin_cfg() 
{
	new iGamePlay = get_current_gameplay()
	
	switch (iGamePlay)
	{
		case GAMEMODE_TDM:
			iArmouryRespawn = 1
		case GAMEMODE_FFA:
			iArmouryRespawn = 1
		case GAMEMODE_ESCAPE:
			iArmouryRespawn = 1
	}
	
	if (!iArmouryRespawn)
	{
		set_fail_state("[ARMOURY RESPAWN] Not suitable map")
		return
	}
	
	register_plugin(PLUGIN, VERSION, AUTHOR)
	RegisterHam(Ham_Killed, "armoury_entity", "fw_ArmouryEntityKilled")
}

public fw_ArmouryEntityKilled(iEnt, iKiller)
{
	if (!iArmouryRespawn)
		return
	
	new Float:fOrigin[3], iOrigin[3]
	
	//	Position of Entity
	pev(iEnt, pev_origin, fOrigin)
	FVecIVec(fOrigin, iOrigin)
	
	
	new iParam[6]
	iParam[0] = pev(iEnt, pev_ArmouryType)
	iParam[1] = pev(iEnt, pev_ArmouryId)	// Retrieve Armoury Id of this entity
	iParam[2] = pev(iEnt, pev_ArmouryPoint)
	
	
	set_task(fRESPAWN_TIME, "CreateArmoury_TASK", TASK_ARMOURY_RESPAWN + iEnt, iParam, sizeof iParam)
}

/*			Called when Primary Weapon's Armoury is picked up			*/

public PW_ArmouryPickedUp(id, iEnt)
{
	if (!iArmouryRespawn)
		return
	
	new Float:fOrigin[3], iOrigin[3]
	
	//	Position of Entity
	pev(iEnt, pev_origin, fOrigin)
	FVecIVec(fOrigin, iOrigin)
	
	
	new iParam[6]
	iParam[0] = ARMOURY_PRIMARY
	iParam[1] = pev(iEnt, pev_ArmouryId)	// Retrieve Armoury Id of this entity
	iParam[2] = pev(iEnt, pev_ArmouryPoint)
	
	set_task(fRESPAWN_TIME, "CreateArmoury_TASK", TASK_ARMOURY_RESPAWN + iEnt, iParam, sizeof iParam)
}


/*			Called when Secondary Weapon's Armoury is picked up			*/

public SW_ArmouryPickUp(id, iEnt)
{
	if (!iArmouryRespawn)
		return
	
	new Float:fOrigin[3], iOrigin[3]
	
	//	Position of Entity
	pev(iEnt, pev_origin, fOrigin)
	FVecIVec(fOrigin, iOrigin)
	
	
	new iParam[6]
	iParam[0] = ARMOURY_SECONDARY
	iParam[1] = pev(iEnt, pev_ArmouryId)	// Retrieve Armoury Id of this entity
	iParam[2] = pev(iEnt, pev_ArmouryPoint)
	
	set_task(fRESPAWN_TIME, "CreateArmoury_TASK", TASK_ARMOURY_RESPAWN + iEnt, iParam, sizeof iParam)
}

/*			Called when Melee Weapon's Armoury is picked up			*/
public MM_ArmouryPickedUp(id, iEnt)
{
	if (!iArmouryRespawn)
		return
	
	new Float:fOrigin[3], iOrigin[3]
	
	//	Position of Entity
	pev(iEnt, pev_origin, fOrigin)
	FVecIVec(fOrigin, iOrigin)
	
	
	new iParam[6]
	iParam[0] = ARMOURY_MELEE
	iParam[1] = pev(iEnt, pev_ArmouryId)	// Retrieve Armoury Id of this entity
	iParam[2] = pev(iEnt, pev_ArmouryPoint)
	
	set_task(fRESPAWN_TIME, "CreateArmoury_TASK", TASK_ARMOURY_RESPAWN + iEnt, iParam, sizeof iParam)
}

/*			Called when Grenade's Armoury is picked up			*/

public GM_ArmouryPickedUp(id, iEnt)
{
	if (!iArmouryRespawn)
		return
	
	new Float:fOrigin[3], iOrigin[3]
	
	//	Position of Entity
	pev(iEnt, pev_origin, fOrigin)
	FVecIVec(fOrigin, iOrigin)
	
	
	new iParam[6]
	iParam[0] = ARMOURY_GRENADE
	iParam[1] = pev(iEnt, pev_ArmouryId)	// Retrieve Armoury Id of this entity
	iParam[2] = pev(iEnt, pev_ArmouryPoint)
	
	set_task(fRESPAWN_TIME, "CreateArmoury_TASK", TASK_ARMOURY_RESPAWN + iEnt, iParam, sizeof iParam)
}

/*			Called when Default Armoury is picked up			*/

public DFWM_ArmouryPickedUp(id, iEnt)
{
	if (!iArmouryRespawn)
		return
	
	new Float:fOrigin[3], iOrigin[3]
	
	//	Position of Entity
	pev(iEnt, pev_origin, fOrigin)
	FVecIVec(fOrigin, iOrigin)
	
	
	new iParam[6]
	iParam[0] = ARMOURY_DEFAULT
	iParam[1] = pev(iEnt, pev_ArmouryId)	// Retrieve Armoury Id of this entity
	iParam[2] = pev(iEnt, pev_ArmouryPoint)
	
	set_task(fRESPAWN_TIME, "CreateArmoury_TASK", TASK_ARMOURY_RESPAWN + iEnt, iParam, sizeof iParam)
}
/*				SECTION : TASK					*/

public CreateArmoury_TASK(iParam[6], TASKID)
{
	if (!iArmouryRespawn)
		return
		
	new iPoint = iParam[2]
	
	
	switch (iParam[0]) 	// Check Armoury Type
	{
		case ARMOURY_PRIMARY: 
			set_pw_spawn(iPoint, -1, Float:{0.0, 0.0, 0.0})
		case ARMOURY_SECONDARY:
			set_sec_wpn_spawn(iPoint, -1, Float:{0.0, 0.0, 0.0})
		case ARMOURY_MELEE:
			set_melee_spawn(iPoint, -1, Float:{0.0, 0.0, 0.0})
		case ARMOURY_GRENADE:
			set_grenade_spawn(iPoint, -1, Float:{0.0, 0.0, 0.0})
		case ARMOURY_DEFAULT:
			DFWM_set_armoury_spawn(iPoint, -1, Float:{0.0, 0.0, 0.0})
	}
	
}

/********************************************************************************/
