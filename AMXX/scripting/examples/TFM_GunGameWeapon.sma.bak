/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <TFM_WPN>
#include <GamePlay_Included/Tools.inc>
#include <celltrie>
#include <cswpn_ultilities>
#include <fakemeta_util>
 

#define PLUGIN "GUNGAME WEAPON"
#define VERSION "-[No Info]-"
#define AUTHOR "Nguyen Duy Linh"

#define TASK_GIVE_WPN 2000
#define TASK_GET_RANDOM_WEAPON	5000


#define FILE_WEAPON_LIST	"GunGameWpnList.cfg"
#define FILE_WEAPON_ADD	"GunGameWpnAdd.redplane"
#define DIRECTORY_OF_WEAPON "GunGame_SpecialList"

#define SECTION_WPN_TYPE	"WPN_TYPE"
#define SECTION_WPN_ID	"WPN_ID"
#define SECTION_WPN_REAL_ID	"WPN_REAL_ID"

#define MAX_WPN 64

new Trie:TrieLoadedLine
new Trie:TrieWeaponInfo[MAX_WPN]




new iGunGameWpnCount


enum
{
	GG_NONE,
	GG_PRIMARY,
	GG_SHOTGUN,
	GG_RIFLE,
	GG_SECONDARY,
	GG_PISTOL,
	GG_NORMAL_KNIFE,
	GG_KNIFE,
	GG_NORMAL_GRENADE,
	GG_GRENADE,
}

new iLoadedLineCount

public plugin_cfg() 
{
	if (!is_gungame_on())
	{
		pause("a")
		return
	}
		
	if (!TrieLoadedLine)
		TrieLoadedLine = TrieCreate()
		
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	
	
	new szConfigDir[64], szMapName[32], szWpnListFile[128], szAdditionWpnFile[128]
	
	get_configsdir(szConfigDir, sizeof szConfigDir - 1)
	get_mapname(szMapName, sizeof szMapName - 1)
	
	formatex(szWpnListFile, sizeof szWpnListFile - 1, "%s/%s", szConfigDir, FILE_WEAPON_LIST)
	formatex(szAdditionWpnFile, sizeof szAdditionWpnFile - 1, "%s/%s/%s.redplane", szConfigDir, DIRECTORY_OF_WEAPON, szMapName)
	
	if (!file_exists(szWpnListFile))
	{
		new DEFAULT_WPN_LIST[][] = {"[secondary]models/w_glock18.mdl",	"[secondary]models/w_usp.mdl",	"[secondary]models/w_p228.mdl",
				"[secondary]models/w_elite.mdl",	"[secondary]models/w_fiveseven.mdl",	"[secondary]models/w_deagle.mdl",
				"[primary]models/w_m3.mdl",	"[primary]models/w_xm1014.mdl",	"[primary]models/w_mp5.mdl",	"[primary]models/w_tmp.mdl",
				"[primary]models/w_p90.mdl","[primary]models/w_mac10.mdl", "[primary]models/w_ump45.mdl","[primary]models/w_famas.mdl",
				"[primary]models/w_galil.mdl","[primary]models/w_ak47.mdl","[primary]models/w_m4a1.mdl",
				"[primary]models/w_sg552.mdl","[primary]models/w_aug.mdl","[primary]models/w_scout.mdl",
				"[primary]models/w_awp.mdl","[primary]models/w_g3sg1.mdl","[primary]models/w_sg550.mdl","[primary]models/w_m249.mdl"
				
						}
		for (new i = 0; i < sizeof DEFAULT_WPN_LIST; i++)
			write_file(szWpnListFile, DEFAULT_WPN_LIST[i], i)
	}
	
	if (!file_exists(szAdditionWpnFile))
		formatex(szAdditionWpnFile, sizeof szAdditionWpnFile - 1, "%s/%s", szConfigDir, FILE_WEAPON_ADD)
	
	load_weapon_from_file(szAdditionWpnFile)
	
	if (task_exists(TASK_GET_RANDOM_WEAPON))
		remove_task(TASK_GET_RANDOM_WEAPON)
	
	set_task(0.05, "GetRandomWeaponTASK", TASK_GET_RANDOM_WEAPON, _, _, "b")
	
}

public GetRandomWeaponTASK(TASKID)
{
	new szConfigDir[64], szWpnListFile[128], szMapName[32]
	
	get_configsdir(szConfigDir, sizeof szConfigDir - 1)
	get_mapname(szMapName, sizeof szMapName - 1)
	
	formatex(szWpnListFile, sizeof szWpnListFile - 1, "%s/%s/%s.cfg", szConfigDir, DIRECTORY_OF_WEAPON, szMapName)
	
	if (!file_exists(szWpnListFile))
		formatex(szWpnListFile, sizeof szWpnListFile - 1, "%s/%s", szConfigDir, FILE_WEAPON_LIST)
	
	new iFileSize = file_size(szWpnListFile, 1)
	
	if (iLoadedLineCount > MAX_WPN - 1)
	{
		remove_task(TASKID)
		return
	}
	
	if (iLoadedLineCount > iFileSize - 1)
	{
		//	Clear the Trie Key and Reload
		
		new iRandomLine = random(iFileSize)
		new szLine[5]
		formatex(szLine, sizeof szLine - 1, "%d", iRandomLine)
		TrieDeleteKey(TrieLoadedLine, szLine)
		
		new szInfo[256], TRASH
		read_file(szWpnListFile, iRandomLine, szInfo, sizeof szInfo - 1, TRASH)
		load_weapon_list(szInfo, sizeof szInfo - 1)
		TrieSetCell(TrieLoadedLine, szLine, 1)
		iLoadedLineCount++
		return
	}
	
	new iRandomLine = random(iFileSize)
	new szLine[5]
	formatex(szLine, sizeof szLine - 1, "%d", iRandomLine)
	
	if (TrieKeyExists(TrieLoadedLine, szLine))
		return
	
	new szInfo[256], TRASH
	
	read_file(szWpnListFile, iRandomLine, szInfo, sizeof szInfo - 1, TRASH)
	load_weapon_list(szInfo, sizeof szInfo - 1)
	TrieSetCell(TrieLoadedLine, szLine, 1)
	iLoadedLineCount++
}

public csred_WpnAttachToPlayerPost(id, iEnt, iWeaponId)
{
	if (!is_gungame_on())
		return
		
	new iWpnPos = GG_GetPlayerLevel(id)
	
	if (iWpnPos > iGunGameWpnCount - 1)
		iWpnPos = iGunGameWpnCount - 1
		
	new iType
	TrieGetCell(TrieWeaponInfo[iWpnPos], SECTION_WPN_TYPE, iType)
	
	new iIndex
	TrieGetCell(TrieWeaponInfo[iWpnPos], SECTION_WPN_ID, iIndex)
	
	new iRealIndex
	TrieGetCell(TrieWeaponInfo[iWpnPos], SECTION_WPN_REAL_ID, iRealIndex)
	
	new szWeaponName[32]
	get_weaponname(iWeaponId, szWeaponName, sizeof szWeaponName - 1)
	
	if (iWeaponId == CSW_KNIFE)
		return
		
	if (iWeaponId != iRealIndex)
	{
		give_back_user_weapon(id)
		return
	}
	

	if (iType == GG_PISTOL)
	{
		if (get_user_sec_wpn(id) != iIndex)
		{
			give_back_user_weapon(id)
			return
		}
	}
	else if (iType == GG_RIFLE)
	{
		if (iIndex != get_user_pw(id))
		{
			give_back_user_weapon(id)
			return
		}
	}
	else if (iType == GG_GRENADE)
	{
		if (iIndex != get_user_grenade(id, iWeaponId))
		{
			give_back_user_weapon(id)
			return
		}
	}
}

//	CALLED WHEN A PLAYER LEVEL UP
public GunGame_PlayerLevelUp(id, iLevel)
{
	remove_task(id + TASK_GIVE_WPN)
	
	set_task(0.5, "GivePlayerWeapon_TASK", id + TASK_GIVE_WPN)
}

//	CALLED WHEN A PLAYER RESPAWN
public GunGame_PlayerSpawn(id)
{
	remove_task(id + TASK_GIVE_WPN)
	
	set_task(0.75, "GivePlayerWeapon_TASK", id + TASK_GIVE_WPN)
}

public GivePlayerWeapon_TASK(TASKID)
{
	new id = TASKID - TASK_GIVE_WPN
	
	if (!is_gungame_on())
		return
	
	fm_strip_user_weapons(id)
	new iWpnPos = GG_GetPlayerLevel(id)
	
	if (iWpnPos > iGunGameWpnCount - 1)	
		iWpnPos = iGunGameWpnCount - 1
		
	if (!TrieWeaponInfo[iWpnPos])
		iWpnPos--
	
	new iType 
	TrieGetCell(TrieWeaponInfo[iWpnPos], SECTION_WPN_TYPE, iType)
	
	new iIndex 
	TrieGetCell(TrieWeaponInfo[iWpnPos], SECTION_WPN_ID, iIndex)
	
	new iRealIndex 
	TrieGetCell(TrieWeaponInfo[iWpnPos], SECTION_WPN_REAL_ID, iRealIndex)
	
	
	
	new iCanEquipKnife = 1
	
	new szWeaponName[32]
	get_weaponname(iRealIndex, szWeaponName, sizeof szWeaponName - 1)
	
	switch (iType)
	{
		case GG_SECONDARY:
		{
			fm_give_item(id, szWeaponName)
			UT_SetUserBPA(id, iRealIndex, UT_Get_CS_DefaultBpa(iRealIndex))
			
			engclient_cmd(id, szWeaponName)
		}
		case GG_PISTOL:
			give_player_sec_wpn(id, iIndex)
		case GG_PRIMARY:
		{
			fm_give_item(id, szWeaponName)
			UT_SetUserBPA(id, iRealIndex, UT_Get_CS_DefaultBpa(iRealIndex))
		
			engclient_cmd(id, szWeaponName)
		}
		case GG_RIFLE:
			give_user_pw(id, iIndex)
		case GG_NORMAL_GRENADE:
		{
			fm_give_item(id, szWeaponName)
			engclient_cmd(id, szWeaponName)
		}
		case GG_GRENADE:
			give_user_grenade(id, iIndex)
		case GG_NORMAL_KNIFE:
		{
			fm_give_item(id, szWeaponName)
			engclient_cmd(id, szWeaponName)
			iCanEquipKnife = 0
		}
		case GG_KNIFE:
		{
			give_user_melee(id, iIndex)
			iCanEquipKnife = 0
		}
	}
	
	if (iCanEquipKnife)
		fm_give_item(id, "weapon_knife")
}

stock load_weapon_from_file(szFile[])
{
	if (!file_exists(szFile))
		return
		
	new iTRASH, szText[128]
	
	for (new i = 0; i < file_size(szFile, 1); i++)
	{
		read_file(szFile, i, szText, sizeof szText - 1, iTRASH)
		
		if (equal(szText, "[primary]", 9))
		{
			replace(szText, sizeof szText - 1, "[primary]", "")
			set_pw_load_file(szText, "ini", 1)
		}
		else if (equal(szText, "[secondary]", 11))
		{
			replace(szText, sizeof szText - 1, "[secondary]", "")
			set_sec_wpn_load_file(szText, "ini", 1)
		}
	}
	
}

stock load_weapon_list(szInfo[], iLen)
{
	if (iGunGameWpnCount > MAX_WPN - 1)
		return
		
	if (!TrieWeaponInfo[iGunGameWpnCount])
		TrieWeaponInfo[iGunGameWpnCount] = TrieCreate()
		
	if (equal(szInfo, "[secondary]", 11))
	{
		replace(szInfo, iLen, "[secondary]", "")
		
		new iIndex = UT_WorldModelToWeaponId(szInfo)
		
		if (!iIndex)
		{
			server_print("%s is not valid", szInfo)
			return
		}
		
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount] , SECTION_WPN_TYPE, GG_SECONDARY)
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount] , SECTION_WPN_ID, iIndex)
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount], SECTION_WPN_REAL_ID, iIndex)
		
		
		iGunGameWpnCount++
		
	}
	else if (equal(szInfo, "[secondary_mdl]", 15))
	{
		replace(szInfo, iLen, "[secondary_mdl]", "")
		
		new iIndex =  find_sec_wpn_by_model(szInfo)
		
		if (iIndex < 0)
		{
			server_print("%s is not valid", szInfo)
			return
		}
		
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount] , SECTION_WPN_TYPE, GG_PISTOL)
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount] , SECTION_WPN_ID, iIndex)
		
		iIndex = get_sec_wpn_real_id(iIndex)
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount] , SECTION_WPN_REAL_ID, iIndex)
		
		iGunGameWpnCount++
	}
	else if (equal(szInfo, "[secondary_ser]", 15))
	{
		replace(szInfo, iLen, "[secondary_ser]", "")
		
		new iIndex =  find_sec_wpn_by_serial(szInfo)
		
		if (iIndex < 0)
		{
			server_print("%s is not valid", szInfo)
			return
		}
		
		
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount] , SECTION_WPN_TYPE, GG_PISTOL)
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount] , SECTION_WPN_ID, iIndex)
		
		iIndex = get_sec_wpn_real_id(iIndex)
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount] , SECTION_WPN_REAL_ID, iIndex)
		
		iGunGameWpnCount++
		
	}
	else if (equal(szInfo, "[primary]", 9))
	{
		replace(szInfo, iLen, "[primary]", "")
		
		new iIndex = UT_WorldModelToWeaponId(szInfo)
		
		if (!iIndex)
		{
			server_print("%s is not valid", szInfo)
			return
		}
		
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount] , SECTION_WPN_TYPE, GG_PRIMARY)
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount] , SECTION_WPN_ID, iIndex)
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount], SECTION_WPN_REAL_ID, iIndex)
		
		
		iGunGameWpnCount++
	}
	
	else if (equal(szInfo, "[primary_mdl]", 13))
	{
		replace(szInfo, iLen, "[primary_mdl]", "")
		
		new iIndex = find_pw_by_model(szInfo)
		
		if (iIndex < 0)
		{
			server_print("%s is not valid", szInfo)
			return
		}
		
		
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount] , SECTION_WPN_TYPE, GG_RIFLE)
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount] , SECTION_WPN_ID, iIndex)
		
		
		iIndex = get_pw_real_id(iIndex)
		TrieGetCell(TrieWeaponInfo[iGunGameWpnCount], SECTION_WPN_REAL_ID, iIndex)
		iGunGameWpnCount++
	}
	else if (equal(szInfo, "[primary_ser]", 13))
	{
		replace(szInfo, iLen, "[primary_ser]", "")
		
		new iIndex = find_pw_by_serial(szInfo)
		
		if (iIndex < 0)
		{
			server_print("%s is not valid", szInfo)
			return
		}
		
		
		
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount] , SECTION_WPN_TYPE, GG_RIFLE)
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount] , SECTION_WPN_ID, iIndex)
		
		iIndex = get_pw_real_id(iIndex)
		TrieSetCell(TrieWeaponInfo[iGunGameWpnCount] , SECTION_WPN_REAL_ID, iIndex)
		
		iGunGameWpnCount++
	}
}

stock give_back_user_weapon(id)
{
	fm_strip_user_weapons(id)
	
	remove_task(id + TASK_GIVE_WPN)
	set_task(0.5, "GivePlayerWeapon_TASK", id + TASK_GIVE_WPN)
	
}
