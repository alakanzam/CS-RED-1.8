/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <engine>
#include <fakemeta>
#include <soundinfo>

#include <GamePlay_Included/Tools.inc>

#define PLUGIN "[MAP] Weather"
#define VERSION "1.0"
#define AUTHOR "Nguyen Duy Linh"

#define WEATHER_FILE "TFM_WeatherConfig.cfg"
#define WEATHER_CVAR_FILE	"TFM_WeatherCvar.cfg"



#define TASK_ENABLE_WEATHER_CVAR	1000
#define TASK_PLAY_WIND_SOUND	2000
#define TASK_PLAY_THUNDER_SOUND	3000
#define TASK_PLAY_LIGHTING	4000
#define TASK_PLAY_RAIN_SOUND	5000

#define THUNDER_MIN_TIME	1.0
#define THUNDER_MAX_TIME	10.0

#define LIGHTING_MIN_TIME	0.25
#define LIGHTING_MAX_TIME	4.0

#define LIGHTING_MIN_HOLDTIME	0.15
#define LIGHTING_MAX_HOLDTIME	0.3

enum
{
	WEATHER_DEFAULT,
	WEATHER_RAIN,
	WEATHER_FOG,
	WEATHER_SNOW
}

enum
{
	LIGHT_NO,
	LIGHT_YES
}

new FOG_DENSITY[] = "0.0018"
new FOG_COLOR[] = "128 128 128"

new MAP_LIGHT[32]


new iCvarFogDensity, iCvarFogColor
new iCvarThunderSound, iCvarWindSound
new iCvarLighting

new iCvarWindSoundFile
new iCvarWindSoundMinTime, iCvarWindSoundMaxTime

new iCvarRainSoundFile
new iCvarRainSound

new iWeatherEnable = 0
new iMapWeatherAmount = 0
new iThunderSound = 0
new iWindSound = 0
new iLighting = 0
new iLightStage = LIGHT_NO
new iRainSound = 0

new iLightLevel 

stock szTHUNDER_SOUND[][] = {"ambience/thunder1.wav", "ambience/thunder2.wav", "ambience/thunder_clap.wav"}

stock szWIND_SOUND[] = {"ambience/trailer_wndinsidepark_loop.wav"}
#define RAIN_SOUND_FILE "sound/ambience/rain.wav"
stock Float:fWIND_TIME[] = {9.0}

stock MAP_LIGHT_LEVEL[][] = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", 
				"q", "r", "s", "t", "u", "v", "w", "x", "y", "z"}
				
				

new ifw_MapLightStyle

new Float:fWindMinTime, Float:fWindMaxTime

new szWindFileSound[256]
new szRainFileSound[256]

public plugin_precache()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	iMapWeatherAmount = 0
	
	new szConfigDir[128], szWeatherFile[256], szWeatherCvarFile[256]
	
	get_configsdir(szConfigDir, sizeof szConfigDir - 1)
	
	formatex(szWeatherFile, sizeof szWeatherFile - 1, "%s/%s", szConfigDir, WEATHER_FILE)
	formatex(szWeatherCvarFile, sizeof szWeatherCvarFile - 1, "%s/%s", szConfigDir, WEATHER_CVAR_FILE)
	
	if (!file_exists(szWeatherFile))
		return
	
	new szCvarInfo[128], szMapName[32]
	get_mapname(szMapName, sizeof szMapName - 1)
		
	formatex(szCvarInfo, sizeof szCvarInfo - 1, "WeatherConfig/%s/Fog/Density", szMapName)
	iCvarFogDensity = register_cvar(szCvarInfo, FOG_DENSITY)
		
	formatex(szCvarInfo, sizeof szCvarInfo - 1, "WeatherConfig/%s/Fog/Color", szMapName)
	iCvarFogColor = register_cvar(szCvarInfo, FOG_COLOR)
		
	formatex(szCvarInfo, sizeof szCvarInfo - 1, "WeatherConfig/%s/RainSound", szMapName)
	iCvarRainSound = register_cvar(szCvarInfo, "0")
		
	formatex(szCvarInfo, sizeof szCvarInfo - 1, "WeatherConfig/%s/RainSoundFile", szMapName)
	iCvarRainSoundFile = register_cvar(szCvarInfo, RAIN_SOUND_FILE)
		
	formatex(szCvarInfo, sizeof szCvarInfo - 1, "WeatherConfig/%s/ThunderSound", szMapName)
	iCvarThunderSound = register_cvar(szCvarInfo, "0")
		
	formatex(szCvarInfo, sizeof szCvarInfo - 1, "WeatherConfig/%s/WindSound", szMapName)
	iCvarWindSound = register_cvar(szCvarInfo, "0")
		
	formatex(szCvarInfo, sizeof szCvarInfo - 1, "WeatherConfig/%s/WindSoundFile", szMapName)
	iCvarWindSoundFile = register_cvar(szCvarInfo, szWIND_SOUND)
		
	formatex(szCvarInfo, sizeof szCvarInfo - 1, "WeatherConfig/%s/WindMinTime", szMapName)
	iCvarWindSoundMinTime = register_cvar(szCvarInfo, "0.5")
		
	formatex(szCvarInfo, sizeof szCvarInfo - 1, "WeatherConfig/%s/WindMaxTime", szMapName)
	iCvarWindSoundMaxTime = register_cvar(szCvarInfo, "5.0")
		
		//formatex(szCvarInfo, sizeof szCvarInfo - 1, "WeatherConfig/%s/WindDuration", szMapName)
		
	formatex(szCvarInfo, sizeof szCvarInfo - 1, "WeatherConfig/%s/Lighting", szMapName)
	iCvarLighting = register_cvar(szCvarInfo, "0")
		
		
	new szRealMapName[32]
	get_mapname(szRealMapName, sizeof szRealMapName - 1)
	
	for (new iLine = 0; iLine < file_size(szWeatherFile, 1); iLine++)
	{
		new szInfo[128], szWeatherType[5] , szSkyName[32], szBrightness[10], szAmount[10]
		new iTextLength
		
		//formatex(szSkyName, sizeof szSkyName - 1, "|")
	
	
		read_file(szWeatherFile, iLine, szInfo, sizeof szInfo - 1, iTextLength)
		
		parse(szInfo, szMapName, sizeof szMapName - 1, szWeatherType, sizeof szWeatherType - 1 , szSkyName, sizeof szSkyName - 1, szBrightness, sizeof szBrightness - 1, szAmount, sizeof szAmount - 1)
		
		if (!equal(szMapName, szRealMapName))
			continue
		
		
		
		if (file_exists(szWeatherCvarFile))
		{
			server_exec()
			server_cmd("exec %s", szWeatherCvarFile)
			server_exec()
		}
			
		new iWEATHER_TYPE = str_to_num(szWeatherType)
		
		if (iWEATHER_TYPE == WEATHER_RAIN)
			create_entity("env_rain")
		else if (iWEATHER_TYPE == WEATHER_SNOW)
			create_entity("env_snow")
		else if (iWEATHER_TYPE == WEATHER_FOG)
		{
			new iEnt = create_entity("env_fog")
			
			new szFogDensity[10], szFogColor[10]
			get_pcvar_string(iCvarFogDensity, szFogDensity, sizeof szFogDensity - 1)
			get_pcvar_string(iCvarFogColor, szFogColor, sizeof szFogColor - 1)
			
			fm_set_kvd( iEnt, "density", szFogDensity, "env_fog" );
			fm_set_kvd( iEnt, "rendercolor", szFogColor, "env_fog" )
			
			DispatchSpawn(iEnt)
		}
		
		if (!equal(szSkyName, "|", 1))
			set_cvar_string("sv_skyname", szSkyName)
		else
			load_default_sky()
		
		if (!equal(szBrightness, "|"))
		{
			set_lights(szBrightness)
			iLightLevel = get_light_level(szBrightness)
		}
		else
		{
			if (!ifw_MapLightStyle)
				ifw_MapLightStyle = register_forward(FM_LightStyle, "fw_GetMapLightStyle", 1)
		}
			
		iMapWeatherAmount = str_to_num(szAmount)
		iThunderSound = get_pcvar_num(iCvarThunderSound)
		iWindSound = get_pcvar_num(iCvarWindSound)
		fWindMinTime = get_pcvar_float(iCvarWindSoundMinTime)
		fWindMaxTime = get_pcvar_float(iCvarWindSoundMaxTime)
		iRainSound  = get_pcvar_num(iCvarRainSound)
		
		get_pcvar_string(iCvarWindSoundFile, szWindFileSound, sizeof szWindFileSound - 1)
		
		iLighting = get_pcvar_num(iCvarLighting)
		
		
		if (iRainSound)
		{
			get_pcvar_string(iCvarRainSoundFile, szRainFileSound, sizeof szRainFileSound - 1)
			
			set_task(1.0, "TASK_PlaySoundOfRain", TASK_PLAY_RAIN_SOUND)
		}
		if (iWindSound)
		{
			if (task_exists(TASK_PLAY_WIND_SOUND))
				remove_task(TASK_PLAY_WIND_SOUND)
			
			set_task(1.0, "TASK_PlaySoundOfWind", TASK_PLAY_WIND_SOUND)
		}
		
		if (iThunderSound)
		{
			if (task_exists(TASK_PLAY_THUNDER_SOUND))
				remove_task(TASK_PLAY_THUNDER_SOUND)
				
			set_task(1.0, "TASK_PlayThunderSound", TASK_PLAY_THUNDER_SOUND)
			
		}
		
		if (iLighting)
		{
			if (task_exists(TASK_PLAY_LIGHTING))
				remove_task(TASK_PLAY_LIGHTING)
				
			set_task(1.0, "TASK_PlayLighting", TASK_PLAY_LIGHTING)
		}
		
		iWeatherEnable = 1
	}	
	
	
}

public plugin_init()
{
	if (ifw_MapLightStyle)
		unregister_forward(FM_LightStyle, ifw_MapLightStyle, 1)
		
	//if (iForward_KeyValue)
	//	unregister_forward(FM_KeyValue, iForward_KeyValue)
		
	if (is_zombie_on())
	{
		if (iWeatherEnable)
			return
		
		iLightLevel = random_num(2, 6)
		set_lights(MAP_LIGHT_LEVEL[iLightLevel])
		
		new iThunderToggle = random(10)
		
		if (iThunderToggle < 4)
			set_pcvar_num(iCvarThunderSound, 1)
		
		new iWindSoundToggle = random(10)
		
		if (iWindSoundToggle < 5)
			set_pcvar_num(iCvarWindSound, 1)
			
		new iLightingToggle = random(10)
		
		if (iLightingToggle < 2)
			set_pcvar_num(iCvarLighting, 1)
			
			
		iWeatherEnable = 1
		
	}
	
	if (!iWeatherEnable)
	{
		load_default_sky()
		set_fail_state("TFM WEATHER EFFECT IS OFF")
		return
	}
}


public fw_GetMapLightStyle(iStyle, szMapLight[])
{
	if (!iStyle)
		return
		
	formatex(MAP_LIGHT, sizeof MAP_LIGHT - 1, "%s", szMapLight)
	iLightLevel = get_light_level(szMapLight)
}

public TASK_PlaySoundOfRain(TASKID)
{
	if (!iWeatherEnable)
		return
		
	if (!iRainSound)
		return
		
	client_cmd(0, "spk %s", szRainFileSound)
		
	new iData[SParam]
	 
	if(sfile_loaddata(szRainFileSound, iData) == SRES_OK)
	{
			
		new Float:fDuration = sfile_get_duration(szRainFileSound)
		
		
		set_task(fDuration, "TASK_PlaySoundOfRain", TASKID)
		
	}
	
}
public TASK_PlayLighting(TASKID)
{
	if (!iWeatherEnable)
		return
		
	if (!iLighting)
		return
		
	if (iLightLevel < 0)
		return
		
	if (iLightLevel > sizeof MAP_LIGHT_LEVEL - 1)
		return
		
	if (iLightStage != LIGHT_YES)
	{
		new iRandomLight = iLightLevel + random(10)
		
		if (iRandomLight > sizeof MAP_LIGHT_LEVEL - 1)
			iRandomLight = sizeof MAP_LIGHT_LEVEL - 1
			
		set_lights(MAP_LIGHT_LEVEL[iRandomLight])
		
		iLightStage = LIGHT_YES
		
		new Float:fLightTime = random_float(LIGHTING_MIN_HOLDTIME, LIGHTING_MAX_HOLDTIME)
		set_task(fLightTime, "TASK_PlayLighting", TASKID)
	}
	else
	{
		iLightStage = LIGHT_NO
		set_lights(MAP_LIGHT_LEVEL[iLightLevel])
		
		new Float:fLightTime = random_float(LIGHTING_MIN_TIME, LIGHTING_MAX_TIME)
		set_task(fLightTime, "TASK_PlayLighting", TASKID)
	}
	
}
public TASK_PlaySoundOfWind(TASKID)
{
	if (!iWeatherEnable)
		return
		
	if (!iWindSound)
		return
		
	
	switch ( sfile_type(szWindFileSound)) 
	{
		case SFILE_WAV:
			client_cmd(0, "spk %s", szWindFileSound)
		case SFILE_MP3:
			client_cmd(0, "mp3 play ^"%s^"", szWindFileSound);  
	}
	new iData[SParam]
	 
	if(sfile_loaddata(szWindFileSound, iData) == SRES_OK)
	{
		
		
		if (fWindMinTime < 0.0)
			fWindMinTime = 0.0
			
		if (fWindMaxTime < 0.0)
			fWindMaxTime = 0.0
			
		new Float:fDuration = sfile_get_duration(szWindFileSound) + random_float(fWindMinTime, fWindMaxTime)
		
		
		set_task(fDuration, "TASK_PlaySoundOfWind", TASKID)
		
	}
}

public TASK_PlayThunderSound(TASKID)
{
	if (!iWeatherEnable)
		return
		
	if (!iThunderSound)
		return
		
	new iRandomThunderSound = random(sizeof szTHUNDER_SOUND)
	
	client_cmd(0, "spk %s", szTHUNDER_SOUND[iRandomThunderSound])
	
	new Float:fThunderTime = random_float(THUNDER_MIN_TIME, THUNDER_MAX_TIME)
	set_task(fThunderTime, "TASK_PlayThunderSound", TASKID)
}

public client_putinserver(id)
{
	if (is_user_bot(id))
		return
		
	if (task_exists(id + TASK_ENABLE_WEATHER_CVAR))
		remove_task(id + TASK_ENABLE_WEATHER_CVAR)
		
	if (!iWeatherEnable)
		return
		
	set_task(1.0, "TASK_CheckWeatherCvar", id + TASK_ENABLE_WEATHER_CVAR, _, _, "b")
	
}

public TASK_CheckWeatherCvar(TASKID)
{
	new id = TASKID - TASK_ENABLE_WEATHER_CVAR
	
	if (!is_user_connected(id) || !iWeatherEnable)
	{
		remove_task(TASKID)
		return
	}
	
	new szCommand[32]
	formatex(szCommand, sizeof szCommand - 1, "cl_weather %d", iMapWeatherAmount)
	client_cmd(id, szCommand)
	console_cmd(id, szCommand)
}

stock fm_set_kvd(entity, const key[], const value[], const classname[])
{
	set_kvd(0, KV_ClassName, classname)
	set_kvd(0, KV_KeyName, key)
	set_kvd(0, KV_Value, value)
	set_kvd(0, KV_fHandled, 0)

	dllfunc(DLLFunc_KeyValue, entity, 0)
}

stock get_light_level(szLightLevel[])
{
	for (new iLight = 0 ; iLight < sizeof MAP_LIGHT_LEVEL; iLight++)
		if (equal(szLightLevel, MAP_LIGHT_LEVEL[iLight]))
			return iLight
			
	return - 1
}

stock load_default_sky()
{
	new szMapName[32]
	get_mapname(szMapName, sizeof szMapName - 1)
	
	new szFile[128], szBuffer[64]
	formatex(szFile, sizeof szFile - 1, "maps/%s.bsp", szMapName)
	
	new bool:bInEntityDatas
	
	new fp = fopen(szFile, "rb")
	
	new iOffset, iLength, iMaxPos
	fseek(fp, 4, SEEK_SET)
	fread(fp, iOffset, BLOCK_INT)
	fread(fp, iLength, BLOCK_INT)
	iMaxPos = iOffset + iLength
	fseek(fp, iOffset, SEEK_SET)
	
	while( ftell(fp) < iMaxPos )
	{
		fgets(fp, szBuffer, charsmax(szBuffer))
		trim(szBuffer)

		if( bInEntityDatas )
		{
			if( szBuffer[0] == '}' )
			{
				bInEntityDatas = false
				
			}
			else
			{
				new szKey[32], szValue[32]
				parse(szBuffer, szKey, charsmax(szKey), szValue, charsmax(szValue))
				
				if (equal(szKey, "skyname"))
				{
					set_cvar_string("sv_skyname", szValue)
					return
				}
				
			}
		}
		else if( szBuffer[0] == '{' )
			bInEntityDatas = true
	}
	
	fclose(fp)
}
