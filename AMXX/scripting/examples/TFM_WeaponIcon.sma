/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <TFM_WPN>
#include <fakemeta>
#include <csx>
#include <engine>
#include <mmcl_util>
#include <hamsandwich>
#include <cstrike>
#include <cswpn_ultilities>
#include <celltrie>


#include <cstrike_pdatas>
#include <player_api>
#include <cvar_util>

#include <GamePlay_Included/Manager.inc>
#include <GamePlay_Included/IntegerConstant.inc>
#include <GamePlay_Included/Tools.inc>

#define PLUGIN "[TFM] WEAPON HUD | AMMO"
#define VERSION "-[No Info]-"
#define AUTHOR "Nguyen Duy Linh"

#define TASK_DRAW_WPN_HUD 1000

#define PRIMARY_WEAPONS_BITSUM ((1<<CSW_SCOUT)|(1<<CSW_XM1014)|(1<<CSW_MAC10)|(1<<CSW_AUG)|(1<<CSW_UMP45)|(1<<CSW_SG550)|(1<<CSW_GALIL)|(1<<CSW_FAMAS)|(1<<CSW_AWP)|(1<<CSW_MP5NAVY)|(1<<CSW_M249)|(1<<CSW_M3)|(1<<CSW_M4A1)|(1<<CSW_TMP)|(1<<CSW_G3SG1)|(1<<CSW_SG552)|(1<<CSW_AK47)|(1<<CSW_P90))
#define SECONDARY_WEAPONS (1<<CSW_DEAGLE | 1<<CSW_USP | 1<< CSW_GLOCK18 | 1<<CSW_P228 | 1<<CSW_ELITE | 1<<CSW_FIVESEVEN)


#define is_primary_wpn(%1)      (PRIMARY_WEAPONS_BITSUM & (1<<%1))
#define is_secondary_wpn(%1)	    (SECONDARY_WEAPONS & (1<<%1))
#define is_grenade(%1)	(GRENADES_BITSUM & (1<<%1))




/*			TRIE SECTION			*/
new Trie:iHudPosition[33]

/*			  TRIE KEY			*/

//		WEAPON HUD

#define SECTION_WEAPON_HUD_X_TGA "WEAPON_HUD_X_TGA"
#define SECTION_WEAPON_HUD_Y_TGA "WEAPON_HUD_Y_TGA"

//		AMMO CELL
#define SECTION_AMMO_CELL_X	"AMMO_CELL_X"
#define SECTION_AMMO_CELL_Y	"AMMO_CELL_Y"

#define SECTION_AMMO_CELL_X_TGA	"AMMO_CELL_X_TGA"
#define SECTION_AMMO_CELL_Y_TGA	"AMMO_CELL_Y_TGA"

//		AMMO TEXT
#define SECTION_AMMO_TEXT_X	"AMMO_TEXT_X"
#define SECTION_AMMO_TEXT_Y	"AMMO_TEXT_Y"

//		WEAPON NAME
#define SECTION_WEAPON_NAME_X	"WEAPON_NAME_X"
#define SECTION_WEAPON_NAME_Y	"WEAPON_NAME_Y"

#define SECTION_LAST_CLIP	"LAST_CLIP"
#define SECTION_LAST_BPA	"LAST_BPA"

/*			CVAR			*/
new iCvar_ShowAmmo
new iCvar_ShowWeaponHud

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)

	iCvar_ShowAmmo = register_cvar("TFM_HUD/Weapon/Ammo_Toggle", "1")
	iCvar_ShowWeaponHud = register_cvar("TFM_HUD/Weapon/WeaponHud_Toggle", "1")
	
	CvarHookChange(iCvar_ShowAmmo, "CvarChange_AmmoDisplay")
	CvarHookChange(iCvar_ShowWeaponHud, "CvarChange_WeaponDisplay")
	
	
	register_concmd("TFM_HUD/Weapon/Icon_X", "TGA_WeaponHud_X")
	register_concmd("TFM_HUD/Weapon/Icon_Y", "TGA_WeaponHud_Y")
	
	register_concmd("TFM_HUD/AmmoCell/SPR_X", "SPR_AmmoCell_X")
	register_concmd("TFM_HUD/AmmoCell/SPR_Y", "SPR_AmmoCell_Y")
	
	register_concmd("TFM_HUD/AmmoCell/TGA_X", "TGA_AmmoCell_X")
	register_concmd("TFM_HUD/AmmoCell/TGA_Y", "TGA_AmmoCell_Y")
	
	register_concmd("TFM_HUD/Weapon/Ammo_X", "SPR_Ammo_X")
	register_concmd("TFM_HUD/Weapon/Ammo_Y", "SPR_Ammo_Y")

	register_concmd("TFM_HUD/Weapon/Name_X", "SPR_Name_X")
	register_concmd("TFM_HUD/Weapon/Name_Y", "SPR_Name_Y")

	
	register_event("CurWeapon", "Event_CurWeapon", "b", "1=1")	
}

public client_putinserver(id)
{
	if (is_user_bot(id))
		return
	
	if (!iHudPosition[id])
		iHudPosition[id] = TrieCreate()
}

public client_disconnect(id)
{
	if (is_user_bot(id))
		return
		
	if (iHudPosition[id])
	{
		TrieDestroy(iHudPosition[id])
		iHudPosition[id] = Invalid_Trie
	}
	remove_task(id + TASK_DRAW_WPN_HUD)
}
/*			       Console Command				*/


//	WEAPON HUD [TGA]

public TGA_WeaponHud_X(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_trie_float(id, SECTION_WEAPON_HUD_X_TGA, str_to_float(szArg))
}

public TGA_WeaponHud_Y(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_trie_float(id, SECTION_WEAPON_HUD_Y_TGA, str_to_float(szArg))
}
 
//	AMMO CELL [SPRITE]

public SPR_AmmoCell_X(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_trie_float(id, SECTION_AMMO_CELL_X, str_to_float(szArg))
}

public SPR_AmmoCell_Y(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_trie_float(id, SECTION_AMMO_CELL_Y, str_to_float(szArg))
}

//	AMMO CELL [TGA]

public TGA_AmmoCell_X(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_trie_float(id, SECTION_AMMO_CELL_X_TGA, str_to_float(szArg))
}

public TGA_AmmoCell_Y(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_trie_float(id, SECTION_AMMO_CELL_Y_TGA, str_to_float(szArg))
}

//	AMMO TEXT

public SPR_Ammo_X(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_trie_float(id, SECTION_AMMO_TEXT_X, str_to_float(szArg))
}

public SPR_Ammo_Y(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_trie_float(id, SECTION_AMMO_TEXT_Y, str_to_float(szArg))
}

//	Weapon Name
public SPR_Name_X(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_trie_float(id, SECTION_WEAPON_NAME_X, str_to_float(szArg))
}

public SPR_Name_Y(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_trie_float(id, SECTION_WEAPON_NAME_Y, str_to_float(szArg))
}



/*			Called when CVAR changes			*/

public CvarChange_AmmoDisplay(handleVar, oldValue[], newValue[],  cvarName[] )
{
	if (!str_to_num(newValue))
	{
		new iPlayers[32], iNumber
		get_players(iPlayers, iNumber, "ac")
		
		for (new i = 0; i < iNumber; i++)
		{
			new iPlayer = iPlayers[i]
			
			display_ammo_cell(iPlayer, 1)
			DrawAmmoInfo(iPlayer, 0, 0, 1)
		}
	}
	else
	{
		new iPlayers[32], iNumber
		get_players(iPlayers, iNumber, "ac")
			
		for (new i = 0; i < iNumber; i++)
		{
			
			new iPlayer = iPlayers[i]
				
			display_ammo_cell(iPlayer, 0)
			
			new iClip
			new iWeaponId = get_user_weapon(iPlayer, iClip)
			
			UT_SendCurWeaponMsg(iPlayer, 1, iWeaponId, iClip, 1)
		}
	}
}

public CvarChange_WeaponDisplay(handleVar, oldValue[], newValue[],  cvarName[] )
{
	if (!str_to_num(newValue))
	{
		new iPlayers[32], iNumber
		get_players(iPlayers, iNumber, "ac")
		
		for (new i = 0; i < iNumber; i++)
		{
			new iPlayer = iPlayers[i]
			new iWeaponId = get_user_weapon(iPlayer)
			
			ShowMyWeapon(iPlayer, iWeaponId)
		}
	}
	else
	{
		new iPlayers[32], iNumber
		get_players(iPlayers, iNumber, "ac")
			
		for (new i = 0; i < iNumber; i++)
		{
			
			new iPlayer = iPlayers[i]
				
			
			new iWeaponId = get_user_weapon(iPlayer)
			
			ShowMyWeapon(iPlayer, iWeaponId)
			
		}
	}
}

/************************************************************************/



public csred_PlayerKilledPost(iVictim, iKiller)
{
	if (!is_user_connected(iVictim))
		return
		
	if (is_user_bot(iVictim))
		return
		
	clear_weapon_info(iVictim)
}
	
public csred_WpnDeploy_Pre(id, iEnt, iWeaponId)
{
	if (!is_user_alive(id))
		return
	
	if (is_user_bot(id))
		return

	clear_weapon_info(id)
	
	remove_task(id + TASK_DRAW_WPN_HUD)
	
	set_task(0.1, "DrawWeaponHud_TASK", id + TASK_DRAW_WPN_HUD)
}

public csred_WpnHolster_Post(id, iEnt)
{
	if (!is_user_alive(id))
		return
	
	if (is_user_bot(id))
		return

	clear_weapon_info(id)
	
	remove_task(id + TASK_DRAW_WPN_HUD)
}


public DrawWeaponHud_TASK(TASKID)
{
	new id = TASKID - TASK_DRAW_WPN_HUD
	
	if (!is_user_alive(id))
		return
		
	if (is_user_bot(id))
		return
		
	new iEnt = get_pdata_cbase(id, m_pActiveItem, 5)
	
	if (!iEnt || !pev_valid(iEnt))
		return
		
	new iWeaponId = cs_get_weapon_id(iEnt)
	
	ShowMyWeapon(id, iWeaponId)
	
	if (iWeaponId == CSW_KNIFE)
	{
		DrawAmmoInfo(id, 0, 0 , 1)
		display_ammo_cell(id, 1)
	}
	else
	{
		if (!cs_get_weapon_ammo(iEnt) && !UT_GetUserBPA(id, iWeaponId))
			display_ammo_cell(id, 1)
		else	display_ammo_cell(id, 0)
	}
		
}


public Event_CurWeapon(id)
{
	if (!is_user_connected(id))
		return
		
	if (is_user_bot(id))
		return
		
	if (!is_user_alive(id))
		return 
		
	new iWeaponId = read_data(2)
	
	if (iWeaponId == CSW_KNIFE)
		return
		
	new iEnt = get_pdata_cbase(id, m_pActiveItem, 5)
	
	if (!iEnt || !pev_valid(iEnt))
		return
		
	new iClip , iBpa
				
	iClip = cs_get_weapon_ammo(iEnt)
	iBpa = UT_GetUserBPA(id, iWeaponId)
			
	new iLastClip, iLastBpa
	
	get_int_from_key(id, SECTION_LAST_CLIP, iLastClip)
	get_int_from_key(id, SECTION_LAST_BPA, iLastBpa)
	
	if (iClip != iLastClip || iBpa != iLastBpa)
	{
		DrawAmmoInfo(id, iClip, iBpa, 0)
		set_int_key(id, SECTION_LAST_CLIP, iClip)
		set_int_key(id, SECTION_LAST_BPA, iBpa)
	}
	
	if (!iClip && !iBpa)
	{
		DrawAmmoInfo(id, iClip , iBpa , 1)
		display_ammo_cell(id, 1)
	}
	
	
}


stock ShowMyWeapon(id, iWeaponId)
{
	if (!is_user_connected(id))
		return
		
	if (is_user_bot(id))
		return

	if (!is_user_alive(id))
		return
	
	if (!iWeaponId)
	{
		clear_weapon_info(id)
		return
	}
	
	DrawWeaponHud(id, iWeaponId, 0, -1.0)
	
}

stock DrawWeaponHud(id, iWeaponId, iEffect, Float:fTime)
{
	
	
	new ShownHud[64]
	new szShownName[64]
	
	
	
	if (is_user_zombie(id))
	{
		new iClassId = get_user_zombie_class(id)
		get_class_wpn_hud(iClassId, iWeaponId, ShownHud, sizeof ShownHud - 1)
		get_class_wpn_name(iClassId, iWeaponId, szShownName, sizeof szShownName - 1)
	}
	else
	{
		UT_Get_CS_Name(iWeaponId, szShownName, sizeof szShownName - 1)
		UT_Get_CS_Hud(iWeaponId, ShownHud , sizeof ShownHud - 1)
		
		if (iWeaponId == CSW_KNIFE)
		{
			
			new iMeleeId = get_user_melee(id)
			if (iMeleeId > -1)
			{
				get_melee_hud(iMeleeId, ShownHud, sizeof ShownHud - 1)
				get_melee_name(iMeleeId, szShownName, sizeof szShownName - 1)	
			}
		}
		else if (is_primary_wpn(iWeaponId))
		{
			new iPrimaryWpnId = get_user_pw(id)
				
			if (iPrimaryWpnId  > -1)
			{
					
				get_pw_hud(iPrimaryWpnId , ShownHud, sizeof ShownHud - 1)
				get_pw_name(iPrimaryWpnId, szShownName, sizeof szShownName - 1)
					
			}
				
		}
		else if (is_secondary_wpn(iWeaponId))
		{
				
			new iSecondaryWpnId = get_user_sec_wpn(id)
			if (iSecondaryWpnId > -1)
			{
				get_sec_wpn_hud(iSecondaryWpnId , ShownHud , sizeof ShownHud - 1)
				get_sec_wpn_name(iSecondaryWpnId, szShownName, sizeof szShownName - 1)
			}
			
		}
		else if (is_grenade(iWeaponId))
		{
			
			new iGrenadeId = get_user_grenade(id, iWeaponId)
			if (iGrenadeId > -1)
			{
				get_grenade_hud(iGrenadeId , ShownHud, sizeof ShownHud - 1)
				get_grenade_name(iGrenadeId, szShownName, sizeof szShownName - 1)
			}
			
		}
	}
		
	new Float:fX, Float:fY
	
	get_float_from_key(id, SECTION_WEAPON_NAME_X, fX)
	get_float_from_key(id, SECTION_WEAPON_NAME_Y, fY)
	
	if (get_pcvar_num(iCvar_ShowWeaponHud))
		MMCL_DrawText(id, szShownName, 0, 250, 0, fX, fY, 1, -1.0, TEXT_WEAPON_NAME)
	else	MMCL_RemoveImage(id, HUDTYPE_TEXT, TEXT_WEAPON_NAME)
	ShowWpnHud(id, ShownHud, fTime, 255, 255, 255, iEffect)		
}

public ShowWpnHud(id, HUD[], Float:fDisplayTime, iRed, iGreen, iBlue, iEffect)
{
	if (!is_user_connected(id))
		return
		
	if (is_user_bot(id))
		return
	
	if (!get_pcvar_num(iCvar_ShowWeaponHud))
		return
		
	new szHud[128]
	
	new Float:fX, Float:fY
	
	
	formatex(szHud, sizeof szHud - 1, "%s/HUD_WPN/%s.tga", TFM_TGA_DIRECTORY, HUD)
		
	if (!file_exists(szHud))
		return
			
	formatex(szHud, sizeof szHud - 1, "%s/HUD_WPN/%s", TFM_TGA_DIRECTORY, HUD)
	
	get_float_from_key(id, SECTION_WEAPON_HUD_X_TGA, fX)
	get_float_from_key(id, SECTION_WEAPON_HUD_Y_TGA, fY)
			
	
	MMCL_DrawTGA(id, szHud, 255, 255, 255, 255, fX, fY, 1, 0, 0.0, 0.0, -1.0, CHANNEL_WEAPON_ICON_TGA);
}

stock display_ammo_cell(id, iRemove = 0)
{
	
	if (!is_user_connected(id))
		return
		
	if (iRemove)
	{
		MMCL_RemoveImage(id, HUDTYPE_SPR, CHANNEL_AMMO_CELL)
		MMCL_RemoveImage(id, HUDTYPE_TGA, CHANNEL_AMMO_CELL_TGA)
		return
	}
	
	if (!get_pcvar_num(iCvar_ShowAmmo))
		return
	
	new Float:fX, Float:fY
	new szFullHud[128]
	
	#define AMMO_CELL "AMMO_CELL"
	formatex(szFullHud, sizeof szFullHud - 1, "sprites/%s.spr", AMMO_CELL)
				
	if (!file_exists(szFullHud))
		return
		
	formatex(szFullHud, sizeof szFullHud - 1, "%s", AMMO_CELL)
		
	get_float_from_key(id, SECTION_AMMO_CELL_X, fX)
	get_float_from_key(id, SECTION_AMMO_CELL_Y, fY)
		
	MMCL_DrawSPR(id, szFullHud, 1, 255, 255, 255, 255, fX, fY, 1, DRAWMODE_ADDITIVE, 0.0, 0.0, -1.0, CHANNEL_AMMO_CELL)

}

stock clear_weapon_info(id)
{
	if (!is_user_connected(id))
		return
		
	if (is_user_bot(id))
		return
		
		
	MMCL_RemoveImage(id, HUDTYPE_TGA, CHANNEL_WEAPON_ICON_TGA)
	MMCL_RemoveImage(id, HUDTYPE_TEXT, TEXT_WEAPON_NAME)
	
	DrawAmmoInfo(id, 0, 0 , 1)
	display_ammo_cell(id, 1)
	
	set_int_key(id, SECTION_LAST_CLIP, -1)
	set_int_key(id, SECTION_LAST_BPA, -1)
}

stock DrawAmmoInfo(id, iClip, iBpa, iRemove = 0)
{
	if (!is_user_connected(id))
		return
	
	if (is_user_bot(id))
		return
		
	if (iRemove || !get_pcvar_num(iCvar_ShowAmmo))
	{
		MMCL_RemoveImage(id, HUDTYPE_TEXT, TEXT_WEAPON_AMMO)
		return
	}
		
	new Float:fX, Float:fY
	
	get_float_from_key(id, SECTION_AMMO_TEXT_X, fX)
	get_float_from_key(id, SECTION_AMMO_TEXT_Y, fY)
	
	new szWeaponAmmoInfo[32]
	formatex(szWeaponAmmoInfo, sizeof szWeaponAmmoInfo - 1, "%d / %d", abs(iClip), iBpa)
	MMCL_DrawText(id, szWeaponAmmoInfo, 255, 255, 255, fX, fY, 1, -1.0, TEXT_WEAPON_AMMO)
}


stock get_float_from_key(id, szKey[], &Float:fOutput)
{
	if (is_user_bot(id))
		return
		
	if (!iHudPosition[id])
		return
		
	TrieGetCell(iHudPosition[id], szKey, fOutput)
}

stock get_int_from_key(id, szKey[], &iOutput)
{
	if (is_user_bot(id))
		return
		
	if (!iHudPosition[id])
		return
		
	TrieGetCell(iHudPosition[id], szKey, iOutput)
}

stock set_int_key(id, szKey[], iInput)
{
	if (is_user_bot(id))
		return
		
	if (!iHudPosition[id])
		return
		
	TrieSetCell(iHudPosition[id], szKey, iInput)
}

stock set_trie_float(id, szKey[], Float:fInput)
{
	if (is_user_bot(id))
		return
		
	if (!iHudPosition[id])
		iHudPosition[id] = TrieCreate()
		
	TrieSetCell(iHudPosition[id], szKey, fInput)
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
