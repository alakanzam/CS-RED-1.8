/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <hamsandwich>
#include <cstrike>
#include <csx>
#include <mmcl_util>
#include <player_api>

#include <TFM_WPN>
#include <CHARACTER_MOD>

#include <RankManagement/TFM_LevelSystem.inc>
#include <RankManagement/TFM_RankSystem.inc>

#include <player_api>


/*	Include Necessary GamePlay	*/
#include <GamePlay_Included/GamePlay_FFA.inc>
#include <GamePlay_Included/GamePlay_TDM.inc>
#include <GamePlay_Included/GamePlay_ESC.inc>
#include <GamePlay_Included/TFM_ZombieMod.inc>

#include <GamePlay_Included/Manager.inc>
#include <GamePlay_Included/IntegerConstant.inc>

/*************************************************/

#define PLUGIN "[TFM] EFFECT KILLER"
#define VERSION "-[No Info]-"
#define AUTHOR "Nguyen Duy Linh"

/*************************************************/


#define KILL_MARK_EXPIRE_TIME	8.0
#define HUD_DISPLAY_TIME 5.0


stock const szKillSprite[][] = {"KILL_1", "KILL_2", "KILL_3", "KILL_4", "KILL_5", "KILL_6",
				"KILL_7", "KILL_8"}

stock const szKillRadio[][] = {"MultiKill_1", "MultiKill_2", "MultiKill_3", "MultiKill_4", 
		"MultiKill_5", "MultiKill_6", "MultiKill_7",
				"MultiKill_8"}

/*		    CONSTANT			*/



/*		SPRITE DEFINITION		*/

#define FIRST_KILL_SPRITE	"FIRST_KILL"
#define LAST_KILL_SPRITE	"LAST_KILL"
				
				
#define REVENGE_SPRITE		"REVENGE"			
#define HEADSHOT_SPRITE	"HEADSHOT"
#define KNIFE_SPRITE	"KNIFE_KILL"
#define GRENADE_SPRITE	"GRENADE_KILL"
#define DEFUSE_SPRITE	"DEFUSED_C4"
#define PLANT_SPRITE	"SET_C4"
#define ESCAPE_SPRITE	"ESCAPE"	

#define HOSTAGE_RESCUE_SPRITE "HostageRescue"		

#define INFECTION_SPRITE "INFECTION"
#define ANTI_INFECTION_SPRITE_INFECTOR	"ANTI-INFECTION"
#define ANTI_INFECTION_SPRITE_VICTIM 	"ANTI-INFECTION-2"
#define ZOMBIE_KILL_SPRITE	"ZOMBIE_KILL"
#define ZM3_HERO_APPEAR_SPRITE	"HERO_APPEAR"

	
/************************************************/


/*		RADIO DEFINITION		*/		
		
#define HEADSHOT_RADIO "Headshot"		
#define PLANT_RADIO	"C4_Set"
#define DEFUSE_RADIO	"C4_Defuse"		
#define KNIFE_KILL_RADIO	"Knifekill"
#define GRENADE_KILL_RADIO	"Grenadekill"


/************************************************/


/*			TRIE SECTION			*/

// Trie Info
new Trie:iUserInfo[33]

// Trie Key
#define SECTION_KILLMARK_X_TGA	"KILL_MARK_X_TGA"
#define SECTION_KILLMARK_Y_TGA	"KILL_MARK_Y_TGA"

#define SECTION_KILLER_LEVEL	"KILLER_LEVEL"
#define SECTION_KILL_TIME	"KILL_TIME"

#define SECTION_ENEMY "INFO_ENEMY"

/********************************************************/



new bool:g_firstkill
new bool:g_lastkill


new iKill[33]

#define SUPER_HERO_RANK "ZOMBIE_KM"


new iMaxPlayers


public plugin_init()
{
	
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	
	register_concmd("TFM_HUD/KillMark/TGA/KillMark_X", "TGA_KILLMARK_X")
	register_concmd("TFM_HUD/KillMark/TGA/KillMark_Y", "TGA_KILLMARK_Y")
	
	
	register_logevent("HostageRescue",3,"2=Rescued_A_Hostage")
	
	
	
	register_dictionary("TFM_Dictionary.txt")
	iMaxPlayers = get_maxplayers()
	
}

/*		Kill-Mark 		*/


//	TGA
public TGA_KILLMARK_X(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_trie(id, SECTION_KILLMARK_X_TGA, str_to_float(szArg))
}

public TGA_KILLMARK_Y(id, iLevel, iCid)
{
	if (!cmd_access(id, iLevel, iCid, 2))
		return
		
	new szArg[10]
	read_argv(1, szArg, sizeof szArg - 1)
	set_float_to_trie(id, SECTION_KILLMARK_Y_TGA, str_to_float(szArg))
}


/****************************************/


public client_disconnect(id)
{
	if (iUserInfo[id])
		TrieDestroy(iUserInfo[id])
}

public client_putinserver(id)
{
	if (is_user_bot(id))
		return 
		
	if (iUserInfo[id])
		return
		
	iUserInfo[id] = TrieCreate()
}
/****************************************/


/****************************************/


public HostageRescue()
{
	new id = get_loguser_index()
	
	new iPlayers[32], iNumber
	
	get_players(iPlayers, iNumber, "ce", "CT")
	
	for (new i = 0 ; i < iNumber; i++)
	{
		new iPlayer = iPlayers[i]
		
		if (iPlayer == id)
		{
			client_print(id, print_center, "%L", id, "YOU_HAVE_RESCUED_HOSTAGE")
		}
		else	
		{
			new szPlayerName[32]
			get_user_name(id, szPlayerName, sizeof szPlayerName - 1)
			
			client_print(iPlayer, print_center, "%L", iPlayer, "PLAYER_HAS_RESCUED_HOSTAGE")
		}
	}
	
	draw_hud_kill(id, HOSTAGE_RESCUE_SPRITE)
	
}

stock get_loguser_index() 
{
	new loguser[80], name[32]
	read_logargv(0, loguser, 79)
	parse_loguser(loguser, name, 31)
	
	return get_user_index(name)
}

public bomb_planted(iPlanter)
{
	if (is_user_bot(iPlanter))
		return
		
	new szRank[32]
	TFM_get_user_rank(iPlanter, szRank, sizeof szRank - 1)
	
	csred_draw_kill_mark_sprite(iPlanter, szRank, PLANT_SPRITE)
	
}

public bomb_defused(iDefuser)
{
	if (is_user_bot(iDefuser))
		return
		
	new szRank[32]
	TFM_get_user_rank(iDefuser, szRank, sizeof szRank - 1)
	
	
	csred_draw_kill_mark_sprite(iDefuser, szRank, DEFUSE_SPRITE)
}


	
public csred_PlayerSpawnPost(id)
{
	if (is_user_bot(id))
		return
		
	set_int_to_trie(id, SECTION_KILLER_LEVEL, -1)
}
	

		
public client_death(iKiller, iVictim, iWPN_ID, iHitPlace, TK)
{
	
	if (!is_user_connected(iKiller) || !is_user_connected(iVictim))
		return
		
	if (iKiller == iVictim)	
	{
		set_int_to_trie(iVictim, SECTION_KILLER_LEVEL, -1)
		return
	}
	
	new iRealGamePlay = get_current_gameplay()
	
	if (TK)
	{
		if (iRealGamePlay  == GAMEMODE_FFA)
		{
			if( FFA_get_game_state())
			{
				client_death(iKiller, iVictim, iWPN_ID, iHitPlace, 0)
				return 
			}
		}
	}
	
	new Float:fCurrentTime = get_gametime()
	
	new Float:flKillTime = get_float_from_trie(iKiller, SECTION_KILL_TIME)
	
	if (fCurrentTime - flKillTime >= KILL_MARK_EXPIRE_TIME)
		set_int_to_trie(iKiller, SECTION_KILLER_LEVEL, -1)
		
	set_float_to_trie(iKiller, SECTION_KILL_TIME, fCurrentTime)
	set_int_to_trie(iKiller, SECTION_ENEMY, iKiller)
	
	iKill[iKiller]++
	
	new iKillerLevel = get_int_from_trie(iKiller, SECTION_KILLER_LEVEL)
	iKillerLevel++
	set_int_to_trie(iKiller, SECTION_KILLER_LEVEL, iKillerLevel)
		
	if (iKillerLevel > sizeof szKillSprite - 1)
		set_int_to_trie(iKiller, SECTION_KILLER_LEVEL, 0)
	
	
	if (!TK)
	{
		new szRank[32]
		TFM_get_user_rank(iKiller, szRank, sizeof szRank - 1)
		
		switch (iRealGamePlay)
		{
			case GAMEMODE_FFA:
			{
				if (FFA_get_game_state())
				{
					if (!g_firstkill)
					{
						csred_draw_kill_mark_sprite(iKiller, szRank, FIRST_KILL_SPRITE)
						play_sound(iKiller, szKillRadio[iKillerLevel])
						g_firstkill = true
						return
					}
					else if (g_firstkill && !g_lastkill)
					{
						
						if (iKill[iKiller] >= FFA_get_max_score())
						{
							csred_draw_kill_mark_sprite(iKiller, szRank, LAST_KILL_SPRITE)
							play_sound(iKiller, szKillRadio[iKillerLevel])
							g_lastkill = true
							return 
						}
					}
					
				}
			}
			case GAMEMODE_TDM:
			{
				if (TDM_get_game_state())
				{
					if (!g_lastkill)
					{
						new CsTeams:iTeam = cs_get_user_team(iKiller)
						
						if (iTeam == CS_TEAM_T)
						{
							if (TDM_get_score_terrorist() + 1 >= TDM_get_round_score())
							{
								csred_draw_kill_mark_sprite(iKiller, szRank, LAST_KILL_SPRITE)
								play_sound(iKiller, szKillRadio[iKillerLevel])
								g_lastkill = true
								return
							}
						}
						else if (iTeam == CS_TEAM_CT)
						{
							if (TDM_get_score_ct() + 1 >= TDM_get_round_score())
							{
								csred_draw_kill_mark_sprite(iKiller, szRank, LAST_KILL_SPRITE)
								play_sound(iKiller, szKillRadio[iKillerLevel])
								g_lastkill = true
								return 
							}
						}
					}
				}
			}
			
		}
		draw_kill_mark_by_level(iKiller, iVictim, iHitPlace, iWPN_ID, iKillerLevel)
	}
	
	return 					
}

public csred_PlayerKilledPost(iVictim, iKiller)
{
	if (!IsValidPlayer(iVictim))
		return
		
	if (!IsValidPlayer(iKiller))
		return
		
	g_firstkill = true
}


/*			GAME-PLAY : ZOMBIE 				*/

public TFM_user_infected(iInfector, iVictim, iInfectionType)
	draw_hud_kill(iInfector, INFECTION_SPRITE)

	
/************************************************************************/

public ES_UserEscapePost(iEscaper)
	draw_hud_kill(iEscaper, ESCAPE_SPRITE)

/************************************************************************/

public PW_GrenadeDamage(iVictim, iAttacker, iPrimaryWpnId, iAliveStatus)
{
	//	Victim is still alive ?
	if (iAliveStatus)
		return
		
	if (!is_user_connected(iVictim))
		return
		
	if (!is_user_connected(iAttacker))
		return
		
	new iFriendlyFireStatus = 0
	
	if (cs_get_user_team(iVictim) == cs_get_user_team(iAttacker))
		iFriendlyFireStatus = 1
		
	client_death(iAttacker, iVictim, CSW_HEGRENADE, HIT_GENERIC, iFriendlyFireStatus) 
}

/************************************************************************/	
stock draw_kill_mark_by_level(iKiller, iVictim, iHitPlace, iWPN_ID, iLEVEL)
{
	
	new szRank[32]
	TFM_get_user_rank(iKiller, szRank, sizeof szRank - 1)
	
	new iEnemyId = get_int_from_trie(iKiller, SECTION_ENEMY)
	
	if (iEnemyId == iVictim) 
	{
		csred_draw_kill_mark_sprite(iKiller, szRank, REVENGE_SPRITE)
		play_sound(iKiller, szKillRadio[iLEVEL])
					
		set_int_to_trie(iKiller, SECTION_ENEMY, -1000)
					
		return 
	}
	else 
	{
		if (iHitPlace == HIT_HEAD)
		{
			csred_draw_kill_mark_sprite(iKiller, szRank, HEADSHOT_SPRITE)
					
			if (!iLEVEL)
				play_sound(iKiller, HEADSHOT_RADIO)
			else
				play_sound(iKiller, szKillRadio[iLEVEL])
					
			return 
		}
		else
		{
			if (iWPN_ID == CSW_KNIFE)
			{
				if (!iLEVEL)
				{
					csred_draw_kill_mark_sprite(iKiller, szRank, KNIFE_SPRITE)
					play_sound(iKiller, KNIFE_KILL_RADIO)
				}
				else
				{
					csred_draw_kill_mark_sprite(iKiller, szRank, szKillSprite[iLEVEL])
					play_sound(iKiller, szKillRadio[iLEVEL])
				}
				return
			}
			else if (iWPN_ID == CSW_HEGRENADE)
			{
				if (!iLEVEL)
				{
					csred_draw_kill_mark_sprite(iKiller, szRank, GRENADE_SPRITE)
					play_sound(iKiller, GRENADE_KILL_RADIO)
				}
				else
				{
					csred_draw_kill_mark_sprite(iKiller, szRank, szKillSprite[iLEVEL])
					play_sound(iKiller, szKillRadio[iLEVEL])
				}
				return 
			}
			else
			{
				csred_draw_kill_mark_sprite(iKiller, szRank, szKillSprite[iLEVEL])
				play_sound(iKiller, szKillRadio[iLEVEL])
				return 
			}
		}
	}
}

stock csred_draw_kill_mark_sprite(id, szRank[], szHud[])
{
	if (is_user_bot(id) || !is_user_connected(id))
		return 
		
		
	new szFullHud[128]
	
	
	
	
	
	formatex(szFullHud, sizeof szFullHud - 1, "%s/KILL_MARK/%s/%s.tga", TFM_TGA_DIRECTORY, szRank, szHud)
	
	if (!file_exists(szFullHud))
		return
		
	formatex(szFullHud, sizeof szFullHud - 1, "%s/KILL_MARK/%s/%s", TFM_TGA_DIRECTORY, szRank, szHud)
	
	new Float:fX = get_float_from_trie(id, SECTION_KILLMARK_X_TGA)
	new Float:fY = get_float_from_trie(id, SECTION_KILLMARK_Y_TGA)
	
	MMCL_DrawTGA(id, szFullHud, 255, 255, 255, 255, fX, fY, 1, 0, HUD_DISPLAY_TIME /2, HUD_DISPLAY_TIME / 2, 0.0, CHANNEL_KILL_MARK_TGA)
	
	return 
	
} 

stock draw_hud_kill(id, szHud[])
{
	if (is_user_bot(id) || !is_user_connected(id))
		return 
		
		
	new szFullHud[128]
	
	
	
	
	
	formatex(szFullHud, sizeof szFullHud - 1, "%s/KILL_MARK/%s.tga", TFM_TGA_DIRECTORY,  szHud)
		
	if (!file_exists(szFullHud))
		return
		
	formatex(szFullHud, sizeof szFullHud - 1, "%s/KILL_MARK/%s", TFM_TGA_DIRECTORY,  szHud)
		
	new Float:fX = get_float_from_trie(id, SECTION_KILLMARK_X_TGA)
	new Float:fY = get_float_from_trie(id, SECTION_KILLMARK_Y_TGA)
	
	MMCL_DrawTGA(id, szFullHud, 255, 255, 255, 255, fX, fY, 1, 0, HUD_DISPLAY_TIME / 2, HUD_DISPLAY_TIME / 2, 0.0, CHANNEL_KILL_MARK_TGA)
	
	return 
	
}

stock play_sound(id, const szSound[])
{
	new szRadioSound[128], cTeam[32]
	new CsTeams:iTeam = cs_get_user_team(id)
	
	if (iTeam == CS_TEAM_T)
		cTeam = "BL"
	else if (iTeam == CS_TEAM_CT)
		cTeam = "GR"
		
	new iGender = GENDER_MALE
	
	new iCharacterId = get_user_character(id)
	
	if (iCharacterId > -1)
		iGender = get_character_gender(id, iTeam)
	else
	{
		new iInternalModel = UT_GetUserInternalModel(id)
		
		iGender = CS_INTERNAL_GENDER[iInternalModel]
	}
	
	if (iGender == GENDER_MALE)
		formatex(szRadioSound, 127, "misc/MultiKill/MALE/%s_%s.wav", szSound, cTeam)
	else if (iGender == 2)
		formatex(szRadioSound, 127, "misc/MultiKill/FEMALE/%s_%s.wav", szSound, cTeam)
		
	client_cmd(id, "spk %s", szRadioSound)
}

stock IsValidPlayer(id)
{
	if (!(1<= id <= iMaxPlayers))
		return 0
		
	if (!is_user_connected(id))
		return 0
		
	return 1
}

	
stock set_float_to_trie(id, szKey[], Float:fInput)
{
	if (is_user_bot(id))
		return
		
	if (!iUserInfo[id])
		return
		
	TrieSetCell(iUserInfo[id],szKey, fInput)
}

stock set_int_to_trie(id, szKey[], iInput)
{
	if (is_user_bot(id))
		return
		
	if (!iUserInfo[id])
		return
		
	TrieSetCell(iUserInfo[id],szKey, iInput)
}

stock get_int_from_trie(id, szKey[])
{
	if (is_user_bot(id))
		return 0
		
	if (!iUserInfo[id])
		return 0
		
	new iOutput
	TrieGetCell(iUserInfo[id],szKey, iOutput)
	return iOutput
}

stock Float:get_float_from_trie(id, szKey[])
{
	if (is_user_bot(id))
		return 0.0
		
	if (!iUserInfo[id])
		return 0.0
		
	new Float:fOutput = 0.0
	
	TrieGetCell(iUserInfo[id],szKey, fOutput)
	return fOutput
}
