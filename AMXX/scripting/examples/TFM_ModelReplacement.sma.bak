/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>

#include <celltrie>
#include <cswpn_ultilities>
#include <hamsandwich>
#include <cstrike>
#include <engine>

#include <TFM_WPN>
#include <GamePlay_Included/Tools.inc>

#define PLUGIN "Model Replacement"
#define VERSION "1.0"
#define AUTHOR "Nguyen Duy Linh"



#define TASK_CHANGE_ENTITY_MODEL 2000


new iModelCount = 0

//	BIT TOOLS


#define SetBit(%1,%2)      (%1[%2>>5] |= (1<<(%2 & 31)))
#define ClearBit(%1,%2)    (%1[%2>>5] &= ~(1<<(%2 & 31)))
#define CheckBit(%1,%2)    (%1[%2>>5] & (1<<(%2 & 31)))  


new Trie:iPreventModel
new Trie:iPreventModelPrecache
new Trie:iPreventModelSub

enum
{
	SECTION_UNPRECACHE,
	SECTION_SUB
}

new bit_CanReplaceModel[33]



stock is_primary_weapon(iWeaponId)
{
	new PRIMARY_WEAPONS_BITSUM = ((1<<CSW_SCOUT)|(1<<CSW_XM1014)|(1<<CSW_MAC10)|(1<<CSW_AUG)|(1<<CSW_UMP45)|(1<<CSW_SG550)|(1<<CSW_GALIL)|(1<<CSW_FAMAS)|(1<<CSW_AWP)|(1<<CSW_MP5NAVY)|(1<<CSW_M249)|(1<<CSW_M3)|(1<<CSW_M4A1)|(1<<CSW_TMP)|(1<<CSW_G3SG1)|(1<<CSW_SG552)|(1<<CSW_AK47)|(1<<CSW_P90))
	return (PRIMARY_WEAPONS_BITSUM & (1<<iWeaponId))
}

stock is_secondary_weapon(iWeaponId)
{
	new SECONDARY_WEAPONS_BITSUM = ((1<<CSW_USP)|(1<<CSW_GLOCK18)|(1<<CSW_DEAGLE)|(1<<CSW_P228)|(1<<CSW_ELITE)|(1<<CSW_FIVESEVEN))
	return (SECONDARY_WEAPONS_BITSUM & (1<<iWeaponId))
}

stock is_grenade(iWeaponId)
{
	new GRENADES_BITSUM = ((1<<CSW_HEGRENADE)|(1<<CSW_FLASHBANG)|(1<<CSW_SMOKEGRENADE))
	return (GRENADES_BITSUM & (1<<iWeaponId))
}



public plugin_natives()
	register_native("UT_SetEntityModel", "_SetEntityModel", 1) 

public _SetEntityModel(iEnt, szModel[], iSubBody)
{
	if (!pev_valid(iEnt))
		return 0
		
	param_convert(2)
	
	if (iSubBody < 0 /*Auto Detection Mode*/)
	{
		if (TrieKeyExists(iPreventModel, szModel))
		{
			new szReplacedModel[128], iModelSub
		
			TrieGetString(iPreventModel, szModel, szReplacedModel, sizeof szReplacedModel - 1)
			TrieGetCell(iPreventModelSub, szModel, iModelSub)
			
			engfunc(EngFunc_SetModel, iEnt, szReplacedModel)
			set_pev(iEnt, pev_body, iModelSub)
			return 1
		}
	}
	engfunc(EngFunc_SetModel, iEnt, szModel)
	return 1
}

public plugin_precache()
{
	new szConfigDir[128], szConfigFile[256]
	
	iModelCount = 0
	
	get_configsdir(szConfigDir, sizeof szConfigDir - 1)
	
	new CONFIGURATION_FILE[] =  "ModelReplacement.cfg"
	formatex(szConfigFile, sizeof szConfigFile - 1, "%s/%s", szConfigDir, CONFIGURATION_FILE)
	
		
	if (!iPreventModel)
		iPreventModel = TrieCreate()
		
	if (!iPreventModelPrecache)
		iPreventModelPrecache = TrieCreate()
		
	if (!iPreventModelSub)
		iPreventModelSub = TrieCreate()
	
	if (!file_exists(szConfigFile))
		return
	
	
	for (new i = 0; i < file_size(szConfigFile, 1); i++)
	{
		new TXT[1024], iTRASH
		
		read_file(szConfigFile, i, TXT, sizeof TXT - 1, iTRASH)
		
		if (containi(TXT, "//") != -1 || containi(TXT, ";") != -1)
			continue
			
		new szPreventedModel[128], szReplacedModel[128], szUnprecache[32], szSubModel[32]
		parse(TXT, szPreventedModel,  sizeof szPreventedModel - 1,  szReplacedModel, sizeof szReplacedModel - 1, szUnprecache, sizeof szUnprecache - 1, szSubModel, sizeof szSubModel - 1)
		
		replace(szPreventedModel, sizeof szPreventedModel - 1, "[Replace]", "")
		replace(szReplacedModel, sizeof szReplacedModel - 1, "[With]", "")
		replace(szUnprecache, sizeof szUnprecache - 1, "[UnprecacheModel]", "")
		replace(szSubModel, sizeof szSubModel - 1, "[SubOfReplacement]", "")
		
		if (TrieKeyExists(iPreventModel, szPreventedModel))
			continue
		
		TrieSetCell(iPreventModel,  szPreventedModel, iModelCount)
		TrieSetString(iPreventModel, szPreventedModel, szReplacedModel)
		
		
		TrieSetCell(iPreventModelPrecache, szPreventedModel, str_to_num(szUnprecache))
		TrieSetCell(iPreventModelSub, szPreventedModel, str_to_num(szSubModel))
		
		
		engfunc(EngFunc_PrecacheModel, szReplacedModel)
		
		iModelCount++
	}
	
		
	register_forward(FM_PrecacheModel, "fw_PrecacheModelPre")
	register_forward(FM_SetModel, "fw_SetModelPre")
	register_forward(FM_SetModel, "fw_SetModelPost", 1)
	
}
	
public fw_PrecacheModelPre(szModel[])
{
	if (TrieKeyExists(iPreventModel, szModel))
	{
		new iPrecacheStatus 
		
		TrieGetCell(iPreventModelPrecache, szModel, iPrecacheStatus)
		
		if (iPrecacheStatus)
			return FMRES_SUPERCEDE
	}
	return FMRES_IGNORED
}

public fw_SetModelPre(iEnt, szModel[])
{
	
	if (!pev_valid(iEnt))
		return FMRES_SUPERCEDE;
	
	
	new id = pev(iEnt, pev_owner)
	
	ClearBit(bit_CanReplaceModel, iEnt)
	
	if (TrieKeyExists(iPreventModel, szModel))
	{
		new szClassName[32]
		pev(iEnt, pev_classname, szClassName, sizeof szClassName - 1)
			
				
		if (equal(szClassName, "weaponbox"))	// IS WEAPON BOX
		{
			if (!is_user_connected(id))
				return FMRES_SUPERCEDE
				
			if (is_user_zombie(id))
				return FMRES_SUPERCEDE
				
			new iModelPos = UT_WorldModelToWeaponId(szModel)
				
			if (is_secondary_weapon(iModelPos))
			{	
				if (get_user_sec_wpn(id) > -1)				
					return FMRES_SUPERCEDE
			}
			else if (is_primary_weapon(iModelPos))
			{
				if (get_user_pw(id) > -1)
					return FMRES_SUPERCEDE
			}
			else if (iModelPos == CSW_KNIFE)
			{
				return FMRES_SUPERCEDE
			}
			else if (is_grenade(iModelPos))
			{
				if (get_user_grenade(id, iModelPos) > -1)
					return FMRES_SUPERCEDE
			}
		}
		
		if (equal(szClassName, "grenade"))
		{
			new iGrenadeType = cs_get_grenade_type(iEnt)
			
			if (!is_user_connected(id))
				return FMRES_SUPERCEDE
					
			if (is_user_zombie(id))
				return FMRES_SUPERCEDE
					
			if (iGrenadeType != CSW_C4)
			{
				
				if (get_user_grenade(id, iGrenadeType) > - 1)
					return FMRES_SUPERCEDE
			}
			
		}
			
		SetBit(bit_CanReplaceModel, iEnt)
		
		return FMRES_SUPERCEDE
	}
	
	return FMRES_IGNORED
}

public fw_SetModelPost(iEnt, szModel[])
{
	
	if (!pev_valid(iEnt))
		return
		
	
	if (!TrieKeyExists(iPreventModel, szModel))
		return
	
	if (!CheckBit(bit_CanReplaceModel, iEnt))
		return
		
	new id = pev(iEnt, pev_owner)
	
	new szClassName[32]
	pev(iEnt, pev_classname, szClassName, sizeof szClassName - 1)
	
		
	if (equal(szClassName, "grenade", 7))
	{
		
		new iGrenadeType = cs_get_grenade_type(iEnt)
		if (iGrenadeType != CSW_C4)
		{
			if (!is_user_connected(id))
				return 
		}
				
			
	}
			
	new szReplacedModel[128], iModelSub
	
	TrieGetString(iPreventModel, szModel, szReplacedModel, sizeof szReplacedModel - 1)
	TrieGetCell(iPreventModelSub, szModel, iModelSub)
	
	engfunc(EngFunc_SetModel, iEnt, szReplacedModel)
	set_pev(iEnt, pev_body, iModelSub)
			
	ClearBit(bit_CanReplaceModel, iEnt)
	return
		
	
}

	
stock cs_get_grenade_type( iEnt ) // VEN
{
	if(get_pdata_int(iEnt, 96, 4) & (1<<8))
		return CSW_C4
	
	new iBits = get_pdata_int(iEnt, 114, 4)
	if (iBits & (1<<0))
		return CSW_HEGRENADE
	else if (iBits & (1<<1))
		return CSW_SMOKEGRENADE
	else if (!iBits)
		return CSW_FLASHBANG        
	return 0
}
	
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
